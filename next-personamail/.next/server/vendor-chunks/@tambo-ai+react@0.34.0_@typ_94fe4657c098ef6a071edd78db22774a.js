"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a";
exports.ids = ["vendor-chunks/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/hooks/use-current-message.js":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/hooks/use-current-message.js ***!
  \*******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TamboMessageProvider: () => (/* binding */ TamboMessageProvider),\n/* harmony export */   useTamboCurrentMessage: () => (/* binding */ useTamboCurrentMessage),\n/* harmony export */   useTamboMessageContext: () => (/* binding */ useTamboMessageContext),\n/* harmony export */   wrapWithTamboMessageProvider: () => (/* binding */ wrapWithTamboMessageProvider)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _providers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../providers */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-thread-provider.js\");\n/* __next_internal_client_entry_do_not_use__ TamboMessageProvider,wrapWithTamboMessageProvider,useTamboMessageContext,useTamboCurrentMessage auto */ \n\nconst TamboMessageContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    messageId: \"\"\n});\n/**\n * Wraps all components, so that they can find what thread and message they are in\n * @param props - props for the TamboMessageProvider\n * @param props.children - The children to wrap\n * @param props.messageId - The messageId of the message\n * @returns The wrapped component\n */ const TamboMessageProvider = ({ children, messageId })=>{\n    // Use a unique key={...} to force a re-render when the messageId changes - this\n    // make sure that if the rendered component is swapped into a tree (like if\n    // you always show the last rendered component) then the state/etc is correct\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TamboMessageContext.Provider, {\n        value: {\n            messageId\n        },\n        key: messageId\n    }, children);\n};\n/**\n * Wraps a component with a ComponentMessageProvider - this allows the provider\n * to be used outside of a TSX file\n * @param children - The children to wrap\n * @param threadId - The threadId of the thread\n * @param messageId - The messageId of the message\n * @returns The wrapped component\n */ function wrapWithTamboMessageProvider(children, threadId, messageId) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TamboMessageProvider, {\n        threadId: threadId,\n        messageId: messageId\n    }, children);\n}\n/**\n * Hook used inside a component wrapped with ComponentMessageProvider, to get\n * the threadId and messageId\n * @returns The threadId and messageId\n */ const useTamboMessageContext = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TamboMessageContext);\n    if (!context) {\n        throw new Error(\"useTamboMessageContext must be used within a TamboMessageProvider\");\n    }\n    return context;\n};\n/**\n * Hook used inside a component wrapped with ComponentMessageProvider, to get\n * the current message. The current thread will be fetched from the server, if\n * it is not already in the cache.\n * @returns The current message that is used to render the component\n */ const useTamboCurrentMessage = ()=>{\n    const { messageId, threadId } = useTamboMessageContext();\n    const { thread } = (0,_providers__WEBPACK_IMPORTED_MODULE_1__.useTamboThread)();\n    if (thread.id && threadId && thread.id !== threadId) {\n        console.warn(`Thread ID mismatch ${thread.id} !== ${threadId}`);\n    }\n    const message = thread.messages.find((m)=>m.id === messageId);\n    return message;\n}; //# sourceMappingURL=use-current-message.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhbWJvLWFpK3JlYWN0QDAuMzQuMF9AdHlwXzk0ZmU0NjU3YzA5OGVmNmEwNzFlZGQ3OGRiMjI3NzRhL25vZGVfbW9kdWxlcy9AdGFtYm8tYWkvcmVhY3QvZXNtL2hvb2tzL3VzZS1jdXJyZW50LW1lc3NhZ2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztxSkFDNEU7QUFDOUI7QUFZOUMsTUFBTSxtQkFBbUIsaUJBQUcsb0RBQWEsQ0FBMkI7SUFDbEUsU0FBUyxFQUFFLEVBQUU7Q0FDZCxDQUFDLENBQUM7QUFFSDs7Ozs7O0dBTUcsQ0FDSSxNQUFNLG9CQUFvQixHQUU3QixDQUFDLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUU7SUFDOUIsZ0ZBQWdGO0lBQ2hGLDJFQUEyRTtJQUMzRSw2RUFBNkU7SUFDN0UsT0FBTyxjQUNMLDJEQUFDLG1CQUFtQixDQUFDLFFBQVE7UUFBQyxLQUFLLEVBQUU7WUFBRSxTQUFTO1FBQUEsQ0FBRTtRQUFFLEdBQUcsRUFBRSxTQUFTO0lBQUEsR0FDL0QsUUFBUSxDQUNvQixDQUNoQztBQUNILENBQUMsQ0FBQztBQUVGOzs7Ozs7O0dBT0csQ0FDRyxTQUFVLDRCQUE0QixDQUMxQyxRQUF5QixFQUN6QixRQUFnQixFQUNoQixTQUFpQjtJQUVqQixPQUFPLGNBQ0wsMkRBQUMsb0JBQW9CO1FBQUMsUUFBUSxFQUFFLFFBQVE7UUFBRSxTQUFTLEVBQUUsU0FBUztJQUFBLEdBQzNELFFBQVEsQ0FDWSxDQUN4QjtBQUNILENBQUM7QUFDRDs7OztHQUlHLENBQ0ksTUFBTSxzQkFBc0IsR0FBRyxHQUFHLEVBQUU7SUFDekMsTUFBTSxPQUFPLEdBQUcsaURBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2hELElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNiLE1BQU0sSUFBSSxLQUFLLENBQ2IsbUVBQW1FLENBQ3BFLENBQUM7SUFDSixDQUFDO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBRUY7Ozs7O0dBS0csQ0FDSSxNQUFNLHNCQUFzQixHQUFHLEdBQUcsRUFBRTtJQUN6QyxNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxHQUFHLHNCQUFzQixFQUFFLENBQUM7SUFDekQsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLDBEQUFjLEVBQUUsQ0FBQztJQUNwQyxJQUFJLE1BQU0sQ0FBQyxFQUFFLElBQUksUUFBUSxJQUFJLE1BQU0sQ0FBQyxFQUFFLEtBQUssUUFBUSxFQUFFLENBQUM7UUFDcEQsT0FBTyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsTUFBTSxDQUFDLEVBQUUsUUFBUSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFHLENBQUQsQ0FBRyxFQUFFLEtBQUssU0FBUyxDQUFDLENBQUM7SUFDaEUsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJFOlxcd29ya1NwYWNlXFxDVVJTT1JcXHNyY1xcaG9va3NcXHVzZS1jdXJyZW50LW1lc3NhZ2UudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIFByb3BzV2l0aENoaWxkcmVuLCB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VUYW1ib1RocmVhZCB9IGZyb20gXCIuLi9wcm92aWRlcnNcIjtcblxuaW50ZXJmYWNlIFRhbWJvTWVzc2FnZUNvbnRleHRQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgdGhyZWFkSWQgb2YgdGhlIHRocmVhZFxuICAgKiBAZGVwcmVjYXRlZCBVc2UgdGhlIHRocmVhZCBvYmplY3QgZnJvbSB0aGUgVGFtYm9UaHJlYWRQcm92aWRlciBpbnN0ZWFkXG4gICAqL1xuICB0aHJlYWRJZD86IHN0cmluZztcbiAgLyoqIFRoZSBtZXNzYWdlSWQgb2YgdGhlIG1lc3NhZ2UgKi9cbiAgbWVzc2FnZUlkOiBzdHJpbmc7XG59XG5cbmNvbnN0IFRhbWJvTWVzc2FnZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0PFRhbWJvTWVzc2FnZUNvbnRleHRQcm9wcz4oe1xuICBtZXNzYWdlSWQ6IFwiXCIsXG59KTtcblxuLyoqXG4gKiBXcmFwcyBhbGwgY29tcG9uZW50cywgc28gdGhhdCB0aGV5IGNhbiBmaW5kIHdoYXQgdGhyZWFkIGFuZCBtZXNzYWdlIHRoZXkgYXJlIGluXG4gKiBAcGFyYW0gcHJvcHMgLSBwcm9wcyBmb3IgdGhlIFRhbWJvTWVzc2FnZVByb3ZpZGVyXG4gKiBAcGFyYW0gcHJvcHMuY2hpbGRyZW4gLSBUaGUgY2hpbGRyZW4gdG8gd3JhcFxuICogQHBhcmFtIHByb3BzLm1lc3NhZ2VJZCAtIFRoZSBtZXNzYWdlSWQgb2YgdGhlIG1lc3NhZ2VcbiAqIEByZXR1cm5zIFRoZSB3cmFwcGVkIGNvbXBvbmVudFxuICovXG5leHBvcnQgY29uc3QgVGFtYm9NZXNzYWdlUHJvdmlkZXI6IFJlYWN0LkZDPFxuICBQcm9wc1dpdGhDaGlsZHJlbjxUYW1ib01lc3NhZ2VDb250ZXh0UHJvcHM+XG4+ID0gKHsgY2hpbGRyZW4sIG1lc3NhZ2VJZCB9KSA9PiB7XG4gIC8vIFVzZSBhIHVuaXF1ZSBrZXk9ey4uLn0gdG8gZm9yY2UgYSByZS1yZW5kZXIgd2hlbiB0aGUgbWVzc2FnZUlkIGNoYW5nZXMgLSB0aGlzXG4gIC8vIG1ha2Ugc3VyZSB0aGF0IGlmIHRoZSByZW5kZXJlZCBjb21wb25lbnQgaXMgc3dhcHBlZCBpbnRvIGEgdHJlZSAobGlrZSBpZlxuICAvLyB5b3UgYWx3YXlzIHNob3cgdGhlIGxhc3QgcmVuZGVyZWQgY29tcG9uZW50KSB0aGVuIHRoZSBzdGF0ZS9ldGMgaXMgY29ycmVjdFxuICByZXR1cm4gKFxuICAgIDxUYW1ib01lc3NhZ2VDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IG1lc3NhZ2VJZCB9fSBrZXk9e21lc3NhZ2VJZH0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9UYW1ib01lc3NhZ2VDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcblxuLyoqXG4gKiBXcmFwcyBhIGNvbXBvbmVudCB3aXRoIGEgQ29tcG9uZW50TWVzc2FnZVByb3ZpZGVyIC0gdGhpcyBhbGxvd3MgdGhlIHByb3ZpZGVyXG4gKiB0byBiZSB1c2VkIG91dHNpZGUgb2YgYSBUU1ggZmlsZVxuICogQHBhcmFtIGNoaWxkcmVuIC0gVGhlIGNoaWxkcmVuIHRvIHdyYXBcbiAqIEBwYXJhbSB0aHJlYWRJZCAtIFRoZSB0aHJlYWRJZCBvZiB0aGUgdGhyZWFkXG4gKiBAcGFyYW0gbWVzc2FnZUlkIC0gVGhlIG1lc3NhZ2VJZCBvZiB0aGUgbWVzc2FnZVxuICogQHJldHVybnMgVGhlIHdyYXBwZWQgY29tcG9uZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3cmFwV2l0aFRhbWJvTWVzc2FnZVByb3ZpZGVyKFxuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlLFxuICB0aHJlYWRJZDogc3RyaW5nLFxuICBtZXNzYWdlSWQ6IHN0cmluZyxcbikge1xuICByZXR1cm4gKFxuICAgIDxUYW1ib01lc3NhZ2VQcm92aWRlciB0aHJlYWRJZD17dGhyZWFkSWR9IG1lc3NhZ2VJZD17bWVzc2FnZUlkfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1RhbWJvTWVzc2FnZVByb3ZpZGVyPlxuICApO1xufVxuLyoqXG4gKiBIb29rIHVzZWQgaW5zaWRlIGEgY29tcG9uZW50IHdyYXBwZWQgd2l0aCBDb21wb25lbnRNZXNzYWdlUHJvdmlkZXIsIHRvIGdldFxuICogdGhlIHRocmVhZElkIGFuZCBtZXNzYWdlSWRcbiAqIEByZXR1cm5zIFRoZSB0aHJlYWRJZCBhbmQgbWVzc2FnZUlkXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VUYW1ib01lc3NhZ2VDb250ZXh0ID0gKCkgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChUYW1ib01lc3NhZ2VDb250ZXh0KTtcbiAgaWYgKCFjb250ZXh0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJ1c2VUYW1ib01lc3NhZ2VDb250ZXh0IG11c3QgYmUgdXNlZCB3aXRoaW4gYSBUYW1ib01lc3NhZ2VQcm92aWRlclwiLFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG4vKipcbiAqIEhvb2sgdXNlZCBpbnNpZGUgYSBjb21wb25lbnQgd3JhcHBlZCB3aXRoIENvbXBvbmVudE1lc3NhZ2VQcm92aWRlciwgdG8gZ2V0XG4gKiB0aGUgY3VycmVudCBtZXNzYWdlLiBUaGUgY3VycmVudCB0aHJlYWQgd2lsbCBiZSBmZXRjaGVkIGZyb20gdGhlIHNlcnZlciwgaWZcbiAqIGl0IGlzIG5vdCBhbHJlYWR5IGluIHRoZSBjYWNoZS5cbiAqIEByZXR1cm5zIFRoZSBjdXJyZW50IG1lc3NhZ2UgdGhhdCBpcyB1c2VkIHRvIHJlbmRlciB0aGUgY29tcG9uZW50XG4gKi9cbmV4cG9ydCBjb25zdCB1c2VUYW1ib0N1cnJlbnRNZXNzYWdlID0gKCkgPT4ge1xuICBjb25zdCB7IG1lc3NhZ2VJZCwgdGhyZWFkSWQgfSA9IHVzZVRhbWJvTWVzc2FnZUNvbnRleHQoKTtcbiAgY29uc3QgeyB0aHJlYWQgfSA9IHVzZVRhbWJvVGhyZWFkKCk7XG4gIGlmICh0aHJlYWQuaWQgJiYgdGhyZWFkSWQgJiYgdGhyZWFkLmlkICE9PSB0aHJlYWRJZCkge1xuICAgIGNvbnNvbGUud2FybihgVGhyZWFkIElEIG1pc21hdGNoICR7dGhyZWFkLmlkfSAhPT0gJHt0aHJlYWRJZH1gKTtcbiAgfVxuXG4gIGNvbnN0IG1lc3NhZ2UgPSB0aHJlYWQubWVzc2FnZXMuZmluZCgobSkgPT4gbS5pZCA9PT0gbWVzc2FnZUlkKTtcbiAgcmV0dXJuIG1lc3NhZ2U7XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/hooks/use-current-message.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/model/generate-component-response.js":
/*!***************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/model/generate-component-response.js ***!
  \***************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GenerationStage: () => (/* binding */ GenerationStage),\n/* harmony export */   isIdleStage: () => (/* binding */ isIdleStage)\n/* harmony export */ });\nvar GenerationStage;\n(function (GenerationStage) {\n    GenerationStage[\"IDLE\"] = \"IDLE\";\n    GenerationStage[\"CHOOSING_COMPONENT\"] = \"CHOOSING_COMPONENT\";\n    GenerationStage[\"FETCHING_CONTEXT\"] = \"FETCHING_CONTEXT\";\n    GenerationStage[\"HYDRATING_COMPONENT\"] = \"HYDRATING_COMPONENT\";\n    GenerationStage[\"STREAMING_RESPONSE\"] = \"STREAMING_RESPONSE\";\n    GenerationStage[\"COMPLETE\"] = \"COMPLETE\";\n    GenerationStage[\"ERROR\"] = \"ERROR\";\n    GenerationStage[\"CANCELLED\"] = \"CANCELLED\";\n})(GenerationStage || (GenerationStage = {}));\n/**\n * Checks if the generation stage is in a state where it can accept user input.\n * @param generationStage - The generation stage to check\n * @returns True if the generation stage is idle, false otherwise\n */\nfunction isIdleStage(generationStage) {\n    return [\n        GenerationStage.IDLE,\n        GenerationStage.COMPLETE,\n        GenerationStage.ERROR,\n        GenerationStage.CANCELLED,\n    ].includes(generationStage);\n}\n//# sourceMappingURL=generate-component-response.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhbWJvLWFpK3JlYWN0QDAuMzQuMF9AdHlwXzk0ZmU0NjU3YzA5OGVmNmEwNzFlZGQ3OGRiMjI3NzRhL25vZGVfbW9kdWxlcy9AdGFtYm8tYWkvcmVhY3QvZXNtL21vZGVsL2dlbmVyYXRlLWNvbXBvbmVudC1yZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQ0FBMEM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRTpcXHdvcmtTcGFjZVxcQ1VSU09SXFxwZXJzb25hLW1haWwtYWktYWRhcHRcXG5leHQtcGVyc29uYW1haWxcXG5vZGVfbW9kdWxlc1xcLnBucG1cXEB0YW1iby1haStyZWFjdEAwLjM0LjBfQHR5cF85NGZlNDY1N2MwOThlZjZhMDcxZWRkNzhkYjIyNzc0YVxcbm9kZV9tb2R1bGVzXFxAdGFtYm8tYWlcXHJlYWN0XFxlc21cXG1vZGVsXFxnZW5lcmF0ZS1jb21wb25lbnQtcmVzcG9uc2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHZhciBHZW5lcmF0aW9uU3RhZ2U7XG4oZnVuY3Rpb24gKEdlbmVyYXRpb25TdGFnZSkge1xuICAgIEdlbmVyYXRpb25TdGFnZVtcIklETEVcIl0gPSBcIklETEVcIjtcbiAgICBHZW5lcmF0aW9uU3RhZ2VbXCJDSE9PU0lOR19DT01QT05FTlRcIl0gPSBcIkNIT09TSU5HX0NPTVBPTkVOVFwiO1xuICAgIEdlbmVyYXRpb25TdGFnZVtcIkZFVENISU5HX0NPTlRFWFRcIl0gPSBcIkZFVENISU5HX0NPTlRFWFRcIjtcbiAgICBHZW5lcmF0aW9uU3RhZ2VbXCJIWURSQVRJTkdfQ09NUE9ORU5UXCJdID0gXCJIWURSQVRJTkdfQ09NUE9ORU5UXCI7XG4gICAgR2VuZXJhdGlvblN0YWdlW1wiU1RSRUFNSU5HX1JFU1BPTlNFXCJdID0gXCJTVFJFQU1JTkdfUkVTUE9OU0VcIjtcbiAgICBHZW5lcmF0aW9uU3RhZ2VbXCJDT01QTEVURVwiXSA9IFwiQ09NUExFVEVcIjtcbiAgICBHZW5lcmF0aW9uU3RhZ2VbXCJFUlJPUlwiXSA9IFwiRVJST1JcIjtcbiAgICBHZW5lcmF0aW9uU3RhZ2VbXCJDQU5DRUxMRURcIl0gPSBcIkNBTkNFTExFRFwiO1xufSkoR2VuZXJhdGlvblN0YWdlIHx8IChHZW5lcmF0aW9uU3RhZ2UgPSB7fSkpO1xuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdlbmVyYXRpb24gc3RhZ2UgaXMgaW4gYSBzdGF0ZSB3aGVyZSBpdCBjYW4gYWNjZXB0IHVzZXIgaW5wdXQuXG4gKiBAcGFyYW0gZ2VuZXJhdGlvblN0YWdlIC0gVGhlIGdlbmVyYXRpb24gc3RhZ2UgdG8gY2hlY2tcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGdlbmVyYXRpb24gc3RhZ2UgaXMgaWRsZSwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0lkbGVTdGFnZShnZW5lcmF0aW9uU3RhZ2UpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBHZW5lcmF0aW9uU3RhZ2UuSURMRSxcbiAgICAgICAgR2VuZXJhdGlvblN0YWdlLkNPTVBMRVRFLFxuICAgICAgICBHZW5lcmF0aW9uU3RhZ2UuRVJST1IsXG4gICAgICAgIEdlbmVyYXRpb25TdGFnZS5DQU5DRUxMRUQsXG4gICAgXS5pbmNsdWRlcyhnZW5lcmF0aW9uU3RhZ2UpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VuZXJhdGUtY29tcG9uZW50LXJlc3BvbnNlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/model/generate-component-response.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-client-provider.js":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-client-provider.js ***!
  \*************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TamboClientContext: () => (/* binding */ TamboClientContext),\n/* harmony export */   TamboClientProvider: () => (/* binding */ TamboClientProvider),\n/* harmony export */   useTamboClient: () => (/* binding */ useTamboClient),\n/* harmony export */   useTamboQueryClient: () => (/* binding */ useTamboQueryClient)\n/* harmony export */ });\n/* harmony import */ var _tambo_ai_typescript_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tambo-ai/typescript-sdk */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+typescript-sdk@0.58.0/node_modules/@tambo-ai/typescript-sdk/index.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/.pnpm/@tanstack+query-core@5.81.5/node_modules/@tanstack/query-core/build/modern/queryClient.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../package.json */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/package.json\");\n/* __next_internal_client_entry_do_not_use__ TamboClientContext,TamboClientProvider,useTamboClient,useTamboQueryClient auto */ \n\n\n\nconst TamboClientContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(undefined);\n/**\n * The TamboClientProvider is a React provider that provides a TamboAI client\n * and a query client to the descendants of the provider.\n * @param props - The props for the TamboClientProvider\n * @param props.children - The children to wrap\n * @param props.tamboUrl - The URL of the Tambo API\n * @param props.apiKey - The API key for the Tambo API\n * @param props.environment - The environment to use for the Tambo API\n * @returns The TamboClientProvider component\n */ const TamboClientProvider = ({ children, tamboUrl, apiKey, environment })=>{\n    const tamboConfig = {\n        apiKey,\n        defaultHeaders: {\n            \"X-Tambo-React-Version\": _package_json__WEBPACK_IMPORTED_MODULE_1__.version\n        }\n    };\n    if (tamboUrl) {\n        tamboConfig.baseURL = tamboUrl;\n    }\n    if (environment) {\n        tamboConfig.environment = environment;\n    }\n    const [client] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"TamboClientProvider.useState\": ()=>new _tambo_ai_typescript_sdk__WEBPACK_IMPORTED_MODULE_2__[\"default\"](tamboConfig)\n    }[\"TamboClientProvider.useState\"]);\n    const [queryClient] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"TamboClientProvider.useState\": ()=>new _tanstack_react_query__WEBPACK_IMPORTED_MODULE_3__.QueryClient()\n    }[\"TamboClientProvider.useState\"]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TamboClientContext.Provider, {\n        value: {\n            client,\n            queryClient\n        }\n    }, children);\n};\n/**\n * The useTamboClient hook provides access to the TamboAI client\n * to the descendants of the TamboClientProvider.\n * @returns The TamboAI client\n */ const useTamboClient = ()=>{\n    const context = react__WEBPACK_IMPORTED_MODULE_0___default().useContext(TamboClientContext);\n    if (context === undefined) {\n        throw new Error(\"useTamboClient must be used within a TamboClientProvider\");\n    }\n    return context.client;\n};\n/**\n * The useTamboQueryClient hook provides access to the tambo-specific query client\n * to the descendants of the TamboClientProvider.\n * @returns The tambo-specific query client\n * @private\n */ const useTamboQueryClient = ()=>{\n    const context = react__WEBPACK_IMPORTED_MODULE_0___default().useContext(TamboClientContext);\n    if (context === undefined) {\n        throw new Error(\"useTamboQueryClient must be used within a TamboClientProvider\");\n    }\n    return context.queryClient;\n}; //# sourceMappingURL=tambo-client-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhbWJvLWFpK3JlYWN0QDAuMzQuMF9AdHlwXzk0ZmU0NjU3YzA5OGVmNmEwNzFlZGQ3OGRiMjI3NzRhL25vZGVfbW9kdWxlcy9AdGFtYm8tYWkvcmVhY3QvZXNtL3Byb3ZpZGVycy90YW1iby1jbGllbnQtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OytIQUNrRTtBQUNkO0FBQ3NCO0FBQzdCO0FBeUJ0QyxNQUFNLGtCQUFrQixpQkFBRyxvREFBYSxDQUU3QyxTQUFTLENBQUMsQ0FBQztBQUViOzs7Ozs7Ozs7R0FTRyxDQUNJLE1BQU0sbUJBQW1CLEdBRTVCLENBQUMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFO0lBQ2xELE1BQU0sV0FBVyxHQUFrQjtRQUNqQyxNQUFNO1FBQ04sY0FBYyxFQUFFO1lBQ2QsdUJBQXVCLEVBQUUsa0RBQW1CO1NBQzdDO0tBQ0YsQ0FBQztJQUNGLElBQUksUUFBUSxFQUFFLENBQUM7UUFDYixXQUFXLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztJQUNqQyxDQUFDO0lBQ0QsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUNoQixXQUFXLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUN4QyxDQUFDO0lBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLCtDQUFRO3dDQUFDLEdBQUcsQ0FBRyxDQUFELEdBQUssZ0VBQU8sQ0FBQyxXQUFXLENBQUM7O0lBQ3hELE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRywrQ0FBUTt3Q0FBQyxHQUFHLENBQUcsQ0FBRCxHQUFLLDhEQUFXLEVBQUU7O0lBQ3RELE9BQU8sY0FDTCwyREFBQyxrQkFBa0IsQ0FBQyxRQUFRO1FBQUMsS0FBSyxFQUFFO1lBQUUsTUFBTTtZQUFFLFdBQVc7UUFBQSxDQUFFO0lBQUEsR0FDeEQsUUFBUSxDQUNtQixDQUMvQjtBQUNILENBQUMsQ0FBQztBQUVGOzs7O0dBSUcsQ0FDSSxNQUFNLGNBQWMsR0FBRyxHQUFHLEVBQUU7SUFDakMsTUFBTSxPQUFPLEdBQUcsdURBQWdCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNyRCxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLDBEQUEwRCxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUNELE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUN4QixDQUFDLENBQUM7QUFFRjs7Ozs7R0FLRyxDQUNJLE1BQU0sbUJBQW1CLEdBQUcsR0FBRyxFQUFFO0lBQ3RDLE1BQU0sT0FBTyxHQUFHLHVEQUFnQixDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDckQsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFLENBQUM7UUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FDYiwrREFBK0QsQ0FDaEUsQ0FBQztJQUNKLENBQUM7SUFDRCxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDN0IsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJFOlxcd29ya1NwYWNlXFxDVVJTT1JcXHNyY1xccHJvdmlkZXJzXFx0YW1iby1jbGllbnQtcHJvdmlkZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuaW1wb3J0IFRhbWJvQUksIHsgQ2xpZW50T3B0aW9ucyB9IGZyb20gXCJAdGFtYm8tYWkvdHlwZXNjcmlwdC1zZGtcIjtcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50IH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiO1xuaW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIFByb3BzV2l0aENoaWxkcmVuLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHBhY2thZ2VKc29uIGZyb20gXCIuLi8uLi9wYWNrYWdlLmpzb25cIjtcblxuZXhwb3J0IGludGVyZmFjZSBUYW1ib0NsaWVudFByb3ZpZGVyUHJvcHMge1xuICAvKipcbiAgICogVGhlIFVSTCBvZiB0aGUgVGFtYm8gQVBJIChvbmx5IHVzZWQgZm9yIGxvY2FsIGRldmVsb3BtZW50IGFuZCBkZWJ1Z2dpbmcpXG4gICAqL1xuICB0YW1ib1VybD86IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBBUEkga2V5IGZvciB0aGUgVGFtYm8gQVBJLiBUaGlzIHR5cGljYWxseSBjb21lcyBmcm9tIGEgdmFyaWFibGUgbGlrZVxuICAgKiBgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfVEFNQk9fQVBJX0tFWWBcbiAgICovXG4gIGFwaUtleTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGVudmlyb25tZW50IHRvIHVzZSBmb3IgdGhlIFRhbWJvIEFQSVxuICAgKi9cbiAgZW52aXJvbm1lbnQ/OiBcInByb2R1Y3Rpb25cIiB8IFwic3RhZ2luZ1wiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhbWJvQ2xpZW50Q29udGV4dFByb3BzIHtcbiAgLyoqIFRoZSBUYW1ib0FJIGNsaWVudCAqL1xuICBjbGllbnQ6IFRhbWJvQUk7XG4gIC8qKiBUaGUgdGFtYm8tc3BlY2lmaWMgcXVlcnkgY2xpZW50ICovXG4gIHF1ZXJ5Q2xpZW50OiBRdWVyeUNsaWVudDtcbn1cblxuZXhwb3J0IGNvbnN0IFRhbWJvQ2xpZW50Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8XG4gIFRhbWJvQ2xpZW50Q29udGV4dFByb3BzIHwgdW5kZWZpbmVkXG4+KHVuZGVmaW5lZCk7XG5cbi8qKlxuICogVGhlIFRhbWJvQ2xpZW50UHJvdmlkZXIgaXMgYSBSZWFjdCBwcm92aWRlciB0aGF0IHByb3ZpZGVzIGEgVGFtYm9BSSBjbGllbnRcbiAqIGFuZCBhIHF1ZXJ5IGNsaWVudCB0byB0aGUgZGVzY2VuZGFudHMgb2YgdGhlIHByb3ZpZGVyLlxuICogQHBhcmFtIHByb3BzIC0gVGhlIHByb3BzIGZvciB0aGUgVGFtYm9DbGllbnRQcm92aWRlclxuICogQHBhcmFtIHByb3BzLmNoaWxkcmVuIC0gVGhlIGNoaWxkcmVuIHRvIHdyYXBcbiAqIEBwYXJhbSBwcm9wcy50YW1ib1VybCAtIFRoZSBVUkwgb2YgdGhlIFRhbWJvIEFQSVxuICogQHBhcmFtIHByb3BzLmFwaUtleSAtIFRoZSBBUEkga2V5IGZvciB0aGUgVGFtYm8gQVBJXG4gKiBAcGFyYW0gcHJvcHMuZW52aXJvbm1lbnQgLSBUaGUgZW52aXJvbm1lbnQgdG8gdXNlIGZvciB0aGUgVGFtYm8gQVBJXG4gKiBAcmV0dXJucyBUaGUgVGFtYm9DbGllbnRQcm92aWRlciBjb21wb25lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IFRhbWJvQ2xpZW50UHJvdmlkZXI6IFJlYWN0LkZDPFxuICBQcm9wc1dpdGhDaGlsZHJlbjxUYW1ib0NsaWVudFByb3ZpZGVyUHJvcHM+XG4+ID0gKHsgY2hpbGRyZW4sIHRhbWJvVXJsLCBhcGlLZXksIGVudmlyb25tZW50IH0pID0+IHtcbiAgY29uc3QgdGFtYm9Db25maWc6IENsaWVudE9wdGlvbnMgPSB7XG4gICAgYXBpS2V5LFxuICAgIGRlZmF1bHRIZWFkZXJzOiB7XG4gICAgICBcIlgtVGFtYm8tUmVhY3QtVmVyc2lvblwiOiBwYWNrYWdlSnNvbi52ZXJzaW9uLFxuICAgIH0sXG4gIH07XG4gIGlmICh0YW1ib1VybCkge1xuICAgIHRhbWJvQ29uZmlnLmJhc2VVUkwgPSB0YW1ib1VybDtcbiAgfVxuICBpZiAoZW52aXJvbm1lbnQpIHtcbiAgICB0YW1ib0NvbmZpZy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50O1xuICB9XG4gIGNvbnN0IFtjbGllbnRdID0gdXNlU3RhdGUoKCkgPT4gbmV3IFRhbWJvQUkodGFtYm9Db25maWcpKTtcbiAgY29uc3QgW3F1ZXJ5Q2xpZW50XSA9IHVzZVN0YXRlKCgpID0+IG5ldyBRdWVyeUNsaWVudCgpKTtcbiAgcmV0dXJuIChcbiAgICA8VGFtYm9DbGllbnRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IGNsaWVudCwgcXVlcnlDbGllbnQgfX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9UYW1ib0NsaWVudENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuXG4vKipcbiAqIFRoZSB1c2VUYW1ib0NsaWVudCBob29rIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgVGFtYm9BSSBjbGllbnRcbiAqIHRvIHRoZSBkZXNjZW5kYW50cyBvZiB0aGUgVGFtYm9DbGllbnRQcm92aWRlci5cbiAqIEByZXR1cm5zIFRoZSBUYW1ib0FJIGNsaWVudFxuICovXG5leHBvcnQgY29uc3QgdXNlVGFtYm9DbGllbnQgPSAoKSA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFRhbWJvQ2xpZW50Q29udGV4dCk7XG4gIGlmIChjb250ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1c2VUYW1ib0NsaWVudCBtdXN0IGJlIHVzZWQgd2l0aGluIGEgVGFtYm9DbGllbnRQcm92aWRlclwiKTtcbiAgfVxuICByZXR1cm4gY29udGV4dC5jbGllbnQ7XG59O1xuXG4vKipcbiAqIFRoZSB1c2VUYW1ib1F1ZXJ5Q2xpZW50IGhvb2sgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSB0YW1iby1zcGVjaWZpYyBxdWVyeSBjbGllbnRcbiAqIHRvIHRoZSBkZXNjZW5kYW50cyBvZiB0aGUgVGFtYm9DbGllbnRQcm92aWRlci5cbiAqIEByZXR1cm5zIFRoZSB0YW1iby1zcGVjaWZpYyBxdWVyeSBjbGllbnRcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VUYW1ib1F1ZXJ5Q2xpZW50ID0gKCkgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChUYW1ib0NsaWVudENvbnRleHQpO1xuICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJ1c2VUYW1ib1F1ZXJ5Q2xpZW50IG11c3QgYmUgdXNlZCB3aXRoaW4gYSBUYW1ib0NsaWVudFByb3ZpZGVyXCIsXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY29udGV4dC5xdWVyeUNsaWVudDtcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-client-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-component-provider.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-component-provider.js ***!
  \****************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TamboComponentProvider: () => (/* binding */ TamboComponentProvider),\n/* harmony export */   useTamboComponent: () => (/* binding */ useTamboComponent)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _tambo_client_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tambo-client-provider */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-client-provider.js\");\n/* harmony import */ var _tambo_registry_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tambo-registry-provider */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-registry-provider.js\");\n/* __next_internal_client_entry_do_not_use__ TamboComponentProvider,useTamboComponent auto */ \n\n\nconst TamboComponentContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    /**\n     *\n     */ registerComponent: ()=>{},\n    /**\n     *\n     */ registerTool: ()=>{},\n    /**\n     *\n     */ registerTools: ()=>{},\n    /**\n     *\n     */ addToolAssociation: ()=>{}\n});\n/**\n * The TamboComponentProvider is a React provider that provides component\n * registration services to the descendants of the provider.\n * @param props - The props for the TamboComponentProvider\n * @param props.children - The children to wrap\n * @returns The TamboComponentProvider component\n */ const TamboComponentProvider = ({ children })=>{\n    const client = (0,_tambo_client_provider__WEBPACK_IMPORTED_MODULE_1__.useTamboClient)();\n    const { registerComponent, addToolAssociation, registerTool, registerTools } = (0,_tambo_registry_provider__WEBPACK_IMPORTED_MODULE_2__.useTamboRegistry)();\n    const value = {\n        client,\n        registerComponent,\n        registerTool,\n        registerTools,\n        addToolAssociation\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TamboComponentContext.Provider, {\n        value: value\n    }, children);\n};\n/**\n * The useTamboComponent hook provides access to the component registration\n * services to the descendants of the TamboComponentProvider.\n * @returns The component registration services\n */ const useTamboComponent = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TamboComponentContext);\n}; //# sourceMappingURL=tambo-component-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhbWJvLWFpK3JlYWN0QDAuMzQuMF9AdHlwXzk0ZmU0NjU3YzA5OGVmNmEwNzFlZGQ3OGRiMjI3NzRhL25vZGVfbW9kdWxlcy9AdGFtYm8tYWkvcmVhY3QvZXNtL3Byb3ZpZGVycy90YW1iby1jb21wb25lbnQtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OzhGQUM0RTtBQUVuQjtBQUNJO0FBUzdELE1BQU0scUJBQXFCLGlCQUFHLG9EQUFhLENBQTZCO0lBQ3RFOztPQUVHLENBQ0gsaUJBQWlCLEVBQUUsR0FBRyxFQUFFLENBQUc7SUFDM0I7O09BRUcsQ0FDSCxZQUFZLEVBQUUsR0FBRyxFQUFFLENBQUc7SUFDdEI7O09BRUcsQ0FDSCxhQUFhLEVBQUUsR0FBRyxFQUFFLENBQUc7SUFDdkI7O09BRUcsQ0FDSCxrQkFBa0IsRUFBRSxHQUFHLEVBQUUsQ0FBRztDQUM3QixDQUFDLENBQUM7QUFFSDs7Ozs7O0dBTUcsQ0FDSSxNQUFNLHNCQUFzQixHQUFnQyxDQUFDLEVBQ2xFLFFBQVEsRUFDVCxFQUFFLEVBQUU7SUFDSCxNQUFNLE1BQU0sR0FBRyxzRUFBYyxFQUFFLENBQUM7SUFDaEMsTUFBTSxFQUFFLGlCQUFpQixFQUFFLGtCQUFrQixFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsR0FDMUUsMEVBQWdCLEVBQUUsQ0FBQztJQUVyQixNQUFNLEtBQUssR0FBRztRQUNaLE1BQU07UUFDTixpQkFBaUI7UUFDakIsWUFBWTtRQUNaLGFBQWE7UUFDYixrQkFBa0I7S0FDbkIsQ0FBQztJQUVGLE9BQU8sY0FDTCwyREFBQyxxQkFBcUIsQ0FBQyxRQUFRO1FBQUMsS0FBSyxFQUFFLEtBQUs7SUFBQSxHQUN6QyxRQUFRLENBQ3NCLENBQ2xDO0FBQ0gsQ0FBQyxDQUFDO0FBRUY7Ozs7R0FJRyxDQUNJLE1BQU0saUJBQWlCLEdBQUcsR0FBRyxFQUFFO0lBQ3BDLE9BQU8saURBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQzNDLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsiRTpcXHdvcmtTcGFjZVxcQ1VSU09SXFxzcmNcXHByb3ZpZGVyc1xcdGFtYm8tY29tcG9uZW50LXByb3ZpZGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcbmltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCBQcm9wc1dpdGhDaGlsZHJlbiwgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgVGFtYm9Db21wb25lbnQsIFRhbWJvVG9vbCB9IGZyb20gXCIuLi9tb2RlbC9jb21wb25lbnQtbWV0YWRhdGFcIjtcbmltcG9ydCB7IHVzZVRhbWJvQ2xpZW50IH0gZnJvbSBcIi4vdGFtYm8tY2xpZW50LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyB1c2VUYW1ib1JlZ2lzdHJ5IH0gZnJvbSBcIi4vdGFtYm8tcmVnaXN0cnktcHJvdmlkZXJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBUYW1ib0NvbXBvbmVudENvbnRleHRQcm9wcyB7XG4gIHJlZ2lzdGVyQ29tcG9uZW50OiAob3B0aW9uczogVGFtYm9Db21wb25lbnQpID0+IHZvaWQ7XG4gIHJlZ2lzdGVyVG9vbDogKHRvb2w6IFRhbWJvVG9vbCkgPT4gdm9pZDtcbiAgcmVnaXN0ZXJUb29sczogKHRvb2xzOiBUYW1ib1Rvb2xbXSkgPT4gdm9pZDtcbiAgYWRkVG9vbEFzc29jaWF0aW9uOiAoY29tcG9uZW50TmFtZTogc3RyaW5nLCB0b29sOiBUYW1ib1Rvb2wpID0+IHZvaWQ7XG59XG5cbmNvbnN0IFRhbWJvQ29tcG9uZW50Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8VGFtYm9Db21wb25lbnRDb250ZXh0UHJvcHM+KHtcbiAgLyoqXG4gICAqXG4gICAqL1xuICByZWdpc3RlckNvbXBvbmVudDogKCkgPT4ge30sXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgcmVnaXN0ZXJUb29sOiAoKSA9PiB7fSxcbiAgLyoqXG4gICAqXG4gICAqL1xuICByZWdpc3RlclRvb2xzOiAoKSA9PiB7fSxcbiAgLyoqXG4gICAqXG4gICAqL1xuICBhZGRUb29sQXNzb2NpYXRpb246ICgpID0+IHt9LFxufSk7XG5cbi8qKlxuICogVGhlIFRhbWJvQ29tcG9uZW50UHJvdmlkZXIgaXMgYSBSZWFjdCBwcm92aWRlciB0aGF0IHByb3ZpZGVzIGNvbXBvbmVudFxuICogcmVnaXN0cmF0aW9uIHNlcnZpY2VzIHRvIHRoZSBkZXNjZW5kYW50cyBvZiB0aGUgcHJvdmlkZXIuXG4gKiBAcGFyYW0gcHJvcHMgLSBUaGUgcHJvcHMgZm9yIHRoZSBUYW1ib0NvbXBvbmVudFByb3ZpZGVyXG4gKiBAcGFyYW0gcHJvcHMuY2hpbGRyZW4gLSBUaGUgY2hpbGRyZW4gdG8gd3JhcFxuICogQHJldHVybnMgVGhlIFRhbWJvQ29tcG9uZW50UHJvdmlkZXIgY29tcG9uZW50XG4gKi9cbmV4cG9ydCBjb25zdCBUYW1ib0NvbXBvbmVudFByb3ZpZGVyOiBSZWFjdC5GQzxQcm9wc1dpdGhDaGlsZHJlbj4gPSAoe1xuICBjaGlsZHJlbixcbn0pID0+IHtcbiAgY29uc3QgY2xpZW50ID0gdXNlVGFtYm9DbGllbnQoKTtcbiAgY29uc3QgeyByZWdpc3RlckNvbXBvbmVudCwgYWRkVG9vbEFzc29jaWF0aW9uLCByZWdpc3RlclRvb2wsIHJlZ2lzdGVyVG9vbHMgfSA9XG4gICAgdXNlVGFtYm9SZWdpc3RyeSgpO1xuXG4gIGNvbnN0IHZhbHVlID0ge1xuICAgIGNsaWVudCxcbiAgICByZWdpc3RlckNvbXBvbmVudCxcbiAgICByZWdpc3RlclRvb2wsXG4gICAgcmVnaXN0ZXJUb29scyxcbiAgICBhZGRUb29sQXNzb2NpYXRpb24sXG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8VGFtYm9Db21wb25lbnRDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt2YWx1ZX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9UYW1ib0NvbXBvbmVudENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59O1xuXG4vKipcbiAqIFRoZSB1c2VUYW1ib0NvbXBvbmVudCBob29rIHByb3ZpZGVzIGFjY2VzcyB0byB0aGUgY29tcG9uZW50IHJlZ2lzdHJhdGlvblxuICogc2VydmljZXMgdG8gdGhlIGRlc2NlbmRhbnRzIG9mIHRoZSBUYW1ib0NvbXBvbmVudFByb3ZpZGVyLlxuICogQHJldHVybnMgVGhlIGNvbXBvbmVudCByZWdpc3RyYXRpb24gc2VydmljZXNcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVRhbWJvQ29tcG9uZW50ID0gKCkgPT4ge1xuICByZXR1cm4gdXNlQ29udGV4dChUYW1ib0NvbXBvbmVudENvbnRleHQpO1xufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-component-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-provider.js":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-provider.js ***!
  \******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TamboCompositeProvider: () => (/* binding */ TamboCompositeProvider),\n/* harmony export */   TamboContext: () => (/* binding */ TamboContext),\n/* harmony export */   TamboProvider: () => (/* binding */ TamboProvider),\n/* harmony export */   useTambo: () => (/* binding */ useTambo)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _tambo_client_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tambo-client-provider */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-client-provider.js\");\n/* harmony import */ var _tambo_component_provider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tambo-component-provider */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-component-provider.js\");\n/* harmony import */ var _tambo_registry_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tambo-registry-provider */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-registry-provider.js\");\n/* harmony import */ var _tambo_thread_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tambo-thread-provider */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-thread-provider.js\");\n/* __next_internal_client_entry_do_not_use__ TamboProvider,TamboContext,TamboCompositeProvider,useTambo auto */ \n\n\n\n\n/**\n * The TamboProvider gives full access to the whole Tambo API. This includes the\n * TamboAI client, the component registry, and the current thread context.\n * @param props - The props for the TamboProvider\n * @param props.children - The children to wrap\n * @param props.tamboUrl - The URL of the Tambo API\n * @param props.apiKey - The API key for the Tambo API\n * @param props.components - The components to register\n * @param props.environment - The environment to use for the Tambo API\n * @param props.tools - The tools to register\n * @param props.streaming - Whether to stream the response by default. Defaults to true.\n * @returns The TamboProvider component\n */ const TamboProvider = ({ children, tamboUrl, apiKey, components, environment, tools, streaming })=>{\n    // Should only be used in browser\n    if (true) {\n        console.error(\"TamboProvider must be used within a browser\");\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_tambo_client_provider__WEBPACK_IMPORTED_MODULE_1__.TamboClientProvider, {\n        tamboUrl: tamboUrl,\n        apiKey: apiKey,\n        environment: environment\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_tambo_registry_provider__WEBPACK_IMPORTED_MODULE_2__.TamboRegistryProvider, {\n        components: components,\n        tools: tools\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_tambo_thread_provider__WEBPACK_IMPORTED_MODULE_3__.TamboThreadProvider, {\n        streaming: streaming\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_tambo_component_provider__WEBPACK_IMPORTED_MODULE_4__.TamboComponentProvider, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TamboCompositeProvider, null, children)))));\n};\nconst TamboContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\n/**\n * TamboCompositeProvider is a provider that combines the TamboClient,\n * TamboThread, and TamboComponent providers\n * @param props - The props for the TamboCompositeProvider\n * @param props.children - The children to wrap\n * @returns The wrapped component\n */ const TamboCompositeProvider = ({ children })=>{\n    const threads = (0,_tambo_thread_provider__WEBPACK_IMPORTED_MODULE_3__.useTamboThread)();\n    const client = (0,_tambo_client_provider__WEBPACK_IMPORTED_MODULE_1__.useTamboClient)();\n    const queryClient = (0,_tambo_client_provider__WEBPACK_IMPORTED_MODULE_1__.useTamboQueryClient)();\n    const componentRegistry = (0,_tambo_component_provider__WEBPACK_IMPORTED_MODULE_4__.useTamboComponent)();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TamboContext.Provider, {\n        value: {\n            client,\n            queryClient,\n            ...componentRegistry,\n            ...threads\n        }\n    }, children);\n};\n/**\n * The useTambo hook provides access to the Tambo API. This is the primary entrypoint\n * for the Tambo React SDK.\n *\n * This includes the TamboAI client, the component registry, and the current thread context.\n * @returns The Tambo API\n */ const useTambo = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TamboContext);\n}; //# sourceMappingURL=tambo-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhbWJvLWFpK3JlYWN0QDAuMzQuMF9AdHlwXzk0ZmU0NjU3YzA5OGVmNmEwNzFlZGQ3OGRiMjI3NzRhL25vZGVfbW9kdWxlcy9AdGFtYm8tYWkvcmVhY3QvZXNtL3Byb3ZpZGVycy90YW1iby1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O2dIQUM0RTtBQU8zQztBQUtHO0FBSUQ7QUFNRjtBQUVqQzs7Ozs7Ozs7Ozs7O0dBWUcsQ0FDSSxNQUFNLGFBQWEsR0FNdEIsQ0FBQyxFQUNILFFBQVEsRUFDUixRQUFRLEVBQ1IsTUFBTSxFQUNOLFVBQVUsRUFDVixXQUFXLEVBQ1gsS0FBSyxFQUNMLFNBQVMsRUFDVixFQUFFLEVBQUU7SUFDSCxpQ0FBaUM7SUFDakMsSUFBSSxJQUE2QixFQUFFLENBQUM7UUFDbEMsT0FBTyxDQUFDLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxPQUFPLGNBQ0wsMkRBQUMsdUVBQW1CO1FBQ2xCLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLE1BQU0sRUFBRSxNQUFNO1FBQ2QsV0FBVyxFQUFFLFdBQVc7SUFBQSxpQkFFeEIsMkRBQUMsMkVBQXFCO1FBQUMsVUFBVSxFQUFFLFVBQVU7UUFBRSxLQUFLLEVBQUUsS0FBSztJQUFBLGlCQUN6RCwyREFBQyx1RUFBbUI7UUFBQyxTQUFTLEVBQUUsU0FBUztJQUFBLGlCQUN2QywyREFBQyw2RUFBc0Isc0JBQ3JCLDJEQUFDLHNCQUFzQixRQUFFLFFBQVEsQ0FBMEIsQ0FDcEMsQ0FDTCxDQUNBLENBQ0osQ0FDdkI7QUFDSCxDQUFDLENBQUM7QUFLSyxNQUFNLFlBQVksaUJBQUcsb0RBQWEsQ0FDdkMsRUFBdUIsQ0FDeEIsQ0FBQztBQUVGOzs7Ozs7R0FNRyxDQUNJLE1BQU0sc0JBQXNCLEdBQWdDLENBQUMsRUFDbEUsUUFBUSxFQUNULEVBQUUsRUFBRTtJQUNILE1BQU0sT0FBTyxHQUFHLHNFQUFjLEVBQUUsQ0FBQztJQUNqQyxNQUFNLE1BQU0sR0FBRyxzRUFBYyxFQUFFLENBQUM7SUFDaEMsTUFBTSxXQUFXLEdBQUcsMkVBQW1CLEVBQUUsQ0FBQztJQUMxQyxNQUFNLGlCQUFpQixHQUFHLDRFQUFpQixFQUFFLENBQUM7SUFFOUMsT0FBTyxjQUNMLDJEQUFDLFlBQVksQ0FBQyxRQUFRO1FBQ3BCLEtBQUssRUFBRTtZQUNMLE1BQU07WUFDTixXQUFXO1lBQ1gsR0FBRyxpQkFBaUI7WUFDcEIsR0FBRyxPQUFPO1NBQ1g7SUFBQSxHQUVBLFFBQVEsQ0FDYSxDQUN6QjtBQUNILENBQUMsQ0FBQztBQUVGOzs7Ozs7R0FNRyxDQUNJLE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRTtJQUMzQixPQUFPLGlEQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDbEMsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJFOlxcd29ya1NwYWNlXFxDVVJTT1JcXHNyY1xccHJvdmlkZXJzXFx0YW1iby1wcm92aWRlci50c3giXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5pbXBvcnQgUmVhY3QsIHsgUHJvcHNXaXRoQ2hpbGRyZW4sIGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7XG4gIFRhbWJvQ2xpZW50Q29udGV4dFByb3BzLFxuICBUYW1ib0NsaWVudFByb3ZpZGVyLFxuICBUYW1ib0NsaWVudFByb3ZpZGVyUHJvcHMsXG4gIHVzZVRhbWJvQ2xpZW50LFxuICB1c2VUYW1ib1F1ZXJ5Q2xpZW50LFxufSBmcm9tIFwiLi90YW1iby1jbGllbnQtcHJvdmlkZXJcIjtcbmltcG9ydCB7XG4gIFRhbWJvQ29tcG9uZW50Q29udGV4dFByb3BzLFxuICBUYW1ib0NvbXBvbmVudFByb3ZpZGVyLFxuICB1c2VUYW1ib0NvbXBvbmVudCxcbn0gZnJvbSBcIi4vdGFtYm8tY29tcG9uZW50LXByb3ZpZGVyXCI7XG5pbXBvcnQge1xuICBUYW1ib1JlZ2lzdHJ5UHJvdmlkZXIsXG4gIFRhbWJvUmVnaXN0cnlQcm92aWRlclByb3BzLFxufSBmcm9tIFwiLi90YW1iby1yZWdpc3RyeS1wcm92aWRlclwiO1xuaW1wb3J0IHtcbiAgVGFtYm9UaHJlYWRDb250ZXh0UHJvcHMsXG4gIFRhbWJvVGhyZWFkUHJvdmlkZXIsXG4gIFRhbWJvVGhyZWFkUHJvdmlkZXJQcm9wcyxcbiAgdXNlVGFtYm9UaHJlYWQsXG59IGZyb20gXCIuL3RhbWJvLXRocmVhZC1wcm92aWRlclwiO1xuXG4vKipcbiAqIFRoZSBUYW1ib1Byb3ZpZGVyIGdpdmVzIGZ1bGwgYWNjZXNzIHRvIHRoZSB3aG9sZSBUYW1ibyBBUEkuIFRoaXMgaW5jbHVkZXMgdGhlXG4gKiBUYW1ib0FJIGNsaWVudCwgdGhlIGNvbXBvbmVudCByZWdpc3RyeSwgYW5kIHRoZSBjdXJyZW50IHRocmVhZCBjb250ZXh0LlxuICogQHBhcmFtIHByb3BzIC0gVGhlIHByb3BzIGZvciB0aGUgVGFtYm9Qcm92aWRlclxuICogQHBhcmFtIHByb3BzLmNoaWxkcmVuIC0gVGhlIGNoaWxkcmVuIHRvIHdyYXBcbiAqIEBwYXJhbSBwcm9wcy50YW1ib1VybCAtIFRoZSBVUkwgb2YgdGhlIFRhbWJvIEFQSVxuICogQHBhcmFtIHByb3BzLmFwaUtleSAtIFRoZSBBUEkga2V5IGZvciB0aGUgVGFtYm8gQVBJXG4gKiBAcGFyYW0gcHJvcHMuY29tcG9uZW50cyAtIFRoZSBjb21wb25lbnRzIHRvIHJlZ2lzdGVyXG4gKiBAcGFyYW0gcHJvcHMuZW52aXJvbm1lbnQgLSBUaGUgZW52aXJvbm1lbnQgdG8gdXNlIGZvciB0aGUgVGFtYm8gQVBJXG4gKiBAcGFyYW0gcHJvcHMudG9vbHMgLSBUaGUgdG9vbHMgdG8gcmVnaXN0ZXJcbiAqIEBwYXJhbSBwcm9wcy5zdHJlYW1pbmcgLSBXaGV0aGVyIHRvIHN0cmVhbSB0aGUgcmVzcG9uc2UgYnkgZGVmYXVsdC4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAqIEByZXR1cm5zIFRoZSBUYW1ib1Byb3ZpZGVyIGNvbXBvbmVudFxuICovXG5leHBvcnQgY29uc3QgVGFtYm9Qcm92aWRlcjogUmVhY3QuRkM8XG4gIFByb3BzV2l0aENoaWxkcmVuPFxuICAgIFRhbWJvQ2xpZW50UHJvdmlkZXJQcm9wcyAmXG4gICAgICBUYW1ib1JlZ2lzdHJ5UHJvdmlkZXJQcm9wcyAmXG4gICAgICBUYW1ib1RocmVhZFByb3ZpZGVyUHJvcHNcbiAgPlxuPiA9ICh7XG4gIGNoaWxkcmVuLFxuICB0YW1ib1VybCxcbiAgYXBpS2V5LFxuICBjb21wb25lbnRzLFxuICBlbnZpcm9ubWVudCxcbiAgdG9vbHMsXG4gIHN0cmVhbWluZyxcbn0pID0+IHtcbiAgLy8gU2hvdWxkIG9ubHkgYmUgdXNlZCBpbiBicm93c2VyXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlRhbWJvUHJvdmlkZXIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGJyb3dzZXJcIik7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxUYW1ib0NsaWVudFByb3ZpZGVyXG4gICAgICB0YW1ib1VybD17dGFtYm9Vcmx9XG4gICAgICBhcGlLZXk9e2FwaUtleX1cbiAgICAgIGVudmlyb25tZW50PXtlbnZpcm9ubWVudH1cbiAgICA+XG4gICAgICA8VGFtYm9SZWdpc3RyeVByb3ZpZGVyIGNvbXBvbmVudHM9e2NvbXBvbmVudHN9IHRvb2xzPXt0b29sc30+XG4gICAgICAgIDxUYW1ib1RocmVhZFByb3ZpZGVyIHN0cmVhbWluZz17c3RyZWFtaW5nfT5cbiAgICAgICAgICA8VGFtYm9Db21wb25lbnRQcm92aWRlcj5cbiAgICAgICAgICAgIDxUYW1ib0NvbXBvc2l0ZVByb3ZpZGVyPntjaGlsZHJlbn08L1RhbWJvQ29tcG9zaXRlUHJvdmlkZXI+XG4gICAgICAgICAgPC9UYW1ib0NvbXBvbmVudFByb3ZpZGVyPlxuICAgICAgICA8L1RhbWJvVGhyZWFkUHJvdmlkZXI+XG4gICAgICA8L1RhbWJvUmVnaXN0cnlQcm92aWRlcj5cbiAgICA8L1RhbWJvQ2xpZW50UHJvdmlkZXI+XG4gICk7XG59O1xuZXhwb3J0IHR5cGUgVGFtYm9Db250ZXh0UHJvcHMgPSBUYW1ib0NsaWVudENvbnRleHRQcm9wcyAmXG4gIFRhbWJvVGhyZWFkQ29udGV4dFByb3BzICZcbiAgVGFtYm9Db21wb25lbnRDb250ZXh0UHJvcHM7XG5cbmV4cG9ydCBjb25zdCBUYW1ib0NvbnRleHQgPSBjcmVhdGVDb250ZXh0PFRhbWJvQ29udGV4dFByb3BzPihcbiAge30gYXMgVGFtYm9Db250ZXh0UHJvcHMsXG4pO1xuXG4vKipcbiAqIFRhbWJvQ29tcG9zaXRlUHJvdmlkZXIgaXMgYSBwcm92aWRlciB0aGF0IGNvbWJpbmVzIHRoZSBUYW1ib0NsaWVudCxcbiAqIFRhbWJvVGhyZWFkLCBhbmQgVGFtYm9Db21wb25lbnQgcHJvdmlkZXJzXG4gKiBAcGFyYW0gcHJvcHMgLSBUaGUgcHJvcHMgZm9yIHRoZSBUYW1ib0NvbXBvc2l0ZVByb3ZpZGVyXG4gKiBAcGFyYW0gcHJvcHMuY2hpbGRyZW4gLSBUaGUgY2hpbGRyZW4gdG8gd3JhcFxuICogQHJldHVybnMgVGhlIHdyYXBwZWQgY29tcG9uZW50XG4gKi9cbmV4cG9ydCBjb25zdCBUYW1ib0NvbXBvc2l0ZVByb3ZpZGVyOiBSZWFjdC5GQzxQcm9wc1dpdGhDaGlsZHJlbj4gPSAoe1xuICBjaGlsZHJlbixcbn0pID0+IHtcbiAgY29uc3QgdGhyZWFkcyA9IHVzZVRhbWJvVGhyZWFkKCk7XG4gIGNvbnN0IGNsaWVudCA9IHVzZVRhbWJvQ2xpZW50KCk7XG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gdXNlVGFtYm9RdWVyeUNsaWVudCgpO1xuICBjb25zdCBjb21wb25lbnRSZWdpc3RyeSA9IHVzZVRhbWJvQ29tcG9uZW50KCk7XG5cbiAgcmV0dXJuIChcbiAgICA8VGFtYm9Db250ZXh0LlByb3ZpZGVyXG4gICAgICB2YWx1ZT17e1xuICAgICAgICBjbGllbnQsXG4gICAgICAgIHF1ZXJ5Q2xpZW50LFxuICAgICAgICAuLi5jb21wb25lbnRSZWdpc3RyeSxcbiAgICAgICAgLi4udGhyZWFkcyxcbiAgICAgIH19XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvVGFtYm9Db250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcblxuLyoqXG4gKiBUaGUgdXNlVGFtYm8gaG9vayBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIFRhbWJvIEFQSS4gVGhpcyBpcyB0aGUgcHJpbWFyeSBlbnRyeXBvaW50XG4gKiBmb3IgdGhlIFRhbWJvIFJlYWN0IFNESy5cbiAqXG4gKiBUaGlzIGluY2x1ZGVzIHRoZSBUYW1ib0FJIGNsaWVudCwgdGhlIGNvbXBvbmVudCByZWdpc3RyeSwgYW5kIHRoZSBjdXJyZW50IHRocmVhZCBjb250ZXh0LlxuICogQHJldHVybnMgVGhlIFRhbWJvIEFQSVxuICovXG5leHBvcnQgY29uc3QgdXNlVGFtYm8gPSAoKSA9PiB7XG4gIHJldHVybiB1c2VDb250ZXh0KFRhbWJvQ29udGV4dCk7XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-registry-provider.js":
/*!***************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-registry-provider.js ***!
  \***************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TamboRegistryContext: () => (/* binding */ TamboRegistryContext),\n/* harmony export */   TamboRegistryProvider: () => (/* binding */ TamboRegistryProvider),\n/* harmony export */   useTamboRegistry: () => (/* binding */ useTamboRegistry)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/.pnpm/zod@3.25.74/node_modules/zod/v3/types.js\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod-to-json-schema */ \"(ssr)/./node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.74/node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _util_validate_zod_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/validate-zod-schema */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/validate-zod-schema.js\");\n/* __next_internal_client_entry_do_not_use__ TamboRegistryContext,TamboRegistryProvider,useTamboRegistry auto */ \n\n\n\nconst TamboRegistryContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    componentList: {},\n    toolRegistry: {},\n    componentToolAssociations: {},\n    /**\n     *\n     */ registerComponent: ()=>{},\n    /**\n     *\n     */ registerTool: ()=>{},\n    /**\n     *\n     */ registerTools: ()=>{},\n    /**\n     *\n     */ addToolAssociation: ()=>{}\n});\n/**\n * The TamboRegistryProvider is a React provider that provides a component\n * registry to the descendants of the provider.\n * @param props - The props for the TamboRegistryProvider\n * @param props.children - The children to wrap\n * @param props.components - The components to register\n * @param props.tools - The tools to register\n * @returns The TamboRegistryProvider component\n */ const TamboRegistryProvider = ({ children, components: userComponents, tools: userTools })=>{\n    const [componentList, setComponentList] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const [toolRegistry, setToolRegistry] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const [componentToolAssociations, setComponentToolAssociations] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const registerTool = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"TamboRegistryProvider.useCallback[registerTool]\": (tool, warnOnOverwrite = true)=>{\n            // Validate tool schemas\n            if (tool.toolSchema && isZodSchema(tool.toolSchema)) {\n                (0,_util_validate_zod_schema__WEBPACK_IMPORTED_MODULE_2__.assertNoZodRecord)(tool.toolSchema, `toolSchema of tool \"${tool.name}\"`);\n            }\n            setToolRegistry({\n                \"TamboRegistryProvider.useCallback[registerTool]\": (prev)=>{\n                    if (prev[tool.name] && warnOnOverwrite) {\n                        console.warn(`Overwriting tool ${tool.name}`);\n                    }\n                    return {\n                        ...prev,\n                        [tool.name]: tool\n                    };\n                }\n            }[\"TamboRegistryProvider.useCallback[registerTool]\"]);\n        }\n    }[\"TamboRegistryProvider.useCallback[registerTool]\"], []);\n    const registerTools = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"TamboRegistryProvider.useCallback[registerTools]\": (tools, warnOnOverwrite = true)=>{\n            tools.forEach({\n                \"TamboRegistryProvider.useCallback[registerTools]\": (tool)=>registerTool(tool, warnOnOverwrite)\n            }[\"TamboRegistryProvider.useCallback[registerTools]\"]);\n        }\n    }[\"TamboRegistryProvider.useCallback[registerTools]\"], [\n        registerTool\n    ]);\n    const addToolAssociation = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"TamboRegistryProvider.useCallback[addToolAssociation]\": (componentName, tool)=>{\n            if (!componentList[componentName]) {\n                throw new Error(`Component ${componentName} not found in registry`);\n            }\n            setComponentToolAssociations({\n                \"TamboRegistryProvider.useCallback[addToolAssociation]\": (prev)=>({\n                        ...prev,\n                        [componentName]: [\n                            ...prev[componentName] || [],\n                            tool.name\n                        ]\n                    })\n            }[\"TamboRegistryProvider.useCallback[addToolAssociation]\"]);\n        }\n    }[\"TamboRegistryProvider.useCallback[addToolAssociation]\"], [\n        componentList\n    ]);\n    const registerComponent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"TamboRegistryProvider.useCallback[registerComponent]\": (options, warnOnOverwrite = true)=>{\n            const { name, description, component, propsSchema, propsDefinition, loadingComponent, associatedTools } = options;\n            // Validate that at least one props definition is provided\n            if (!propsSchema && !propsDefinition) {\n                throw new Error(`Component ${name} must have either propsSchema (recommended) or propsDefinition defined`);\n            }\n            // Validate that only one props definition is provided\n            if (propsSchema && propsDefinition) {\n                throw new Error(`Component ${name} cannot have both propsSchema and propsDefinition defined. Use only one. We recommend using propsSchema.`);\n            }\n            // Validate that the propsSchema does not include z.record()\n            if (propsSchema && isZodSchema(propsSchema)) {\n                (0,_util_validate_zod_schema__WEBPACK_IMPORTED_MODULE_2__.assertNoZodRecord)(propsSchema, `propsSchema of component \"${name}\"`);\n            }\n            // Convert propsSchema to JSON Schema if it exists\n            const props = getSerializedProps(propsDefinition, propsSchema, name);\n            setComponentList({\n                \"TamboRegistryProvider.useCallback[registerComponent]\": (prev)=>{\n                    if (prev[name] && warnOnOverwrite) {\n                        console.warn(`overwriting component ${name}`);\n                    }\n                    return {\n                        ...prev,\n                        [name]: {\n                            component,\n                            loadingComponent,\n                            name,\n                            description,\n                            props,\n                            contextTools: []\n                        }\n                    };\n                }\n            }[\"TamboRegistryProvider.useCallback[registerComponent]\"]);\n            if (associatedTools) {\n                registerTools(associatedTools);\n                setComponentToolAssociations({\n                    \"TamboRegistryProvider.useCallback[registerComponent]\": (prev)=>({\n                            ...prev,\n                            [name]: associatedTools.map({\n                                \"TamboRegistryProvider.useCallback[registerComponent]\": (tool)=>tool.name\n                            }[\"TamboRegistryProvider.useCallback[registerComponent]\"])\n                        })\n                }[\"TamboRegistryProvider.useCallback[registerComponent]\"]);\n            }\n        }\n    }[\"TamboRegistryProvider.useCallback[registerComponent]\"], [\n        registerTools\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"TamboRegistryProvider.useEffect\": ()=>{\n            if (userComponents) {\n                userComponents.forEach({\n                    \"TamboRegistryProvider.useEffect\": (component)=>{\n                        registerComponent(component, false);\n                    }\n                }[\"TamboRegistryProvider.useEffect\"]);\n            }\n        }\n    }[\"TamboRegistryProvider.useEffect\"], [\n        registerComponent,\n        userComponents\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"TamboRegistryProvider.useEffect\": ()=>{\n            if (userTools) {\n                registerTools(userTools, false);\n            }\n        }\n    }[\"TamboRegistryProvider.useEffect\"], [\n        registerTools,\n        userTools\n    ]);\n    const value = {\n        componentList,\n        toolRegistry,\n        componentToolAssociations,\n        registerComponent,\n        registerTool,\n        registerTools,\n        addToolAssociation\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TamboRegistryContext.Provider, {\n        value: value\n    }, children);\n};\n/**\n * The useTamboRegistry hook provides access to the component registry\n * to the descendants of the TamboRegistryProvider.\n * @returns The component registry\n */ const useTamboRegistry = ()=>{\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TamboRegistryContext);\n};\nfunction getSerializedProps(propsDefinition, propsSchema, name) {\n    if (propsDefinition) {\n        console.warn(`propsDefinition is deprecated. Use propsSchema instead.`);\n        return propsDefinition;\n    }\n    if (isZodSchema(propsSchema)) {\n        try {\n            return (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(propsSchema);\n        } catch (error) {\n            console.error(`Error converting ${name} props schema to JSON Schema:`, error);\n        }\n    }\n    // try to roughly detect JSONSchema, should always be an object with a properties key\n    if (isJSONSchema(propsSchema)) {\n        return propsSchema;\n    }\n    throw new Error(`Invalid props schema for ${name}`);\n}\n/**\n * Checks if the propsSchema is a JSON Schema. This is a rough check, and the\n * server will provide the definitive check.\n * @param propsSchema - The props schema to check\n * @returns True if the props schema is a JSON Schema, false otherwise\n */ function isJSONSchema(propsSchema) {\n    return propsSchema && typeof propsSchema === \"object\" && propsSchema.type === \"object\" && propsSchema.properties;\n}\n/**\n * Since we require a certain zod version, we need to check if the object is a ZodSchema\n * @param obj - The object to check\n * @returns True if the object is a ZodSchema, false otherwise\n */ function isZodSchema(obj) {\n    if (obj instanceof zod__WEBPACK_IMPORTED_MODULE_3__.ZodSchema) {\n        return true;\n    }\n    // try to detect if the object is a ZodSchema\n    return typeof obj === \"object\" && obj !== null && typeof obj.safeParse === \"function\" && typeof obj._def === \"object\";\n} //# sourceMappingURL=tambo-registry-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-registry-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-thread-provider.js":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-thread-provider.js ***!
  \*************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PLACEHOLDER_THREAD: () => (/* binding */ PLACEHOLDER_THREAD),\n/* harmony export */   TamboThreadContext: () => (/* binding */ TamboThreadContext),\n/* harmony export */   TamboThreadProvider: () => (/* binding */ TamboThreadProvider),\n/* harmony export */   useTamboThread: () => (/* binding */ useTamboThread)\n/* harmony export */ });\n/* harmony import */ var _tambo_ai_typescript_sdk__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tambo-ai/typescript-sdk */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+typescript-sdk@0.58.0/node_modules/@tambo-ai/typescript-sdk/lib/advance-stream.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _model_generate_component_response__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../model/generate-component-response */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/model/generate-component-response.js\");\n/* harmony import */ var _util_generate_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/generate-component */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/generate-component.js\");\n/* harmony import */ var _util_registry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/registry */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/registry.js\");\n/* harmony import */ var _util_tool_caller__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/tool-caller */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/tool-caller.js\");\n/* harmony import */ var _tambo_client_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tambo-client-provider */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-client-provider.js\");\n/* harmony import */ var _tambo_registry_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tambo-registry-provider */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-registry-provider.js\");\n/* __next_internal_client_entry_do_not_use__ PLACEHOLDER_THREAD,TamboThreadContext,TamboThreadProvider,useTamboThread auto */ \n\n\n\n\n\n\n\n/**\n * This is a stub entry for when the thread is not yet created, the first time\n * the user sends a message\n *\n * Note that the consumer needs to be careful never to send `PLACEHOLDER_THREAD.id` to the server,\n * as this doesn't really exist on the server side.\n */ const PLACEHOLDER_THREAD = {\n    id: \"placeholder\",\n    messages: [],\n    createdAt: \"\",\n    projectId: \"\",\n    updatedAt: \"\",\n    metadata: {}\n};\nconst TamboThreadContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    thread: PLACEHOLDER_THREAD,\n    /**\n     *\n     */ switchCurrentThread: ()=>{\n        throw new Error(\"switchCurrentThread not implemented\");\n    },\n    /**\n     *\n     */ startNewThread: ()=>{\n        throw new Error(\"startNewThread not implemented\");\n    },\n    /**\n     *\n     */ updateThreadName: ()=>{\n        throw new Error(\"updateThreadName not implemented\");\n    },\n    /**\n     *\n     */ generateThreadName: ()=>{\n        throw new Error(\"generateThreadName not implemented\");\n    },\n    /**\n     *\n     */ addThreadMessage: ()=>{\n        throw new Error(\"updateThreadMessageHistory not implemented\");\n    },\n    inputValue: \"\",\n    streaming: true,\n    /**\n     *\n     */ setInputValue: ()=>{\n        throw new Error(\"setInputValue not implemented\");\n    },\n    /**\n     *\n     */ updateThreadMessage: ()=>{\n        throw new Error(\"updateThreadMessage not implemented\");\n    },\n    /**\n     *\n     */ sendThreadMessage: ()=>{\n        throw new Error(\"advance not implemented\");\n    },\n    generationStage: _model_generate_component_response__WEBPACK_IMPORTED_MODULE_1__.GenerationStage.IDLE,\n    generationStatusMessage: \"\",\n    isIdle: true,\n    cancel: ()=>{\n        throw new Error(\"cancel not implemented\");\n    }\n});\n/**\n * The TamboThreadProvider is a React provider that provides a thread context\n * to the descendants of the provider.\n * @param props - The props for the TamboThreadProvider\n * @param props.children - The children to wrap\n * @param props.streaming - Whether to stream the response by default. Defaults to true.\n * @returns The TamboThreadProvider component\n */ const TamboThreadProvider = ({ children, streaming = true })=>{\n    const [threadMap, setThreadMap] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        [PLACEHOLDER_THREAD.id]: PLACEHOLDER_THREAD\n    });\n    const client = (0,_tambo_client_provider__WEBPACK_IMPORTED_MODULE_2__.useTamboClient)();\n    const { componentList, toolRegistry, componentToolAssociations } = (0,_tambo_registry_provider__WEBPACK_IMPORTED_MODULE_3__.useTamboRegistry)();\n    const [inputValue, setInputValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\");\n    const [ignoreResponse, setIgnoreResponse] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const ignoreResponseRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(ignoreResponse);\n    const [currentThreadId, setCurrentThreadId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(PLACEHOLDER_THREAD.id);\n    const currentThread = threadMap[currentThreadId];\n    // Use existing messages from the current thread to avoid re-generating any components\n    const currentMessageCache = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"TamboThreadProvider.useMemo[currentMessageCache]\": ()=>{\n            const messageCache = new Map();\n            if (currentThread) {\n                for (const message of currentThread.messages){\n                    messageCache.set(message.id, message);\n                }\n            }\n            return messageCache;\n        }\n    }[\"TamboThreadProvider.useMemo[currentMessageCache]\"], [\n        currentThread\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"TamboThreadProvider.useEffect\": ()=>{\n            ignoreResponseRef.current = ignoreResponse;\n        }\n    }[\"TamboThreadProvider.useEffect\"], [\n        ignoreResponse\n    ]);\n    const isIdle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)({\n        \"TamboThreadProvider.useMemo[isIdle]\": ()=>(0,_model_generate_component_response__WEBPACK_IMPORTED_MODULE_1__.isIdleStage)(currentThread?.generationStage ?? _model_generate_component_response__WEBPACK_IMPORTED_MODULE_1__.GenerationStage.IDLE)\n    }[\"TamboThreadProvider.useMemo[isIdle]\"], [\n        currentThread?.generationStage\n    ]);\n    const fetchThread = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"TamboThreadProvider.useCallback[fetchThread]\": async (threadId)=>{\n            const thread = await client.beta.threads.retrieve(threadId);\n            const threadWithRenderedComponents = {\n                ...thread,\n                messages: thread.messages.map({\n                    \"TamboThreadProvider.useCallback[fetchThread]\": (message)=>{\n                        if (currentMessageCache.has(message.id)) {\n                            const renderedMessage = currentMessageCache.get(message.id);\n                            return {\n                                ...renderedMessage,\n                                ...message\n                            };\n                        }\n                        if (message.component?.componentName) {\n                            const messageWithComponent = (0,_util_generate_component__WEBPACK_IMPORTED_MODULE_4__.renderComponentIntoMessage)(message, componentList);\n                            return messageWithComponent;\n                        }\n                        return message;\n                    }\n                }[\"TamboThreadProvider.useCallback[fetchThread]\"])\n            };\n            setThreadMap({\n                \"TamboThreadProvider.useCallback[fetchThread]\": (prevMap)=>{\n                    const updatedThreadMap = {\n                        ...prevMap,\n                        [threadId]: threadWithRenderedComponents\n                    };\n                    return updatedThreadMap;\n                }\n            }[\"TamboThreadProvider.useCallback[fetchThread]\"]);\n        }\n    }[\"TamboThreadProvider.useCallback[fetchThread]\"], [\n        client.beta.threads,\n        componentList,\n        currentMessageCache\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"TamboThreadProvider.useEffect\": ()=>{\n            if (currentThreadId && currentThreadId !== PLACEHOLDER_THREAD.id && !threadMap[currentThreadId]) {\n                fetchThread(currentThreadId);\n            }\n        }\n    }[\"TamboThreadProvider.useEffect\"], [\n        currentThreadId,\n        fetchThread,\n        threadMap\n    ]);\n    const addThreadMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"TamboThreadProvider.useCallback[addThreadMessage]\": async (message, sendToServer = true, createdAt = new Date().toISOString())=>{\n            if (!currentThread) {\n                console.warn(\"Cannot add messages if we do not have a current thread\");\n                return [];\n            }\n            const chatMessage = {\n                ...message,\n                additionalContext: message.role === \"user\" ? (0,_util_registry__WEBPACK_IMPORTED_MODULE_5__.getClientContext)() : undefined,\n                createdAt\n            };\n            const threadId = message.threadId;\n            const messageId = chatMessage.id;\n            // optimistically update the thread in the local state\n            setThreadMap({\n                \"TamboThreadProvider.useCallback[addThreadMessage]\": (prevMap)=>{\n                    if (!threadId) {\n                        return prevMap;\n                    }\n                    const prevMessages = prevMap[threadId]?.messages || [];\n                    const haveMessage = prevMessages.find({\n                        \"TamboThreadProvider.useCallback[addThreadMessage].haveMessage\": (msg)=>msg.id === messageId\n                    }[\"TamboThreadProvider.useCallback[addThreadMessage].haveMessage\"]);\n                    // Update in place if the message already exists\n                    const updatedMessages = haveMessage ? prevMessages.map({\n                        \"TamboThreadProvider.useCallback[addThreadMessage]\": (msg)=>{\n                            if (msg.id === messageId) {\n                                return chatMessage;\n                            }\n                            return msg;\n                        }\n                    }[\"TamboThreadProvider.useCallback[addThreadMessage]\"]) : [\n                        ...prevMessages,\n                        chatMessage\n                    ];\n                    const updatedThreadMap = {\n                        ...prevMap,\n                        [threadId]: {\n                            ...prevMap[threadId],\n                            messages: updatedMessages\n                        }\n                    };\n                    return updatedThreadMap;\n                }\n            }[\"TamboThreadProvider.useCallback[addThreadMessage]\"]);\n            if (sendToServer) {\n                // TODO: if this fails, we need to revert the local state update\n                await client.beta.threads.messages.create(message.threadId, {\n                    content: message.content,\n                    role: message.role\n                });\n            }\n            return threadMap[threadId]?.messages || [];\n        }\n    }[\"TamboThreadProvider.useCallback[addThreadMessage]\"], [\n        client.beta.threads.messages,\n        currentThread,\n        threadMap\n    ]);\n    const updateThreadMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"TamboThreadProvider.useCallback[updateThreadMessage]\": async (id, message, sendToServer = true, createdAt = new Date().toISOString())=>{\n            const chatMessage = {\n                ...message,\n                createdAt\n            };\n            setThreadMap({\n                \"TamboThreadProvider.useCallback[updateThreadMessage]\": (prevMap)=>{\n                    if (!message.threadId) {\n                        return prevMap;\n                    }\n                    const prevMessages = prevMap[message.threadId]?.messages || [];\n                    const updatedMessages = prevMessages.map({\n                        \"TamboThreadProvider.useCallback[updateThreadMessage].updatedMessages\": (msg)=>{\n                            if (msg.id === id) {\n                                return chatMessage;\n                            }\n                            return msg;\n                        }\n                    }[\"TamboThreadProvider.useCallback[updateThreadMessage].updatedMessages\"]);\n                    return {\n                        ...prevMap,\n                        [message.threadId]: {\n                            ...prevMap[message.threadId],\n                            messages: updatedMessages\n                        }\n                    };\n                }\n            }[\"TamboThreadProvider.useCallback[updateThreadMessage]\"]);\n            if (sendToServer) {\n                // TODO: if this fails, we need to revert the local state update\n                await client.beta.threads.messages.create(message.threadId, {\n                    content: message.content,\n                    role: message.role\n                });\n            }\n        }\n    }[\"TamboThreadProvider.useCallback[updateThreadMessage]\"], [\n        client.beta.threads.messages\n    ]);\n    const startNewThread = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"TamboThreadProvider.useCallback[startNewThread]\": ()=>{\n            setCurrentThreadId(PLACEHOLDER_THREAD.id);\n            setThreadMap({\n                \"TamboThreadProvider.useCallback[startNewThread]\": (prevMap)=>{\n                    return {\n                        ...prevMap,\n                        [PLACEHOLDER_THREAD.id]: PLACEHOLDER_THREAD\n                    };\n                }\n            }[\"TamboThreadProvider.useCallback[startNewThread]\"]);\n        }\n    }[\"TamboThreadProvider.useCallback[startNewThread]\"], []);\n    const updateThreadName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"TamboThreadProvider.useCallback[updateThreadName]\": async (name, threadId)=>{\n            threadId ??= currentThreadId;\n            setThreadMap({\n                \"TamboThreadProvider.useCallback[updateThreadName]\": (prevMap)=>{\n                    if (!prevMap[threadId]) {\n                        return prevMap;\n                    }\n                    return {\n                        ...prevMap,\n                        [threadId]: {\n                            ...prevMap[threadId],\n                            name\n                        }\n                    };\n                }\n            }[\"TamboThreadProvider.useCallback[updateThreadName]\"]);\n            if (threadId !== PLACEHOLDER_THREAD.id) {\n                const currentProject = await client.beta.projects.getCurrent();\n                await client.beta.threads.update(threadId, {\n                    name,\n                    projectId: currentProject.id\n                });\n            }\n        }\n    }[\"TamboThreadProvider.useCallback[updateThreadName]\"], [\n        currentThreadId,\n        client.beta.projects,\n        client.beta.threads\n    ]);\n    const generateThreadName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"TamboThreadProvider.useCallback[generateThreadName]\": async (threadId)=>{\n            threadId ??= currentThreadId;\n            if (threadId === PLACEHOLDER_THREAD.id) {\n                console.warn(\"Cannot generate name for empty thread\");\n                return threadMap[threadId];\n            }\n            const threadWithGeneratedName = await client.beta.threads.generateName(threadId);\n            setThreadMap({\n                \"TamboThreadProvider.useCallback[generateThreadName]\": (prevMap)=>{\n                    if (!prevMap[threadId]) {\n                        return prevMap;\n                    }\n                    return {\n                        ...prevMap,\n                        [threadId]: {\n                            ...prevMap[threadId],\n                            name: threadWithGeneratedName.name\n                        }\n                    };\n                }\n            }[\"TamboThreadProvider.useCallback[generateThreadName]\"]);\n            return threadWithGeneratedName;\n        }\n    }[\"TamboThreadProvider.useCallback[generateThreadName]\"], [\n        client.beta.threads,\n        currentThreadId,\n        threadMap\n    ]);\n    const switchCurrentThread = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"TamboThreadProvider.useCallback[switchCurrentThread]\": async (threadId, fetch = true)=>{\n            if (threadId === PLACEHOLDER_THREAD.id) {\n                console.warn(\"Switching to placeholder thread, may be a bug.\");\n                return;\n            }\n            setCurrentThreadId(threadId);\n            setThreadMap({\n                \"TamboThreadProvider.useCallback[switchCurrentThread]\": (prevMap)=>{\n                    if (prevMap[threadId]) {\n                        return prevMap;\n                    }\n                    // If this is a new thread, add placeholder thread messages to the thread\n                    const updatedThreadMap = {\n                        ...prevMap,\n                        [threadId]: {\n                            ...prevMap[PLACEHOLDER_THREAD.id],\n                            id: threadId\n                        }\n                    };\n                    return updatedThreadMap;\n                }\n            }[\"TamboThreadProvider.useCallback[switchCurrentThread]\"]);\n            if (fetch) {\n                await fetchThread(threadId);\n            }\n        }\n    }[\"TamboThreadProvider.useCallback[switchCurrentThread]\"], [\n        fetchThread\n    ]);\n    const updateThreadStatus = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"TamboThreadProvider.useCallback[updateThreadStatus]\": (threadId, stage, statusMessage)=>{\n            setThreadMap({\n                \"TamboThreadProvider.useCallback[updateThreadStatus]\": (prevMap)=>{\n                    const updatedThreadMap = {\n                        ...prevMap,\n                        [threadId]: {\n                            ...prevMap[threadId],\n                            generationStage: stage,\n                            statusMessage: statusMessage\n                        }\n                    };\n                    return updatedThreadMap;\n                }\n            }[\"TamboThreadProvider.useCallback[updateThreadStatus]\"]);\n        }\n    }[\"TamboThreadProvider.useCallback[updateThreadStatus]\"], []);\n    const cancel = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"TamboThreadProvider.useCallback[cancel]\": async (threadId)=>{\n            threadId ??= currentThreadId;\n            if (isIdle) {\n                return;\n            }\n            setIgnoreResponse(true);\n            setThreadMap({\n                \"TamboThreadProvider.useCallback[cancel]\": (prevMap)=>{\n                    if (!prevMap[threadId]) {\n                        return prevMap;\n                    }\n                    return {\n                        ...prevMap,\n                        [threadId]: {\n                            ...prevMap[threadId],\n                            generationStage: _model_generate_component_response__WEBPACK_IMPORTED_MODULE_1__.GenerationStage.CANCELLED,\n                            messages: prevMap[threadId].messages.map({\n                                \"TamboThreadProvider.useCallback[cancel]\": (message)=>{\n                                    if (message.id === prevMap[threadId].messages[prevMap[threadId].messages.length - 1].id) {\n                                        return {\n                                            ...message,\n                                            isCancelled: true\n                                        };\n                                    }\n                                    return message;\n                                }\n                            }[\"TamboThreadProvider.useCallback[cancel]\"])\n                        }\n                    };\n                }\n            }[\"TamboThreadProvider.useCallback[cancel]\"]);\n            await client.beta.threads.cancel(threadId);\n        }\n    }[\"TamboThreadProvider.useCallback[cancel]\"], [\n        client.beta.threads,\n        currentThreadId,\n        isIdle\n    ]);\n    const handleAdvanceStream = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"TamboThreadProvider.useCallback[handleAdvanceStream]\": async (stream, params, threadId)=>{\n            if (ignoreResponseRef.current) {\n                setIgnoreResponse(false);\n                return {\n                    threadId: threadId,\n                    content: [\n                        {\n                            type: \"text\",\n                            text: \"\"\n                        }\n                    ],\n                    role: \"assistant\",\n                    createdAt: new Date().toISOString(),\n                    id: crypto.randomUUID(),\n                    componentState: {}\n                };\n            }\n            let finalMessage;\n            let hasSetThreadId = false;\n            updateThreadStatus(threadId, _model_generate_component_response__WEBPACK_IMPORTED_MODULE_1__.GenerationStage.STREAMING_RESPONSE);\n            for await (const chunk of stream){\n                if (chunk.responseMessageDto.toolCallRequest) {\n                    updateThreadStatus(chunk.responseMessageDto.threadId, _model_generate_component_response__WEBPACK_IMPORTED_MODULE_1__.GenerationStage.FETCHING_CONTEXT);\n                    const toolCallResponse = await (0,_util_tool_caller__WEBPACK_IMPORTED_MODULE_6__.handleToolCall)(chunk.responseMessageDto, toolRegistry);\n                    if (ignoreResponseRef.current) {\n                        setIgnoreResponse(false);\n                        {\n                            return {\n                                threadId: threadId,\n                                content: [\n                                    {\n                                        type: \"text\",\n                                        text: \"\"\n                                    }\n                                ],\n                                role: \"assistant\",\n                                createdAt: new Date().toISOString(),\n                                id: crypto.randomUUID(),\n                                componentState: {}\n                            };\n                        }\n                    }\n                    const toolCallResponseString = typeof toolCallResponse.result === \"string\" ? toolCallResponse.result : JSON.stringify(toolCallResponse.result);\n                    const toolCallResponseParams = {\n                        ...params,\n                        messageToAppend: {\n                            content: [\n                                {\n                                    type: \"text\",\n                                    text: toolCallResponseString\n                                }\n                            ],\n                            role: \"tool\",\n                            actionType: \"tool_response\",\n                            component: chunk.responseMessageDto.component,\n                            tool_call_id: chunk.responseMessageDto.tool_call_id,\n                            error: toolCallResponse.error\n                        }\n                    };\n                    updateThreadMessage(chunk.responseMessageDto.id, {\n                        ...chunk.responseMessageDto,\n                        error: toolCallResponse.error\n                    }, false);\n                    updateThreadStatus(chunk.responseMessageDto.threadId, _model_generate_component_response__WEBPACK_IMPORTED_MODULE_1__.GenerationStage.STREAMING_RESPONSE);\n                    const toolCallResponseStream = await (0,_tambo_ai_typescript_sdk__WEBPACK_IMPORTED_MODULE_7__.advanceStream)(client, toolCallResponseParams, chunk.responseMessageDto.threadId);\n                    return await handleAdvanceStream(toolCallResponseStream, toolCallResponseParams, chunk.responseMessageDto.threadId);\n                } else {\n                    if (ignoreResponseRef.current) {\n                        setIgnoreResponse(false);\n                        return finalMessage ?? {\n                            threadId: threadId,\n                            content: [\n                                {\n                                    type: \"text\",\n                                    text: \"\"\n                                }\n                            ],\n                            role: \"assistant\",\n                            createdAt: new Date().toISOString(),\n                            id: crypto.randomUUID(),\n                            componentState: {}\n                        };\n                    }\n                    if (!hasSetThreadId && chunk.responseMessageDto.threadId && chunk.responseMessageDto.threadId !== currentThread?.id) {\n                        hasSetThreadId = true;\n                        await switchCurrentThread(chunk.responseMessageDto.threadId, false);\n                    }\n                    if (!finalMessage) {\n                        finalMessage = chunk.responseMessageDto.component?.componentName ? (0,_util_generate_component__WEBPACK_IMPORTED_MODULE_4__.renderComponentIntoMessage)(chunk.responseMessageDto, componentList) : chunk.responseMessageDto;\n                        await addThreadMessage(finalMessage, false);\n                    } else {\n                        // if we start getting a new message mid-stream, put the previous one on screen\n                        const isNewMessage = chunk.responseMessageDto.id !== finalMessage.id;\n                        finalMessage = chunk.responseMessageDto.component?.componentName ? (0,_util_generate_component__WEBPACK_IMPORTED_MODULE_4__.renderComponentIntoMessage)(chunk.responseMessageDto, componentList) : chunk.responseMessageDto;\n                        if (isNewMessage) {\n                            await addThreadMessage(finalMessage, false);\n                        } else {\n                            await updateThreadMessage(finalMessage.id, finalMessage, false);\n                        }\n                    }\n                }\n            }\n            updateThreadStatus(finalMessage?.threadId ?? threadId, _model_generate_component_response__WEBPACK_IMPORTED_MODULE_1__.GenerationStage.COMPLETE);\n            return finalMessage ?? {\n                threadId: \"\",\n                content: [\n                    {\n                        type: \"text\",\n                        text: `Error processing stream`\n                    }\n                ],\n                role: \"assistant\",\n                createdAt: new Date().toISOString(),\n                id: crypto.randomUUID(),\n                componentState: {}\n            };\n        }\n    }[\"TamboThreadProvider.useCallback[handleAdvanceStream]\"], [\n        addThreadMessage,\n        client,\n        componentList,\n        currentThread?.id,\n        switchCurrentThread,\n        toolRegistry,\n        updateThreadMessage,\n        updateThreadStatus\n    ]);\n    const currentThreadContextKey = currentThread?.contextKey;\n    const sendThreadMessage = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"TamboThreadProvider.useCallback[sendThreadMessage]\": async (message, options = {})=>{\n            setIgnoreResponse(false);\n            const { threadId = currentThreadId ?? PLACEHOLDER_THREAD.id, streamResponse = streaming, forceToolChoice, contextKey = currentThreadContextKey } = options;\n            updateThreadStatus(threadId, _model_generate_component_response__WEBPACK_IMPORTED_MODULE_1__.GenerationStage.FETCHING_CONTEXT);\n            addThreadMessage({\n                content: [\n                    {\n                        type: \"text\",\n                        text: message\n                    }\n                ],\n                renderedComponent: null,\n                role: \"user\",\n                threadId: threadId,\n                id: crypto.randomUUID(),\n                createdAt: new Date().toISOString(),\n                componentState: {}\n            }, false);\n            const availableComponents = (0,_util_registry__WEBPACK_IMPORTED_MODULE_5__.getAvailableComponents)(componentList, toolRegistry, componentToolAssociations);\n            const unassociatedTools = (0,_util_registry__WEBPACK_IMPORTED_MODULE_5__.getUnassociatedTools)(toolRegistry, componentToolAssociations);\n            const params = {\n                messageToAppend: {\n                    content: [\n                        {\n                            type: \"text\",\n                            text: message\n                        }\n                    ],\n                    role: \"user\"\n                },\n                contextKey,\n                availableComponents: availableComponents,\n                clientTools: unassociatedTools.map({\n                    \"TamboThreadProvider.useCallback[sendThreadMessage]\": (tool)=>(0,_util_registry__WEBPACK_IMPORTED_MODULE_5__.mapTamboToolToContextTool)(tool)\n                }[\"TamboThreadProvider.useCallback[sendThreadMessage]\"]),\n                forceToolChoice: forceToolChoice\n            };\n            if (streamResponse) {\n                const advanceStreamResponse = await (0,_tambo_ai_typescript_sdk__WEBPACK_IMPORTED_MODULE_7__.advanceStream)(client, params, threadId === PLACEHOLDER_THREAD.id ? undefined : threadId);\n                return await handleAdvanceStream(advanceStreamResponse, params, threadId);\n            }\n            let advanceResponse = await (threadId === PLACEHOLDER_THREAD.id ? client.beta.threads.advance(params) : client.beta.threads.advanceById(threadId, params));\n            //handle tool calls\n            while(advanceResponse.responseMessageDto.toolCallRequest){\n                updateThreadStatus(threadId, _model_generate_component_response__WEBPACK_IMPORTED_MODULE_1__.GenerationStage.FETCHING_CONTEXT);\n                const toolCallResponse = await (0,_util_tool_caller__WEBPACK_IMPORTED_MODULE_6__.handleToolCall)(advanceResponse.responseMessageDto, toolRegistry);\n                const toolResponseString = typeof toolCallResponse.result === \"string\" ? toolCallResponse.result : JSON.stringify(toolCallResponse.result);\n                const toolCallResponseParams = {\n                    ...params,\n                    messageToAppend: {\n                        ...params.messageToAppend,\n                        content: [\n                            {\n                                type: \"text\",\n                                text: toolResponseString\n                            }\n                        ],\n                        role: \"tool\",\n                        actionType: \"tool_response\",\n                        component: advanceResponse.responseMessageDto.component,\n                        tool_call_id: advanceResponse.responseMessageDto.tool_call_id,\n                        error: toolCallResponse.error\n                    }\n                };\n                if (toolCallResponse.error) {\n                    //update toolcall message with error\n                    const toolCallMessage = {\n                        ...advanceResponse.responseMessageDto,\n                        error: toolCallResponse.error\n                    };\n                    updateThreadMessage(toolCallMessage.id, toolCallMessage, false);\n                }\n                updateThreadStatus(threadId, _model_generate_component_response__WEBPACK_IMPORTED_MODULE_1__.GenerationStage.HYDRATING_COMPONENT);\n                advanceResponse = await client.beta.threads.advanceById(advanceResponse.responseMessageDto.threadId, toolCallResponseParams);\n            }\n            const finalMessage = advanceResponse.responseMessageDto.component?.componentName ? (0,_util_generate_component__WEBPACK_IMPORTED_MODULE_4__.renderComponentIntoMessage)(advanceResponse.responseMessageDto, componentList) : advanceResponse.responseMessageDto;\n            await switchCurrentThread(advanceResponse.responseMessageDto.threadId);\n            updateThreadStatus(advanceResponse.responseMessageDto.threadId, _model_generate_component_response__WEBPACK_IMPORTED_MODULE_1__.GenerationStage.COMPLETE);\n            return finalMessage;\n        }\n    }[\"TamboThreadProvider.useCallback[sendThreadMessage]\"], [\n        componentList,\n        toolRegistry,\n        componentToolAssociations,\n        currentThreadId,\n        currentThreadContextKey,\n        switchCurrentThread,\n        addThreadMessage,\n        client,\n        updateThreadMessage,\n        updateThreadStatus,\n        handleAdvanceStream,\n        streaming\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(TamboThreadContext.Provider, {\n        value: {\n            thread: currentThread,\n            switchCurrentThread,\n            startNewThread,\n            updateThreadName,\n            generateThreadName,\n            addThreadMessage,\n            updateThreadMessage,\n            inputValue,\n            setInputValue,\n            sendThreadMessage,\n            streaming,\n            generationStage: currentThread?.generationStage ?? _model_generate_component_response__WEBPACK_IMPORTED_MODULE_1__.GenerationStage.IDLE,\n            generationStatusMessage: currentThread?.statusMessage ?? \"\",\n            isIdle,\n            cancel\n        }\n    }, children);\n};\n/**\n * The useTamboThread hook provides access to the current thread context\n * to the descendants of the TamboThreadProvider.\n * @returns All state and actions for the current thread\n */ const useTamboThread = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(TamboThreadContext);\n    if (context === undefined) {\n        throw new Error(\"useTamboThread must be used within a TamboThreadProvider\");\n    }\n    return context;\n}; //# sourceMappingURL=tambo-thread-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/providers/tambo-thread-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/generate-component.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/generate-component.js ***!
  \*****************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   renderComponentIntoMessage: () => (/* binding */ renderComponentIntoMessage)\n/* harmony export */ });\n/* harmony import */ var partial_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! partial-json */ \"(ssr)/./node_modules/.pnpm/partial-json@0.1.7/node_modules/partial-json/dist/index.js\");\n/* harmony import */ var partial_json__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(partial_json__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/.pnpm/zod@3.25.74/node_modules/zod/v3/types.js\");\n/* harmony import */ var _hooks_use_current_message__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../hooks/use-current-message */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/hooks/use-current-message.js\");\n/* harmony import */ var _util_registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/registry */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/registry.js\");\n\n\n\n\n\n/**\n * Generate a message that has a component rendered into it, if the message\n * came with one.\n * @param message - The message that may contain a component\n * @param componentList - the list of available components\n * @returns The updated message with the component rendered into it\n */\nfunction renderComponentIntoMessage(message, componentList) {\n    if (!message.component?.componentName) {\n        throw new Error(\"Component not found\");\n    }\n    const parsedProps = (0,partial_json__WEBPACK_IMPORTED_MODULE_0__.parse)(JSON.stringify(message.component.props));\n    const registeredComponent = (0,_util_registry__WEBPACK_IMPORTED_MODULE_2__.getComponentFromRegistry)(message.component.componentName, componentList);\n    const validatedProps = registeredComponent.props instanceof zod__WEBPACK_IMPORTED_MODULE_3__.ZodType\n        ? registeredComponent.props.parse(parsedProps)\n        : parsedProps;\n    const renderedComponent = react__WEBPACK_IMPORTED_MODULE_1___default().createElement(registeredComponent.component, validatedProps);\n    const wrappedComponent = (0,_hooks_use_current_message__WEBPACK_IMPORTED_MODULE_4__.wrapWithTamboMessageProvider)(renderedComponent, message.threadId, message.id);\n    return {\n        ...message,\n        component: {\n            ...message.component,\n            props: validatedProps,\n        },\n        renderedComponent: wrappedComponent,\n    };\n}\n//# sourceMappingURL=generate-component.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhbWJvLWFpK3JlYWN0QDAuMzQuMF9AdHlwXzk0ZmU0NjU3YzA5OGVmNmEwNzFlZGQ3OGRiMjI3NzRhL25vZGVfbW9kdWxlcy9AdGFtYm8tYWkvcmVhY3QvZXNtL3V0aWwvZ2VuZXJhdGUtY29tcG9uZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXFDO0FBQ1g7QUFDRjtBQUNvRDtBQUNoQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLG1EQUFLO0FBQzdCLGdDQUFnQyx3RUFBd0I7QUFDeEQsZ0VBQWdFLHdDQUFTO0FBQ3pFO0FBQ0E7QUFDQSw4QkFBOEIsMERBQW1CO0FBQ2pELDZCQUE2Qix3RkFBNEI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRTpcXHdvcmtTcGFjZVxcQ1VSU09SXFxwZXJzb25hLW1haWwtYWktYWRhcHRcXG5leHQtcGVyc29uYW1haWxcXG5vZGVfbW9kdWxlc1xcLnBucG1cXEB0YW1iby1haStyZWFjdEAwLjM0LjBfQHR5cF85NGZlNDY1N2MwOThlZjZhMDcxZWRkNzhkYjIyNzc0YVxcbm9kZV9tb2R1bGVzXFxAdGFtYm8tYWlcXHJlYWN0XFxlc21cXHV0aWxcXGdlbmVyYXRlLWNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZSB9IGZyb20gXCJwYXJ0aWFsLWpzb25cIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQgeyB3cmFwV2l0aFRhbWJvTWVzc2FnZVByb3ZpZGVyIH0gZnJvbSBcIi4uL2hvb2tzL3VzZS1jdXJyZW50LW1lc3NhZ2VcIjtcbmltcG9ydCB7IGdldENvbXBvbmVudEZyb21SZWdpc3RyeSB9IGZyb20gXCIuLi91dGlsL3JlZ2lzdHJ5XCI7XG4vKipcbiAqIEdlbmVyYXRlIGEgbWVzc2FnZSB0aGF0IGhhcyBhIGNvbXBvbmVudCByZW5kZXJlZCBpbnRvIGl0LCBpZiB0aGUgbWVzc2FnZVxuICogY2FtZSB3aXRoIG9uZS5cbiAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIG1lc3NhZ2UgdGhhdCBtYXkgY29udGFpbiBhIGNvbXBvbmVudFxuICogQHBhcmFtIGNvbXBvbmVudExpc3QgLSB0aGUgbGlzdCBvZiBhdmFpbGFibGUgY29tcG9uZW50c1xuICogQHJldHVybnMgVGhlIHVwZGF0ZWQgbWVzc2FnZSB3aXRoIHRoZSBjb21wb25lbnQgcmVuZGVyZWQgaW50byBpdFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyQ29tcG9uZW50SW50b01lc3NhZ2UobWVzc2FnZSwgY29tcG9uZW50TGlzdCkge1xuICAgIGlmICghbWVzc2FnZS5jb21wb25lbnQ/LmNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29tcG9uZW50IG5vdCBmb3VuZFwiKTtcbiAgICB9XG4gICAgY29uc3QgcGFyc2VkUHJvcHMgPSBwYXJzZShKU09OLnN0cmluZ2lmeShtZXNzYWdlLmNvbXBvbmVudC5wcm9wcykpO1xuICAgIGNvbnN0IHJlZ2lzdGVyZWRDb21wb25lbnQgPSBnZXRDb21wb25lbnRGcm9tUmVnaXN0cnkobWVzc2FnZS5jb21wb25lbnQuY29tcG9uZW50TmFtZSwgY29tcG9uZW50TGlzdCk7XG4gICAgY29uc3QgdmFsaWRhdGVkUHJvcHMgPSByZWdpc3RlcmVkQ29tcG9uZW50LnByb3BzIGluc3RhbmNlb2Ygei5ab2RUeXBlXG4gICAgICAgID8gcmVnaXN0ZXJlZENvbXBvbmVudC5wcm9wcy5wYXJzZShwYXJzZWRQcm9wcylcbiAgICAgICAgOiBwYXJzZWRQcm9wcztcbiAgICBjb25zdCByZW5kZXJlZENvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQocmVnaXN0ZXJlZENvbXBvbmVudC5jb21wb25lbnQsIHZhbGlkYXRlZFByb3BzKTtcbiAgICBjb25zdCB3cmFwcGVkQ29tcG9uZW50ID0gd3JhcFdpdGhUYW1ib01lc3NhZ2VQcm92aWRlcihyZW5kZXJlZENvbXBvbmVudCwgbWVzc2FnZS50aHJlYWRJZCwgbWVzc2FnZS5pZCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4ubWVzc2FnZSxcbiAgICAgICAgY29tcG9uZW50OiB7XG4gICAgICAgICAgICAuLi5tZXNzYWdlLmNvbXBvbmVudCxcbiAgICAgICAgICAgIHByb3BzOiB2YWxpZGF0ZWRQcm9wcyxcbiAgICAgICAgfSxcbiAgICAgICAgcmVuZGVyZWRDb21wb25lbnQ6IHdyYXBwZWRDb21wb25lbnQsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYXRlLWNvbXBvbmVudC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/generate-component.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/registry.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/registry.js ***!
  \*******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertPropsToJsonSchema: () => (/* binding */ convertPropsToJsonSchema),\n/* harmony export */   getAvailableComponents: () => (/* binding */ getAvailableComponents),\n/* harmony export */   getClientContext: () => (/* binding */ getClientContext),\n/* harmony export */   getComponentFromRegistry: () => (/* binding */ getComponentFromRegistry),\n/* harmony export */   getUnassociatedTools: () => (/* binding */ getUnassociatedTools),\n/* harmony export */   mapTamboToolToContextTool: () => (/* binding */ mapTamboToolToContextTool)\n/* harmony export */ });\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(ssr)/./node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.74/node_modules/zod-to-json-schema/dist/esm/index.js\");\n\n/**\n * Get all the available components from the component registry\n * @param componentRegistry - The component registry\n * @param toolRegistry - The tool registry\n * @param toolAssociations - The tool associations\n * @returns The available components\n */\nconst getAvailableComponents = (componentRegistry, toolRegistry, toolAssociations) => {\n    const availableComponents = [];\n    for (const [name, componentEntry] of Object.entries(componentRegistry)) {\n        const associatedToolNames = toolAssociations[name] || [];\n        const contextTools = [\n            ...associatedToolNames.map((toolName) => {\n                const tool = toolRegistry[toolName];\n                if (!tool)\n                    return null;\n                return mapTamboToolToContextTool(tool);\n            }),\n        ].filter((tool) => tool !== null);\n        availableComponents.push({\n            name: componentEntry.name,\n            description: componentEntry.description,\n            props: componentEntry.props,\n            contextTools,\n        });\n    }\n    return availableComponents;\n};\n/**\n * Get tools from tool registry that are not associated with any component\n * @param toolRegistry - The tool registry\n * @param toolAssociations - The tool associations\n * @returns The tools that are not associated with any component\n */\nconst getUnassociatedTools = (toolRegistry, toolAssociations) => {\n    return Object.values(toolRegistry).filter((tool) => {\n        // Check if the tool's name appears in any of the tool association arrays\n        return !Object.values(toolAssociations).flat().includes(tool.name);\n    });\n};\n/**\n * Helper function to convert component props from Zod schema to JSON Schema\n * @param component - The component to convert\n * @returns The converted props\n */\nconst convertPropsToJsonSchema = (component) => {\n    if (!component.props) {\n        return component.props;\n    }\n    // Check if props is a Zod schema (we can't directly check the type, so we check for _def)\n    if (component.props._def && typeof component.props.parse === \"function\") {\n        // Use two-step type assertion for safety\n        return (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(component.props);\n    }\n    return component.props;\n};\n/**\n * Get a component by name from the component registry\n * @param componentName - The name of the component to get\n * @param componentRegistry - The component registry\n * @returns The component registration information\n */\nconst getComponentFromRegistry = (componentName, componentRegistry) => {\n    const componentEntry = componentRegistry[componentName];\n    if (!componentEntry) {\n        throw new Error(`Tambo tried to use Component ${componentName}, but it was not found.`);\n    }\n    return componentEntry;\n};\nconst getDefaultContextAdditions = () => {\n    const utcOffsetHours = new Date().getTimezoneOffset() / 60;\n    const utcOffset = `(UTC${utcOffsetHours > 0 ? \"+\" : \"\"}${utcOffsetHours})`;\n    return [\n        `The current time in user's timezone (${utcOffset}) is: ${new Date().toLocaleString()}`,\n    ];\n};\n/**\n * Get the client context for the current thread, such as the current time in the user's timezone\n * @returns a string of context additions that will be added to the prompt when the thread is advanced.\n */\nconst getClientContext = () => {\n    const contextAdditions = getDefaultContextAdditions();\n    return contextAdditions.join(\"\\n\");\n};\n/**\n * Map a Tambo tool to a context tool\n * @param tool - The tool to map\n * @returns The context tool\n */\nconst mapTamboToolToContextTool = (tool) => {\n    const parameters = getParametersFromZodFunction(tool.toolSchema);\n    return {\n        name: tool.name,\n        description: tool.description,\n        parameters,\n    };\n};\nfunction isJsonSchema(schema) {\n    return (typeof schema === \"object\" &&\n        schema !== null &&\n        \"type\" in schema &&\n        typeof schema.type === \"string\" &&\n        schema.type === \"object\");\n}\nconst getParametersFromZodFunction = (schema) => {\n    if (isJsonSchema(schema)) {\n        return [\n            {\n                name: \"args\",\n                type: \"object\",\n                description: schema.description ?? \"\",\n                isRequired: true,\n                schema: schema,\n            },\n        ];\n    }\n    const parameters = schema.parameters();\n    return parameters.items.map((param, index) => {\n        const name = `param${index + 1}`;\n        const type = getZodBaseType(param);\n        const description = param.description ?? \"\";\n        const isRequired = !param.isOptional();\n        const schema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(param);\n        return {\n            name,\n            type,\n            description,\n            isRequired,\n            schema,\n        };\n    });\n};\nconst getZodBaseType = (schema) => {\n    const typeName = schema._def.typeName;\n    switch (typeName) {\n        case \"ZodString\":\n            return \"string\";\n        case \"ZodNumber\":\n            return \"number\";\n        case \"ZodBoolean\":\n            return \"boolean\";\n        case \"ZodArray\":\n            return \"array\";\n        case \"ZodEnum\":\n            return \"enum\";\n        case \"ZodDate\":\n            return \"date\";\n        case \"ZodObject\":\n            return \"object\";\n        default:\n            console.warn(\"falling back to string for\", typeName);\n            return \"string\";\n    }\n};\n//# sourceMappingURL=registry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/registry.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/tool-caller.js":
/*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/tool-caller.js ***!
  \**********************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleToolCall: () => (/* binding */ handleToolCall)\n/* harmony export */ });\n/* harmony import */ var _registry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./registry */ \"(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/registry.js\");\n\n/**\n * Process a message from the thread, invoking the appropriate tool and returning the result.\n * @param message - The message to handle\n * @param toolRegistry - The tool registry\n * @returns The result of the tool call\n */\nconst handleToolCall = async (message, toolRegistry) => {\n    if (!message?.toolCallRequest?.toolName) {\n        throw new Error(\"Tool name is required\");\n    }\n    try {\n        const tool = findTool(message.toolCallRequest.toolName, toolRegistry);\n        return {\n            result: await runToolChoice(message.toolCallRequest, tool),\n        };\n    }\n    catch (error) {\n        console.error(\"Error in calling tool: \", error);\n        return {\n            result: `When attempting to call tool ${message.toolCallRequest.toolName} the following error occurred: ${error}. Explain to the user that the tool call failed and try again if needed.`,\n            error: error instanceof Error ? error.message : \"Unknown error\",\n        };\n    }\n};\nconst findTool = (toolName, toolRegistry) => {\n    const registryTool = toolRegistry[toolName];\n    if (!registryTool) {\n        throw new Error(`Tool ${toolName} not found in registry`);\n    }\n    const contextTool = (0,_registry__WEBPACK_IMPORTED_MODULE_0__.mapTamboToolToContextTool)(registryTool);\n    return {\n        getComponentContext: registryTool.tool,\n        definition: contextTool,\n    };\n};\nconst runToolChoice = async (toolCallRequest, tool) => {\n    // Assumes parameters are in the order they are defined in the tool\n    const parameterValues = toolCallRequest.parameters?.map((param) => param.parameterValue) ?? [];\n    return await tool.getComponentContext(...parameterValues);\n};\n//# sourceMappingURL=tool-caller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhbWJvLWFpK3JlYWN0QDAuMzQuMF9AdHlwXzk0ZmU0NjU3YzA5OGVmNmEwNzFlZGQ3OGRiMjI3NzRhL25vZGVfbW9kdWxlcy9AdGFtYm8tYWkvcmVhY3QvZXNtL3V0aWwvdG9vbC1jYWxsZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Qsa0NBQWtDLGdDQUFnQyxNQUFNO0FBQzVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVU7QUFDMUM7QUFDQSx3QkFBd0Isb0VBQXlCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkU6XFx3b3JrU3BhY2VcXENVUlNPUlxccGVyc29uYS1tYWlsLWFpLWFkYXB0XFxuZXh0LXBlcnNvbmFtYWlsXFxub2RlX21vZHVsZXNcXC5wbnBtXFxAdGFtYm8tYWkrcmVhY3RAMC4zNC4wX0B0eXBfOTRmZTQ2NTdjMDk4ZWY2YTA3MWVkZDc4ZGIyMjc3NGFcXG5vZGVfbW9kdWxlc1xcQHRhbWJvLWFpXFxyZWFjdFxcZXNtXFx1dGlsXFx0b29sLWNhbGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYXBUYW1ib1Rvb2xUb0NvbnRleHRUb29sIH0gZnJvbSBcIi4vcmVnaXN0cnlcIjtcbi8qKlxuICogUHJvY2VzcyBhIG1lc3NhZ2UgZnJvbSB0aGUgdGhyZWFkLCBpbnZva2luZyB0aGUgYXBwcm9wcmlhdGUgdG9vbCBhbmQgcmV0dXJuaW5nIHRoZSByZXN1bHQuXG4gKiBAcGFyYW0gbWVzc2FnZSAtIFRoZSBtZXNzYWdlIHRvIGhhbmRsZVxuICogQHBhcmFtIHRvb2xSZWdpc3RyeSAtIFRoZSB0b29sIHJlZ2lzdHJ5XG4gKiBAcmV0dXJucyBUaGUgcmVzdWx0IG9mIHRoZSB0b29sIGNhbGxcbiAqL1xuZXhwb3J0IGNvbnN0IGhhbmRsZVRvb2xDYWxsID0gYXN5bmMgKG1lc3NhZ2UsIHRvb2xSZWdpc3RyeSkgPT4ge1xuICAgIGlmICghbWVzc2FnZT8udG9vbENhbGxSZXF1ZXN0Py50b29sTmFtZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUb29sIG5hbWUgaXMgcmVxdWlyZWRcIik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHRvb2wgPSBmaW5kVG9vbChtZXNzYWdlLnRvb2xDYWxsUmVxdWVzdC50b29sTmFtZSwgdG9vbFJlZ2lzdHJ5KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3VsdDogYXdhaXQgcnVuVG9vbENob2ljZShtZXNzYWdlLnRvb2xDYWxsUmVxdWVzdCwgdG9vbCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gY2FsbGluZyB0b29sOiBcIiwgZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdWx0OiBgV2hlbiBhdHRlbXB0aW5nIHRvIGNhbGwgdG9vbCAke21lc3NhZ2UudG9vbENhbGxSZXF1ZXN0LnRvb2xOYW1lfSB0aGUgZm9sbG93aW5nIGVycm9yIG9jY3VycmVkOiAke2Vycm9yfS4gRXhwbGFpbiB0byB0aGUgdXNlciB0aGF0IHRoZSB0b29sIGNhbGwgZmFpbGVkIGFuZCB0cnkgYWdhaW4gaWYgbmVlZGVkLmAsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBcIlVua25vd24gZXJyb3JcIixcbiAgICAgICAgfTtcbiAgICB9XG59O1xuY29uc3QgZmluZFRvb2wgPSAodG9vbE5hbWUsIHRvb2xSZWdpc3RyeSkgPT4ge1xuICAgIGNvbnN0IHJlZ2lzdHJ5VG9vbCA9IHRvb2xSZWdpc3RyeVt0b29sTmFtZV07XG4gICAgaWYgKCFyZWdpc3RyeVRvb2wpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUb29sICR7dG9vbE5hbWV9IG5vdCBmb3VuZCBpbiByZWdpc3RyeWApO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0VG9vbCA9IG1hcFRhbWJvVG9vbFRvQ29udGV4dFRvb2wocmVnaXN0cnlUb29sKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXRDb21wb25lbnRDb250ZXh0OiByZWdpc3RyeVRvb2wudG9vbCxcbiAgICAgICAgZGVmaW5pdGlvbjogY29udGV4dFRvb2wsXG4gICAgfTtcbn07XG5jb25zdCBydW5Ub29sQ2hvaWNlID0gYXN5bmMgKHRvb2xDYWxsUmVxdWVzdCwgdG9vbCkgPT4ge1xuICAgIC8vIEFzc3VtZXMgcGFyYW1ldGVycyBhcmUgaW4gdGhlIG9yZGVyIHRoZXkgYXJlIGRlZmluZWQgaW4gdGhlIHRvb2xcbiAgICBjb25zdCBwYXJhbWV0ZXJWYWx1ZXMgPSB0b29sQ2FsbFJlcXVlc3QucGFyYW1ldGVycz8ubWFwKChwYXJhbSkgPT4gcGFyYW0ucGFyYW1ldGVyVmFsdWUpID8/IFtdO1xuICAgIHJldHVybiBhd2FpdCB0b29sLmdldENvbXBvbmVudENvbnRleHQoLi4ucGFyYW1ldGVyVmFsdWVzKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b29sLWNhbGxlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/tool-caller.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/validate-zod-schema.js":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/validate-zod-schema.js ***!
  \******************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertNoZodRecord: () => (/* binding */ assertNoZodRecord)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/.pnpm/zod@3.25.74/node_modules/zod/v3/types.js\");\n\n/**\n * Recursively walks a Zod schema and throws when it encounters `z.record()`.\n * Records are not serialisable to JSON-Schema in a way that the Tambo backend\n * understands, so they are disallowed.\n * @param schema      The root Zod schema to inspect.\n * @param contextName A human-readable label echoed in the error message.\n */\nfunction assertNoZodRecord(schema, contextName = \"schema\") {\n    const visited = new WeakSet();\n    const visit = (current, path) => {\n        if (!current ||\n            typeof current !== \"object\" ||\n            !(current instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodType))\n            return;\n        if (visited.has(current))\n            return;\n        const def = current._def;\n        const typeName = def?.typeName;\n        // ───────────────────── Disallowed ─────────────────────\n        if (typeName === zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodRecord) {\n            const joined = path.length ? path.join(\".\") : \"(root)\";\n            throw new Error(`z.record() is not supported in ${contextName}. ` +\n                `Found at path \"${joined}\". ` +\n                \"Replace it with z.object({ ... }) using explicit keys.\");\n        }\n        visited.add(current);\n        // ─────────────── Composite / container types ──────────\n        if (current instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodObject) {\n            for (const key of Object.keys(current.shape)) {\n                visit(current.shape[key], [...path, key]);\n            }\n            return;\n        }\n        if (current instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodArray) {\n            visit(current.element, [...path, \"[]\"]);\n            return;\n        }\n        if (current instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodTuple) {\n            current.items.forEach((item, idx) => visit(item, [...path, `${idx}`]));\n            return;\n        }\n        if (current instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodUnion) {\n            def.options.forEach((opt, idx) => visit(opt, [...path, `|${idx}`]));\n            return;\n        }\n        if (current instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodDiscriminatedUnion) {\n            current.options.forEach((opt, idx) => visit(opt, [...path, `|${idx}`]));\n            return;\n        }\n        if (current instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodIntersection) {\n            visit(def.left, [...path, \"&0\"]);\n            visit(def.right, [...path, \"&1\"]);\n            return;\n        }\n        // ───────────── Wrapper / pass-through types ───────────\n        const potentialKeys = [\n            \"schema\",\n            \"innerType\",\n            \"type\",\n            \"in\",\n            \"out\",\n            \"left\",\n            \"right\",\n        ];\n        for (const key of potentialKeys) {\n            const maybe = def?.[key];\n            if (maybe instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodType)\n                visit(maybe, path);\n            else if (Array.isArray(maybe))\n                maybe.forEach((sub) => sub instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodType && visit(sub, path));\n        }\n        if (typeof def?.getter === \"function\") {\n            try {\n                const lazySchema = def.getter();\n                if (lazySchema instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodType)\n                    visit(lazySchema, [...path]);\n            }\n            catch {\n                // Ignore lazy getter execution errors.\n            }\n        }\n    };\n    visit(schema, []);\n}\n//# sourceMappingURL=validate-zod-schema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhbWJvLWFpK3JlYWN0QDAuMzQuMF9AdHlwXzk0ZmU0NjU3YzA5OGVmNmEwNzFlZGQ3OGRiMjI3NzRhL25vZGVfbW9kdWxlcy9AdGFtYm8tYWkvcmVhY3QvZXNtL3V0aWwvdmFsaWRhdGUtem9kLXNjaGVtYS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsd0NBQVM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHNEQUFxQjtBQUM5QztBQUNBLDhEQUE4RCxZQUFZO0FBQzFFLGtDQUFrQyxPQUFPO0FBQ3pDLDRDQUE0QyxLQUFLO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwwQ0FBVztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHlDQUFVO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLCtCQUErQix5Q0FBVTtBQUN6QywwRUFBMEUsSUFBSTtBQUM5RTtBQUNBO0FBQ0EsK0JBQStCLHlDQUFVO0FBQ3pDLHVFQUF1RSxJQUFJO0FBQzNFO0FBQ0E7QUFDQSwrQkFBK0Isc0RBQXVCO0FBQ3RELDJFQUEyRSxJQUFJO0FBQy9FO0FBQ0E7QUFDQSwrQkFBK0IsZ0RBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLHdDQUFTO0FBQzFDO0FBQ0E7QUFDQSxzREFBc0Qsd0NBQVM7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsd0NBQVM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkU6XFx3b3JrU3BhY2VcXENVUlNPUlxccGVyc29uYS1tYWlsLWFpLWFkYXB0XFxuZXh0LXBlcnNvbmFtYWlsXFxub2RlX21vZHVsZXNcXC5wbnBtXFxAdGFtYm8tYWkrcmVhY3RAMC4zNC4wX0B0eXBfOTRmZTQ2NTdjMDk4ZWY2YTA3MWVkZDc4ZGIyMjc3NGFcXG5vZGVfbW9kdWxlc1xcQHRhbWJvLWFpXFxyZWFjdFxcZXNtXFx1dGlsXFx2YWxpZGF0ZS16b2Qtc2NoZW1hLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHosIFpvZEZpcnN0UGFydHlUeXBlS2luZCB9IGZyb20gXCJ6b2RcIjtcbi8qKlxuICogUmVjdXJzaXZlbHkgd2Fsa3MgYSBab2Qgc2NoZW1hIGFuZCB0aHJvd3Mgd2hlbiBpdCBlbmNvdW50ZXJzIGB6LnJlY29yZCgpYC5cbiAqIFJlY29yZHMgYXJlIG5vdCBzZXJpYWxpc2FibGUgdG8gSlNPTi1TY2hlbWEgaW4gYSB3YXkgdGhhdCB0aGUgVGFtYm8gYmFja2VuZFxuICogdW5kZXJzdGFuZHMsIHNvIHRoZXkgYXJlIGRpc2FsbG93ZWQuXG4gKiBAcGFyYW0gc2NoZW1hICAgICAgVGhlIHJvb3QgWm9kIHNjaGVtYSB0byBpbnNwZWN0LlxuICogQHBhcmFtIGNvbnRleHROYW1lIEEgaHVtYW4tcmVhZGFibGUgbGFiZWwgZWNob2VkIGluIHRoZSBlcnJvciBtZXNzYWdlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0Tm9ab2RSZWNvcmQoc2NoZW1hLCBjb250ZXh0TmFtZSA9IFwic2NoZW1hXCIpIHtcbiAgICBjb25zdCB2aXNpdGVkID0gbmV3IFdlYWtTZXQoKTtcbiAgICBjb25zdCB2aXNpdCA9IChjdXJyZW50LCBwYXRoKSA9PiB7XG4gICAgICAgIGlmICghY3VycmVudCB8fFxuICAgICAgICAgICAgdHlwZW9mIGN1cnJlbnQgIT09IFwib2JqZWN0XCIgfHxcbiAgICAgICAgICAgICEoY3VycmVudCBpbnN0YW5jZW9mIHouWm9kVHlwZSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh2aXNpdGVkLmhhcyhjdXJyZW50KSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgZGVmID0gY3VycmVudC5fZGVmO1xuICAgICAgICBjb25zdCB0eXBlTmFtZSA9IGRlZj8udHlwZU5hbWU7XG4gICAgICAgIC8vIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBEaXNhbGxvd2VkIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgFxuICAgICAgICBpZiAodHlwZU5hbWUgPT09IFpvZEZpcnN0UGFydHlUeXBlS2luZC5ab2RSZWNvcmQpIHtcbiAgICAgICAgICAgIGNvbnN0IGpvaW5lZCA9IHBhdGgubGVuZ3RoID8gcGF0aC5qb2luKFwiLlwiKSA6IFwiKHJvb3QpXCI7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHoucmVjb3JkKCkgaXMgbm90IHN1cHBvcnRlZCBpbiAke2NvbnRleHROYW1lfS4gYCArXG4gICAgICAgICAgICAgICAgYEZvdW5kIGF0IHBhdGggXCIke2pvaW5lZH1cIi4gYCArXG4gICAgICAgICAgICAgICAgXCJSZXBsYWNlIGl0IHdpdGggei5vYmplY3QoeyAuLi4gfSkgdXNpbmcgZXhwbGljaXQga2V5cy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdmlzaXRlZC5hZGQoY3VycmVudCk7XG4gICAgICAgIC8vIOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgCBDb21wb3NpdGUgLyBjb250YWluZXIgdHlwZXMg4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSAXG4gICAgICAgIGlmIChjdXJyZW50IGluc3RhbmNlb2Ygei5ab2RPYmplY3QpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGN1cnJlbnQuc2hhcGUpKSB7XG4gICAgICAgICAgICAgICAgdmlzaXQoY3VycmVudC5zaGFwZVtrZXldLCBbLi4ucGF0aCwga2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQgaW5zdGFuY2VvZiB6LlpvZEFycmF5KSB7XG4gICAgICAgICAgICB2aXNpdChjdXJyZW50LmVsZW1lbnQsIFsuLi5wYXRoLCBcIltdXCJdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudCBpbnN0YW5jZW9mIHouWm9kVHVwbGUpIHtcbiAgICAgICAgICAgIGN1cnJlbnQuaXRlbXMuZm9yRWFjaCgoaXRlbSwgaWR4KSA9PiB2aXNpdChpdGVtLCBbLi4ucGF0aCwgYCR7aWR4fWBdKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnQgaW5zdGFuY2VvZiB6LlpvZFVuaW9uKSB7XG4gICAgICAgICAgICBkZWYub3B0aW9ucy5mb3JFYWNoKChvcHQsIGlkeCkgPT4gdmlzaXQob3B0LCBbLi4ucGF0aCwgYHwke2lkeH1gXSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50IGluc3RhbmNlb2Ygei5ab2REaXNjcmltaW5hdGVkVW5pb24pIHtcbiAgICAgICAgICAgIGN1cnJlbnQub3B0aW9ucy5mb3JFYWNoKChvcHQsIGlkeCkgPT4gdmlzaXQob3B0LCBbLi4ucGF0aCwgYHwke2lkeH1gXSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50IGluc3RhbmNlb2Ygei5ab2RJbnRlcnNlY3Rpb24pIHtcbiAgICAgICAgICAgIHZpc2l0KGRlZi5sZWZ0LCBbLi4ucGF0aCwgXCImMFwiXSk7XG4gICAgICAgICAgICB2aXNpdChkZWYucmlnaHQsIFsuLi5wYXRoLCBcIiYxXCJdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIAgV3JhcHBlciAvIHBhc3MtdGhyb3VnaCB0eXBlcyDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIBcbiAgICAgICAgY29uc3QgcG90ZW50aWFsS2V5cyA9IFtcbiAgICAgICAgICAgIFwic2NoZW1hXCIsXG4gICAgICAgICAgICBcImlubmVyVHlwZVwiLFxuICAgICAgICAgICAgXCJ0eXBlXCIsXG4gICAgICAgICAgICBcImluXCIsXG4gICAgICAgICAgICBcIm91dFwiLFxuICAgICAgICAgICAgXCJsZWZ0XCIsXG4gICAgICAgICAgICBcInJpZ2h0XCIsXG4gICAgICAgIF07XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHBvdGVudGlhbEtleXMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1heWJlID0gZGVmPy5ba2V5XTtcbiAgICAgICAgICAgIGlmIChtYXliZSBpbnN0YW5jZW9mIHouWm9kVHlwZSlcbiAgICAgICAgICAgICAgICB2aXNpdChtYXliZSwgcGF0aCk7XG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KG1heWJlKSlcbiAgICAgICAgICAgICAgICBtYXliZS5mb3JFYWNoKChzdWIpID0+IHN1YiBpbnN0YW5jZW9mIHouWm9kVHlwZSAmJiB2aXNpdChzdWIsIHBhdGgpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGRlZj8uZ2V0dGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGF6eVNjaGVtYSA9IGRlZi5nZXR0ZXIoKTtcbiAgICAgICAgICAgICAgICBpZiAobGF6eVNjaGVtYSBpbnN0YW5jZW9mIHouWm9kVHlwZSlcbiAgICAgICAgICAgICAgICAgICAgdmlzaXQobGF6eVNjaGVtYSwgWy4uLnBhdGhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgbGF6eSBnZXR0ZXIgZXhlY3V0aW9uIGVycm9ycy5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgdmlzaXQoc2NoZW1hLCBbXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0ZS16b2Qtc2NoZW1hLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/esm/util/validate-zod-schema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/package.json":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tambo-ai+react@0.34.0_@typ_94fe4657c098ef6a071edd78db22774a/node_modules/@tambo-ai/react/package.json ***!
  \***********************************************************************************************************************************/
/***/ ((module) => {

module.exports = /*#__PURE__*/JSON.parse('{"name":"@tambo-ai/react","version":"0.34.0","description":"React client package for Tambo AI","repository":{"type":"git","url":"git+https://github.com/tambo-ai/tambo.git","directory":"react-sdk"},"homepage":"https://tambo.co","main":"./dist/index.js","module":"./esm/index.js","types":"./dist/index.d.ts","exports":{".":{"import":"./esm/index.js","require":"./dist/index.js","types":"./dist/index.d.ts"},"./mcp":{"import":"./esm/mcp/index.js","require":"./dist/mcp/index.js","types":"./dist/mcp/index.d.ts"}},"files":["dist","esm"],"engines":{"node":">=22","npm":">=10"},"volta":{"extends":"../package.json"},"sideEffects":false,"scripts":{"build":"npm run build:cjs && npm run build:esm","build:cjs":"tsc -p tsconfig.cjs.json","build:esm":"tsc -p tsconfig.esm.json","dev":"concurrently -c blue.bold,green.bold \\"npm run dev:cjs\\" \\"npm run dev:esm\\"","dev:cjs":"tsc -p tsconfig.cjs.json --watch","dev:esm":"tsc -p tsconfig.esm.json --watch","check-types":"tsc --noEmit","test":"jest --config jest.config.ts","format":"prettier --write .","lint":"eslint","lint:fix":"eslint --fix","format:lint":"npm run format && npm run lint:fix","prepare":"husky","clean":"rimraf dist esm coverage"},"lint-staged":{"*.{js,jsx,ts,tsx}":["prettier --write","eslint --fix"],"*.{json,md,yml,yaml}":["prettier --write"]},"peerDependencies":{"@types/react":"^18.0.0 || ^19.0.0","@types/react-dom":"^18.0.0 || ^19.0.0","react":"^18.0.0 || ^19.0.0","react-dom":"^18.0.0 || ^19.0.0"},"dependencies":{"@modelcontextprotocol/sdk":"^1.13.2","@tambo-ai/typescript-sdk":"^0.58.0","@tanstack/react-query":"^5.81.5","partial-json":"^0.1.7","react-fast-compare":"^3.2.2","ts-essentials":"^10.1.1","use-debounce":"^10.0.5","zod":"^3.25.67","zod-to-json-schema":"^3.24.6"},"devDependencies":{"@eslint/js":"^9.30.0","@tambo-ai/eslint-config":"*","@tambo-ai/typescript-config":"*","@testing-library/jest-dom":"^6.4.2","@testing-library/react":"^16.3.0","@types/jest":"^30.0.0","@types/json-schema":"^7.0.15","@types/node":"^22.15.32","@types/react":"^18.3.12","@types/react-dom":"^18.3.5","concurrently":"^9.2.0","eslint":"^9.30.0","eslint-plugin-jsdoc":"^51.3.1","eslint-plugin-react":"^7.37.5","eslint-plugin-react-hooks":"^5.1.0","jest":"^30.0.3","jest-environment-jsdom":"^30.0.2","lint-staged":"^16.1.2","prettier":"^3.6.2","prettier-2":"npm:prettier@^2","react":"^18.3.1","react-dom":"^18.3.1","ts-jest":"^29.4.0","typescript":"^5.8.3","typescript-eslint":"^8.35.1"}}');

/***/ })

};
;