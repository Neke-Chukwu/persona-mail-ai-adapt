"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/autumn-js@0.0.77_react@18.3.1";
exports.ids = ["vendor-chunks/autumn-js@0.0.77_react@18.3.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/autumn-js@0.0.77_react@18.3.1/node_modules/autumn-js/dist/styles/global.css":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/autumn-js@0.0.77_react@18.3.1/node_modules/autumn-js/dist/styles/global.css ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"8e13efd40f88\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vYXV0dW1uLWpzQDAuMC43N19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL2F1dHVtbi1qcy9kaXN0L3N0eWxlcy9nbG9iYWwuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJFOlxcd29ya1NwYWNlXFxDVVJTT1JcXHBlcnNvbmEtbWFpbC1haS1hZGFwdFxcbmV4dC1wZXJzb25hbWFpbFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcYXV0dW1uLWpzQDAuMC43N19yZWFjdEAxOC4zLjFcXG5vZGVfbW9kdWxlc1xcYXV0dW1uLWpzXFxkaXN0XFxzdHlsZXNcXGdsb2JhbC5jc3MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI4ZTEzZWZkNDBmODhcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/autumn-js@0.0.77_react@18.3.1/node_modules/autumn-js/dist/styles/global.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/autumn-js@0.0.77_react@18.3.1/node_modules/autumn-js/dist/libraries/react/index.mjs":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/autumn-js@0.0.77_react@18.3.1/node_modules/autumn-js/dist/libraries/react/index.mjs ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var react__WEBPACK_IMPORTED_MODULE_1___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AttachDialog: () => (/* binding */ AttachDialog),\n/* harmony export */   AutumnProvider: () => (/* binding */ ReactAutumnProvider),\n/* harmony export */   CheckDialog: () => (/* binding */ CheckDialog),\n/* harmony export */   PricingTable: () => (/* binding */ PricingTable),\n/* harmony export */   useAutumn: () => (/* binding */ useAutumn),\n/* harmony export */   useCustomer: () => (/* binding */ useCustomer),\n/* harmony export */   useEntity: () => (/* binding */ useEntity),\n/* harmony export */   usePricingTable: () => (/* binding */ usePricingTable)\n/* harmony export */ });\n/* harmony import */ var _styles_global_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../styles/global.css */ \"(ssr)/./node_modules/.pnpm/autumn-js@0.0.77_react@18.3.1/node_modules/autumn-js/dist/styles/global.css\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/.pnpm/next@15.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! swr */ \"(ssr)/./node_modules/.pnpm/swr@2.3.4_react@18.3.1/node_modules/swr/dist/index/index.mjs\");\n/* harmony import */ var chalk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! chalk */ \"(ssr)/./node_modules/.pnpm/chalk@5.4.1/node_modules/chalk/source/index.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/.pnpm/next@15.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/.pnpm/next@15.1.3_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* __next_internal_client_entry_do_not_use__ AttachDialog,AutumnProvider,CheckDialog,PricingTable,useAutumn,useCustomer,useEntity,usePricingTable auto */ \n// src/libraries/react/BaseAutumnProvider.tsx\n\n// src/libraries/react/hooks/useDialog.tsx\n\nvar useDialog = (component)=>{\n    const [dialogProps, setDialogProps] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [dialogOpen, setDialogOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"useDialog.useEffect\": ()=>{\n            if (!dialogOpen) {\n                setTimeout({\n                    \"useDialog.useEffect\": ()=>{\n                        setDialogProps(null);\n                    }\n                }[\"useDialog.useEffect\"], 200);\n            }\n        }\n    }[\"useDialog.useEffect\"], [\n        dialogOpen\n    ]);\n    return [\n        dialogProps,\n        setDialogProps,\n        dialogOpen,\n        setDialogOpen\n    ];\n};\n// src/libraries/react/hooks/useCustomerBase.tsx\n\n// src/sdk/error.ts\nvar AutumnError = class _AutumnError extends Error {\n    constructor(response){\n        super(response.message);\n        this.message = response.message;\n        this.code = response.code;\n    }\n    static fromError(error) {\n        return new _AutumnError({\n            message: error.message || \"Unknown error\",\n            code: error.code || \"unknown_error\"\n        });\n    }\n    toString() {\n        return `${this.message} (code: ${this.code})`;\n    }\n    toJSON() {\n        return {\n            message: this.message,\n            code: this.code\n        };\n    }\n};\n// src/sdk/general/genMethods.ts\nvar handleAttach = async ({ instance, params })=>{\n    return instance.post(\"/attach\", params);\n};\nvar handleCancel = async ({ instance, params })=>{\n    return instance.post(\"/cancel\", params);\n};\nvar handleEntitled = async ({ instance, params })=>{\n    return instance.post(\"/entitled\", params);\n};\nvar handleEvent = async ({ instance, params })=>{\n    return instance.post(\"/events\", params);\n};\nvar handleTrack = async ({ instance, params })=>{\n    return instance.post(\"/track\", params);\n};\nvar handleUsage = async ({ instance, params })=>{\n    return instance.post(\"/usage\", params);\n};\nvar handleCheck = async ({ instance, params })=>{\n    return instance.post(\"/check\", params);\n};\n// src/libraries/backend/constants.ts\nvar autumnApiUrl = \"https://api.useautumn.com/v1\";\n// src/sdk/utils.ts\nvar staticWrapper = (callback, instance, args)=>{\n    if (!instance) {\n        instance = new Autumn();\n    }\n    return callback({\n        instance,\n        ...args\n    });\n};\n// src/sdk/customers/cusMethods.ts\nvar customerMethods = (instance)=>{\n    return {\n        get: (id, params)=>staticWrapper(getCustomer, instance, {\n                id,\n                params\n            }),\n        create: (params)=>staticWrapper(createCustomer, instance, {\n                params\n            }),\n        update: (id, params)=>staticWrapper(updateCustomer, instance, {\n                id,\n                params\n            }),\n        delete: (id)=>staticWrapper(deleteCustomer, instance, {\n                id\n            }),\n        billingPortal: (id, params)=>staticWrapper(billingPortal, instance, {\n                id,\n                params\n            })\n    };\n};\nvar getExpandStr = (expand)=>{\n    if (!expand) {\n        return \"\";\n    }\n    return `expand=${expand.join(\",\")}`;\n};\nvar getCustomer = async ({ instance, id, params })=>{\n    if (!id) {\n        return {\n            data: null,\n            error: new AutumnError({\n                message: \"Customer ID is required\",\n                code: \"CUSTOMER_ID_REQUIRED\"\n            })\n        };\n    }\n    return instance.get(`/customers/${id}?${getExpandStr(params?.expand)}`);\n};\nvar createCustomer = async ({ instance, params })=>{\n    return instance.post(`/customers?${getExpandStr(params?.expand)}`, params);\n};\nvar updateCustomer = async ({ instance, id, params })=>{\n    return instance.post(`/customers/${id}`, params);\n};\nvar deleteCustomer = async ({ instance, id })=>{\n    return instance.delete(`/customers/${id}`);\n};\nvar billingPortal = async ({ instance, id, params })=>{\n    return instance.post(`/customers/${id}/billing_portal`, params);\n};\n// src/sdk/customers/entities/entMethods.ts\nvar entityMethods = (instance)=>{\n    return {\n        get: (customer_id, entity_id, params)=>staticWrapper(getEntity, instance, {\n                customer_id,\n                entity_id,\n                params\n            }),\n        create: (customer_id, params)=>staticWrapper(createEntity, instance, {\n                customer_id,\n                params\n            }),\n        delete: (customer_id, entity_id)=>staticWrapper(deleteEntity, instance, {\n                customer_id,\n                entity_id\n            })\n    };\n};\nvar getExpandStr2 = (expand)=>{\n    if (!expand) {\n        return \"\";\n    }\n    return `expand=${expand.join(\",\")}`;\n};\nvar getEntity = async ({ instance, customer_id, entity_id, params })=>{\n    return instance.get(`/customers/${customer_id}/entities/${entity_id}?${getExpandStr2(params?.expand)}`);\n};\nvar createEntity = async ({ instance, customer_id, params })=>{\n    return instance.post(`/customers/${customer_id}/entities`, params);\n};\nvar deleteEntity = async ({ instance, customer_id, entity_id })=>{\n    return instance.delete(`/customers/${customer_id}/entities/${entity_id}`);\n};\n// src/sdk/products/prodMethods.ts\nvar productMethods = (instance)=>{\n    return {\n        get: (id)=>staticWrapper(getProduct, instance, {\n                id\n            }),\n        create: (params)=>staticWrapper(createProduct, instance, {\n                params\n            }),\n        list: (params)=>staticWrapper(listProducts, instance, {\n                params\n            })\n    };\n};\nvar listProducts = async ({ instance, params })=>{\n    let path = \"/products_beta\";\n    if (params) {\n        const queryParams = new URLSearchParams();\n        for (const [key, value1] of Object.entries(params)){\n            if (value1 !== void 0) {\n                queryParams.append(key, String(value1));\n            }\n        }\n        const queryString = queryParams.toString();\n        if (queryString) {\n            path += `?${queryString}`;\n        }\n    }\n    return instance.get(path);\n};\nvar getProduct = async ({ instance, id })=>{\n    return instance.get(`/products/${id}`);\n};\nvar createProduct = async ({ instance, params })=>{\n    return instance.post(\"/products\", params);\n};\n// src/sdk/referrals/referralMethods.ts\nvar referralMethods = (instance)=>{\n    return {\n        createCode: (params)=>staticWrapper(createReferralCode, instance, {\n                params\n            }),\n        redeemCode: (params)=>staticWrapper(redeemReferralCode, instance, {\n                params\n            })\n    };\n};\nvar createReferralCode = async ({ instance, params })=>{\n    return instance.post(\"/referrals/code\", params);\n};\nvar redeemReferralCode = async ({ instance, params })=>{\n    return instance.post(\"/referrals/redeem\", params);\n};\n// src/sdk/response.ts\nvar toContainerResult = async ({ response, logger: logger2 })=>{\n    if (response.status < 200 || response.status >= 300) {\n        let error;\n        try {\n            error = await response.json();\n            logger2.error(`[Autumn] ${error.message}`);\n        } catch (error2) {\n            throw error2;\n            return {\n                data: null,\n                error: new AutumnError({\n                    message: \"Failed to parse JSON response from Autumn\",\n                    code: \"internal_error\"\n                }),\n                statusCode: response.status\n            };\n        }\n        return {\n            data: null,\n            error: new AutumnError({\n                message: error.message,\n                code: error.code\n            }),\n            statusCode: response.status\n        };\n    }\n    try {\n        let data = await response.json();\n        return {\n            data,\n            error: null,\n            statusCode: response?.status\n        };\n    } catch (error) {\n        throw error;\n        return {\n            data: null,\n            error: new AutumnError({\n                message: \"Failed to parse Autumn API response\",\n                code: \"internal_error\"\n            }),\n            statusCode: response?.status\n        };\n    }\n};\n// src/utils/logger.ts\n\nvar getTime = ()=>{\n    let timeString = /* @__PURE__ */ new Date().toISOString();\n    return `[${timeString.split(\"T\")[1].split(\".\")[0]}]`;\n};\nvar greaterThanLevel = (level)=>{\n    return levels.indexOf(level) >= levels.indexOf(logger.level);\n};\nvar levels = [\n    \"debug\",\n    \"info\",\n    \"warn\",\n    \"error\",\n    \"fatal\"\n];\nvar logger = {\n    ...console,\n    level: \"info\",\n    debug: (...args)=>{\n        if (greaterThanLevel(\"debug\")) {\n            console.log(getTime(), chalk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].gray(\"DEBUG\"), ...args);\n        }\n    },\n    log: (...args)=>{\n        console.log(getTime(), chalk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].blue(\"INFO\"), ...args);\n    },\n    info: (...args)=>{\n        if (greaterThanLevel(\"info\")) {\n            console.log(getTime(), chalk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].blue(\"INFO\"), ...args);\n        }\n    },\n    warn: (...args)=>{\n        if (greaterThanLevel(\"warn\")) {\n            console.log(getTime(), chalk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].yellow(\"WARN\"), ...args);\n        }\n    },\n    error: (...args)=>{\n        if (greaterThanLevel(\"error\")) {\n            console.log(getTime(), chalk__WEBPACK_IMPORTED_MODULE_2__[\"default\"].red(\"ERROR\"), ...args);\n        }\n    }\n};\n// src/sdk/client.ts\nvar LATEST_API_VERSION = \"1.2\";\nvar Autumn = class {\n    constructor(options){\n        this.logger = console;\n        this.customers = customerMethods(this);\n        this.products = productMethods(this);\n        this.entities = entityMethods(this);\n        this.referrals = referralMethods(this);\n        try {\n            this.secretKey = options?.secretKey || process.env.AUTUMN_SECRET_KEY;\n            this.publishableKey = options?.publishableKey || process.env.AUTUMN_PUBLISHABLE_KEY;\n        } catch (error) {}\n        if (!this.secretKey && !this.publishableKey && !options?.headers) {\n            throw new Error(\"Autumn secret key or publishable key is required\");\n        }\n        this.headers = options?.headers || {\n            Authorization: `Bearer ${this.secretKey || this.publishableKey}`,\n            \"Content-Type\": \"application/json\"\n        };\n        let version = options?.version || LATEST_API_VERSION;\n        this.headers[\"x-api-version\"] = version;\n        this.url = options?.url || autumnApiUrl;\n        this.logger = logger;\n        this.logger.level = options?.logLevel || \"info\";\n    }\n    async get(path) {\n        const response = await fetch(`${this.url}${path}`, {\n            headers: this.headers\n        });\n        return toContainerResult({\n            response,\n            logger: this.logger\n        });\n    }\n    async post(path, body) {\n        try {\n            const response = await fetch(`${this.url}${path}`, {\n                method: \"POST\",\n                headers: this.headers,\n                body: JSON.stringify(body)\n            });\n            return toContainerResult({\n                response,\n                logger: this.logger\n            });\n        } catch (error) {\n            console.error(\"Error sending request:\", error);\n            throw error;\n        }\n    }\n    async delete(path) {\n        const response = await fetch(`${this.url}${path}`, {\n            method: \"DELETE\",\n            headers: this.headers\n        });\n        return toContainerResult({\n            response,\n            logger: this.logger\n        });\n    }\n    static{\n        this.customers = customerMethods();\n    }\n    static{\n        this.products = productMethods();\n    }\n    static{\n        this.entities = entityMethods();\n    }\n    static{\n        this.referrals = referralMethods();\n    }\n    static{\n        this.attach = (params)=>staticWrapper(handleAttach, void 0, {\n                params\n            });\n    }\n    static{\n        this.usage = (params)=>staticWrapper(handleUsage, void 0, {\n                params\n            });\n    }\n    async attach(params) {\n        return handleAttach({\n            instance: this,\n            params\n        });\n    }\n    static{\n        this.cancel = (params)=>staticWrapper(handleCancel, void 0, {\n                params\n            });\n    }\n    async cancel(params) {\n        return handleCancel({\n            instance: this,\n            params\n        });\n    }\n    static{\n        /**\n   * @deprecated This method is deprecated and will be removed in a future version.\n   * Please use the new check() method instead.\n   */ this.entitled = (params)=>staticWrapper(handleEntitled, void 0, {\n                params\n            });\n    }\n    /**\n   * @deprecated This method is deprecated and will be removed in a future version.\n   * Please use the new check() method instead.\n   */ async entitled(params) {\n        return handleEntitled({\n            instance: this,\n            params\n        });\n    }\n    static{\n        this.check = (params)=>staticWrapper(handleCheck, void 0, {\n                params\n            });\n    }\n    async check(params) {\n        return handleCheck({\n            instance: this,\n            params\n        });\n    }\n    static{\n        /**\n   * @deprecated This method is deprecated and will be removed in a future version.\n   * Please use the new track() method instead.\n   */ this.event = (params)=>staticWrapper(handleEvent, void 0, {\n                params\n            });\n    }\n    /**\n   * @deprecated This method is deprecated and will be removed in a future version.\n   * Please use the new track() method instead.\n   */ async event(params) {\n        return handleEvent({\n            instance: this,\n            params\n        });\n    }\n    static{\n        this.track = (params)=>staticWrapper(handleTrack, void 0, {\n                params\n            });\n    }\n    async track(params) {\n        return handleTrack({\n            instance: this,\n            params\n        });\n    }\n    async usage(params) {\n        return handleUsage({\n            instance: this,\n            params\n        });\n    }\n};\n// src/libraries/react/errorUtils/logFetchError.ts\nvar logFetchError = ({ method, backendUrl, path, error })=>{\n    console.error(`[Autumn] Fetch failed: ${method} ${backendUrl}${path}\n\n1. Check that backendUrl in <AutumnProvider/> is correctly set.\n2. Check that autumnHandler is correctly registered on your backend.`);\n};\n// src/libraries/react/client/clientCompMethods.ts\nasync function getPricingTableMethod() {\n    const res = await this.get(\"/api/autumn/components/pricing_table\");\n    return res;\n}\n// src/libraries/react/client/clientCusMethods.ts\nvar createCustomerMethod = async ({ client, params })=>{\n    let result = await client.post(\"/api/autumn/customers\", params);\n    return result;\n};\n// src/libraries/react/utils/toSnakeCase.ts\nfunction stringToSnakeCase(str) {\n    return str.replace(/([a-z])([A-Z])/g, \"$1_$2\").replace(/[-\\s]+/g, \"_\").toLowerCase();\n}\nvar toSnakeCase = (obj, excludeKeys)=>{\n    if (Array.isArray(obj)) {\n        return obj.map((item)=>toSnakeCase(item, excludeKeys));\n    } else if (obj !== null && typeof obj === \"object\") {\n        return Object.fromEntries(Object.entries(obj).map(([key, value1])=>{\n            const snakeKey = stringToSnakeCase(key);\n            if (excludeKeys && excludeKeys.includes(key)) {\n                return [\n                    snakeKey,\n                    value1\n                ];\n            }\n            return [\n                snakeKey,\n                toSnakeCase(value1, excludeKeys)\n            ];\n        }));\n    }\n    return obj;\n};\n// src/utils/entityUtils.tsx\nvar getEntityExpandStr = (expand)=>{\n    if (!expand) {\n        return \"\";\n    }\n    return `expand=${expand.join(\",\")}`;\n};\n// src/libraries/react/client/clientEntityMethods.ts\nasync function createEntityMethod(params) {\n    let snakeParams = toSnakeCase(params);\n    const res = await this.post(\"/api/autumn/entities\", snakeParams);\n    return res;\n}\nasync function getEntityMethod(entityId, params) {\n    let snakeParams = toSnakeCase(params);\n    let expand = getEntityExpandStr(params?.expand);\n    const res = await this.get(`/api/autumn/entities/${entityId}?${expand}`);\n    return res;\n}\nasync function deleteEntityMethod(entityId) {\n    const res = await this.delete(`/api/autumn/entities/${entityId}`);\n    return res;\n}\n// src/libraries/react/client/clientGenMethods.ts\nasync function attachMethod(params) {\n    let { dialog, ...rest } = params;\n    let snakeParams = toSnakeCase(rest, [\n        \"checkoutSessionparams\"\n    ]);\n    const res = await this.post(\"/api/autumn/attach\", snakeParams);\n    return res;\n}\nasync function cancelMethod(params) {\n    let snakeParams = toSnakeCase(params);\n    const res = await this.post(\"/api/autumn/cancel\", snakeParams);\n    return res;\n}\nasync function checkMethod(params) {\n    let { dialog, ...rest } = params;\n    let snakeParams = toSnakeCase(rest);\n    const res = await this.post(\"/api/autumn/check\", snakeParams);\n    return res;\n}\nasync function trackMethod(params) {\n    let snakeParams = toSnakeCase(params);\n    const res = await this.post(\"/api/autumn/track\", snakeParams);\n    return res;\n}\nasync function openBillingPortalMethod(params) {\n    let snakeParams = toSnakeCase(params || {});\n    const res = await this.post(\"/api/autumn/billing_portal\", snakeParams);\n    return res;\n}\n// src/libraries/react/client/clientProdMethods.ts\nasync function listProductsMethod() {\n    const res = await this.get(\"/api/autumn/products\");\n    return res;\n}\n// src/libraries/react/client/clientReferralMethods.ts\nasync function createCode(params) {\n    let snakeParams = toSnakeCase(params);\n    const res = await this.post(\"/api/autumn/referrals/code\", snakeParams);\n    return res;\n}\nasync function redeemCode(params) {\n    let snakeParams = toSnakeCase(params);\n    const res = await this.post(\"/api/autumn/referrals/redeem\", snakeParams);\n    return res;\n}\n// src/libraries/react/client/ReactAutumnClient.tsx\nvar AutumnClient = class {\n    // protected readonly pathPrefix?: string;\n    constructor({ backendUrl, getBearerToken, customerData, includeCredentials }){\n        this.attach = attachMethod.bind(this);\n        this.cancel = cancelMethod.bind(this);\n        this.check = checkMethod.bind(this);\n        this.track = trackMethod.bind(this);\n        this.openBillingPortal = openBillingPortalMethod.bind(this);\n        this.entities = {\n            create: createEntityMethod.bind(this),\n            get: getEntityMethod.bind(this),\n            delete: deleteEntityMethod.bind(this)\n        };\n        this.referrals = {\n            createCode: createCode.bind(this),\n            redeemCode: redeemCode.bind(this)\n        };\n        this.products = {\n            list: listProductsMethod.bind(this)\n        };\n        this.backendUrl = backendUrl;\n        this.getBearerToken = getBearerToken;\n        this.customerData = customerData;\n        this.includeCredentials = includeCredentials;\n    }\n    async getHeaders() {\n        let headers = {\n            \"Content-Type\": \"application/json\"\n        };\n        if (this.getBearerToken) {\n            try {\n                let token = await this.getBearerToken();\n                headers.Authorization = `Bearer ${token}`;\n            } catch (error) {\n                console.error(`Failed to call getToken() in AutumnProvider`);\n            }\n        }\n        return headers;\n    }\n    async handleFetch({ path, method, body }) {\n        body = method === \"POST\" ? JSON.stringify({\n            ...body,\n            customer_data: this.customerData || void 0\n        }) : void 0;\n        try {\n            const response = await fetch(`${this.backendUrl}${path}`, {\n                method,\n                body,\n                headers: await this.getHeaders(),\n                credentials: this.includeCredentials ? \"include\" : void 0\n            });\n            return await toContainerResult({\n                response,\n                logger: console\n            });\n        } catch (error) {\n            logFetchError({\n                method,\n                backendUrl: this.backendUrl || \"\",\n                path,\n                error\n            });\n            return {\n                data: null,\n                error: new AutumnError({\n                    message: error.message,\n                    code: \"fetch_failed\"\n                })\n            };\n        }\n    }\n    async post(path, body) {\n        return await this.handleFetch({\n            path,\n            method: \"POST\",\n            body\n        });\n    }\n    async get(path) {\n        return await this.handleFetch({\n            path,\n            method: \"GET\"\n        });\n    }\n    async delete(path) {\n        return await this.handleFetch({\n            path,\n            method: \"DELETE\"\n        });\n    }\n    async createCustomer(params) {\n        return await createCustomerMethod({\n            client: this,\n            params\n        });\n    }\n    async getPricingTable() {\n        return await getPricingTableMethod.bind(this)();\n    }\n};\n// src/libraries/react/AutumnContext.tsx\n\nvar AutumnContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    initialized: false,\n    disableDialogs: false,\n    client: new AutumnClient({\n        backendUrl: \"\"\n    }),\n    paywallDialog: {\n        props: null,\n        setProps: ()=>{},\n        open: false,\n        setOpen: ()=>{},\n        setComponent: ()=>{}\n    },\n    attachDialog: {\n        props: null,\n        setProps: ()=>{},\n        open: false,\n        setOpen: ()=>{},\n        setComponent: ()=>{}\n    }\n});\nvar useAutumnContext = ({ AutumnContext: AutumnContext2, name })=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AutumnContext2);\n    if (!context.initialized) {\n        throw new Error(`${name} must be used within <AutumnProvider />`);\n    }\n    return context;\n};\n// src/libraries/react/hooks/usePricingTableBase.tsx\n\nvar mergeProductDetails = (products, productDetails)=>{\n    if (!products) {\n        return null;\n    }\n    if (!productDetails) {\n        return products.map((product)=>{\n            if (product.base_variant_id) {\n                let baseProduct = products.find((p)=>p.id === product.base_variant_id);\n                if (baseProduct) {\n                    return {\n                        ...product,\n                        name: baseProduct.name\n                    };\n                }\n            }\n            return product;\n        });\n    }\n    let fetchedProducts = structuredClone(products);\n    let mergedProducts = [];\n    for (const overrideDetails of productDetails){\n        if (!overrideDetails.id) {\n            let properties = {};\n            let overrideItems2 = overrideDetails.items?.map((item)=>({\n                    display: {\n                        primary_text: item.primaryText,\n                        secondary_text: item.secondaryText\n                    }\n                }));\n            let overridePrice2 = overrideDetails.price;\n            if (overrideDetails.price) {\n                properties.is_free = false;\n                overrideItems2 = [\n                    {\n                        display: {\n                            primary_text: overridePrice2?.primaryText,\n                            secondary_text: overridePrice2?.secondaryText\n                        }\n                    },\n                    ...overrideItems2 || []\n                ];\n            }\n            mergedProducts.push({\n                display: {\n                    name: overrideDetails.name,\n                    description: overrideDetails.description,\n                    button_text: overrideDetails.buttonText,\n                    recommend_text: overrideDetails.recommendText,\n                    everything_from: overrideDetails.everythingFrom,\n                    button_url: overrideDetails.buttonUrl\n                },\n                items: overrideItems2,\n                properties\n            });\n            continue;\n        }\n        let fetchedProduct = fetchedProducts.find((p)=>p.id === overrideDetails.id);\n        if (!fetchedProduct) {\n            continue;\n        }\n        let displayName = fetchedProduct.name;\n        let baseVariantId = fetchedProduct.base_variant_id;\n        if (baseVariantId) {\n            let baseProduct = fetchedProducts.find((p)=>p.id === baseVariantId);\n            if (baseProduct) {\n                displayName = baseProduct.name;\n            }\n        }\n        displayName = overrideDetails.name || displayName;\n        const originalIsFree = fetchedProduct.properties?.is_free;\n        let overrideProperties = fetchedProduct.properties || {};\n        let overrideItems = overrideDetails.items;\n        let overridePrice = overrideDetails.price;\n        let mergedItems = [];\n        if (overridePrice) {\n            overrideProperties.is_free = false;\n            if (originalIsFree || overrideItems !== void 0) {\n                mergedItems.push({\n                    display: {\n                        primary_text: overridePrice.primaryText,\n                        secondary_text: overridePrice.secondaryText\n                    }\n                });\n            } else {\n                fetchedProduct.items[0].display = {\n                    primary_text: overridePrice.primaryText,\n                    secondary_text: overridePrice.secondaryText\n                };\n            }\n        } else {\n            if (overrideItems && !originalIsFree) {\n                mergedItems.push(fetchedProduct.items[0]);\n            }\n        }\n        if (overrideItems) {\n            for (const overrideItem of overrideItems){\n                if (!overrideItem.featureId) {\n                    mergedItems.push({\n                        display: {\n                            primary_text: overrideItem.primaryText,\n                            secondary_text: overrideItem.secondaryText\n                        }\n                    });\n                } else {\n                    let fetchedItem = fetchedProduct.items.find((i)=>i.feature_id === overrideItem.featureId);\n                    if (!fetchedItem) {\n                        console.error(`Feature with id ${overrideItem.featureId} not found for product ${fetchedProduct.id}`);\n                        continue;\n                    }\n                    mergedItems.push({\n                        ...fetchedItem,\n                        display: {\n                            primary_text: overrideItem.primaryText || fetchedItem.display?.primary_text,\n                            secondary_text: overrideItem.secondaryText || fetchedItem.display?.secondary_text\n                        }\n                    });\n                }\n            }\n        } else {\n            mergedItems = fetchedProduct.items;\n        }\n        const mergedProduct = {\n            ...fetchedProduct,\n            items: mergedItems,\n            properties: overrideProperties,\n            display: {\n                name: displayName,\n                description: overrideDetails.description,\n                button_text: overrideDetails.buttonText,\n                recommend_text: overrideDetails.recommendText,\n                everything_from: overrideDetails.everythingFrom,\n                button_url: overrideDetails.buttonUrl\n            }\n        };\n        mergedProducts.push(mergedProduct);\n    }\n    return mergedProducts;\n};\nvar usePricingTableBase = ({ AutumnContext: AutumnContext2, params })=>{\n    const context = useAutumnContext({\n        AutumnContext: AutumnContext2,\n        name: \"usePricingTable\"\n    });\n    const fetcher = async ()=>{\n        try {\n            const { data: data2, error: error2 } = await context.client.products.list();\n            if (error2) throw error2;\n            return data2?.list || [];\n        } catch (error2) {\n            throw new AutumnError({\n                message: \"Failed to fetch pricing table products\",\n                code: \"failed_to_fetch_pricing_table_products\"\n            });\n        }\n    };\n    const { data, error, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\"pricing-table\", fetcher);\n    return {\n        products: mergeProductDetails(data || [], params?.productDetails),\n        // products: data || [],\n        isLoading: !error && !data,\n        error,\n        refetch: mutate\n    };\n};\n// src/libraries/react/components/attach-dialog/attach-dialog-synced.tsx\n\n// ../node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs\nfunction r(e) {\n    var t, f, n = \"\";\n    if (\"string\" == typeof e || \"number\" == typeof e) n += e;\n    else if (\"object\" == typeof e) if (Array.isArray(e)) {\n        var o = e.length;\n        for(t = 0; t < o; t++)e[t] && (f = r(e[t])) && (n && (n += \" \"), n += f);\n    } else for(f in e)e[f] && (n && (n += \" \"), n += f);\n    return n;\n}\nfunction clsx() {\n    for(var e, t, f = 0, n = \"\", o = arguments.length; f < o; f++)(e = arguments[f]) && (t = r(e)) && (n && (n += \" \"), n += t);\n    return n;\n}\n// ../node_modules/.pnpm/tailwind-merge@2.6.0/node_modules/tailwind-merge/dist/bundle-mjs.mjs\nvar CLASS_PART_SEPARATOR = \"-\";\nvar createClassGroupUtils = (config)=>{\n    const classMap = createClassMap(config);\n    const { conflictingClassGroups, conflictingClassGroupModifiers } = config;\n    const getClassGroupId = (className)=>{\n        const classParts = className.split(CLASS_PART_SEPARATOR);\n        if (classParts[0] === \"\" && classParts.length !== 1) {\n            classParts.shift();\n        }\n        return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n    };\n    const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier)=>{\n        const conflicts = conflictingClassGroups[classGroupId] || [];\n        if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n            return [\n                ...conflicts,\n                ...conflictingClassGroupModifiers[classGroupId]\n            ];\n        }\n        return conflicts;\n    };\n    return {\n        getClassGroupId,\n        getConflictingClassGroupIds\n    };\n};\nvar getGroupRecursive = (classParts, classPartObject)=>{\n    if (classParts.length === 0) {\n        return classPartObject.classGroupId;\n    }\n    const currentClassPart = classParts[0];\n    const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\n    const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;\n    if (classGroupFromNextClassPart) {\n        return classGroupFromNextClassPart;\n    }\n    if (classPartObject.validators.length === 0) {\n        return void 0;\n    }\n    const classRest = classParts.join(CLASS_PART_SEPARATOR);\n    return classPartObject.validators.find(({ validator })=>validator(classRest))?.classGroupId;\n};\nvar arbitraryPropertyRegex = /^\\[(.+)\\]$/;\nvar getGroupIdForArbitraryProperty = (className)=>{\n    if (arbitraryPropertyRegex.test(className)) {\n        const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\n        const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(\":\"));\n        if (property) {\n            return \"arbitrary..\" + property;\n        }\n    }\n};\nvar createClassMap = (config)=>{\n    const { theme, prefix } = config;\n    const classMap = {\n        nextPart: /* @__PURE__ */ new Map(),\n        validators: []\n    };\n    const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);\n    prefixedClassGroupEntries.forEach(([classGroupId, classGroup])=>{\n        processClassesRecursively(classGroup, classMap, classGroupId, theme);\n    });\n    return classMap;\n};\nvar processClassesRecursively = (classGroup, classPartObject, classGroupId, theme)=>{\n    classGroup.forEach((classDefinition)=>{\n        if (typeof classDefinition === \"string\") {\n            const classPartObjectToEdit = classDefinition === \"\" ? classPartObject : getPart(classPartObject, classDefinition);\n            classPartObjectToEdit.classGroupId = classGroupId;\n            return;\n        }\n        if (typeof classDefinition === \"function\") {\n            if (isThemeGetter(classDefinition)) {\n                processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n                return;\n            }\n            classPartObject.validators.push({\n                validator: classDefinition,\n                classGroupId\n            });\n            return;\n        }\n        Object.entries(classDefinition).forEach(([key, classGroup2])=>{\n            processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);\n        });\n    });\n};\nvar getPart = (classPartObject, path)=>{\n    let currentClassPartObject = classPartObject;\n    path.split(CLASS_PART_SEPARATOR).forEach((pathPart)=>{\n        if (!currentClassPartObject.nextPart.has(pathPart)) {\n            currentClassPartObject.nextPart.set(pathPart, {\n                nextPart: /* @__PURE__ */ new Map(),\n                validators: []\n            });\n        }\n        currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n    });\n    return currentClassPartObject;\n};\nvar isThemeGetter = (func)=>func.isThemeGetter;\nvar getPrefixedClassGroupEntries = (classGroupEntries, prefix)=>{\n    if (!prefix) {\n        return classGroupEntries;\n    }\n    return classGroupEntries.map(([classGroupId, classGroup])=>{\n        const prefixedClassGroup = classGroup.map((classDefinition)=>{\n            if (typeof classDefinition === \"string\") {\n                return prefix + classDefinition;\n            }\n            if (typeof classDefinition === \"object\") {\n                return Object.fromEntries(Object.entries(classDefinition).map(([key, value1])=>[\n                        prefix + key,\n                        value1\n                    ]));\n            }\n            return classDefinition;\n        });\n        return [\n            classGroupId,\n            prefixedClassGroup\n        ];\n    });\n};\nvar createLruCache = (maxCacheSize)=>{\n    if (maxCacheSize < 1) {\n        return {\n            get: ()=>void 0,\n            set: ()=>{}\n        };\n    }\n    let cacheSize = 0;\n    let cache = /* @__PURE__ */ new Map();\n    let previousCache = /* @__PURE__ */ new Map();\n    const update = (key, value1)=>{\n        cache.set(key, value1);\n        cacheSize++;\n        if (cacheSize > maxCacheSize) {\n            cacheSize = 0;\n            previousCache = cache;\n            cache = /* @__PURE__ */ new Map();\n        }\n    };\n    return {\n        get (key) {\n            let value1 = cache.get(key);\n            if (value1 !== void 0) {\n                return value1;\n            }\n            if ((value1 = previousCache.get(key)) !== void 0) {\n                update(key, value1);\n                return value1;\n            }\n        },\n        set (key, value1) {\n            if (cache.has(key)) {\n                cache.set(key, value1);\n            } else {\n                update(key, value1);\n            }\n        }\n    };\n};\nvar IMPORTANT_MODIFIER = \"!\";\nvar createParseClassName = (config)=>{\n    const { separator, experimentalParseClassName } = config;\n    const isSeparatorSingleCharacter = separator.length === 1;\n    const firstSeparatorCharacter = separator[0];\n    const separatorLength = separator.length;\n    const parseClassName = (className)=>{\n        const modifiers = [];\n        let bracketDepth = 0;\n        let modifierStart = 0;\n        let postfixModifierPosition;\n        for(let index = 0; index < className.length; index++){\n            let currentCharacter = className[index];\n            if (bracketDepth === 0) {\n                if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {\n                    modifiers.push(className.slice(modifierStart, index));\n                    modifierStart = index + separatorLength;\n                    continue;\n                }\n                if (currentCharacter === \"/\") {\n                    postfixModifierPosition = index;\n                    continue;\n                }\n            }\n            if (currentCharacter === \"[\") {\n                bracketDepth++;\n            } else if (currentCharacter === \"]\") {\n                bracketDepth--;\n            }\n        }\n        const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);\n        const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);\n        const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;\n        const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;\n        return {\n            modifiers,\n            hasImportantModifier,\n            baseClassName,\n            maybePostfixModifierPosition\n        };\n    };\n    if (experimentalParseClassName) {\n        return (className)=>experimentalParseClassName({\n                className,\n                parseClassName\n            });\n    }\n    return parseClassName;\n};\nvar sortModifiers = (modifiers)=>{\n    if (modifiers.length <= 1) {\n        return modifiers;\n    }\n    const sortedModifiers = [];\n    let unsortedModifiers = [];\n    modifiers.forEach((modifier)=>{\n        const isArbitraryVariant = modifier[0] === \"[\";\n        if (isArbitraryVariant) {\n            sortedModifiers.push(...unsortedModifiers.sort(), modifier);\n            unsortedModifiers = [];\n        } else {\n            unsortedModifiers.push(modifier);\n        }\n    });\n    sortedModifiers.push(...unsortedModifiers.sort());\n    return sortedModifiers;\n};\nvar createConfigUtils = (config)=>({\n        cache: createLruCache(config.cacheSize),\n        parseClassName: createParseClassName(config),\n        ...createClassGroupUtils(config)\n    });\nvar SPLIT_CLASSES_REGEX = /\\s+/;\nvar mergeClassList = (classList, configUtils)=>{\n    const { parseClassName, getClassGroupId, getConflictingClassGroupIds } = configUtils;\n    const classGroupsInConflict = [];\n    const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);\n    let result = \"\";\n    for(let index = classNames.length - 1; index >= 0; index -= 1){\n        const originalClassName = classNames[index];\n        const { modifiers, hasImportantModifier, baseClassName, maybePostfixModifierPosition } = parseClassName(originalClassName);\n        let hasPostfixModifier = Boolean(maybePostfixModifierPosition);\n        let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);\n        if (!classGroupId) {\n            if (!hasPostfixModifier) {\n                result = originalClassName + (result.length > 0 ? \" \" + result : result);\n                continue;\n            }\n            classGroupId = getClassGroupId(baseClassName);\n            if (!classGroupId) {\n                result = originalClassName + (result.length > 0 ? \" \" + result : result);\n                continue;\n            }\n            hasPostfixModifier = false;\n        }\n        const variantModifier = sortModifiers(modifiers).join(\":\");\n        const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;\n        const classId = modifierId + classGroupId;\n        if (classGroupsInConflict.includes(classId)) {\n            continue;\n        }\n        classGroupsInConflict.push(classId);\n        const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);\n        for(let i = 0; i < conflictGroups.length; ++i){\n            const group = conflictGroups[i];\n            classGroupsInConflict.push(modifierId + group);\n        }\n        result = originalClassName + (result.length > 0 ? \" \" + result : result);\n    }\n    return result;\n};\nfunction twJoin() {\n    let index = 0;\n    let argument;\n    let resolvedValue;\n    let string = \"\";\n    while(index < arguments.length){\n        if (argument = arguments[index++]) {\n            if (resolvedValue = toValue(argument)) {\n                string && (string += \" \");\n                string += resolvedValue;\n            }\n        }\n    }\n    return string;\n}\nvar toValue = (mix)=>{\n    if (typeof mix === \"string\") {\n        return mix;\n    }\n    let resolvedValue;\n    let string = \"\";\n    for(let k = 0; k < mix.length; k++){\n        if (mix[k]) {\n            if (resolvedValue = toValue(mix[k])) {\n                string && (string += \" \");\n                string += resolvedValue;\n            }\n        }\n    }\n    return string;\n};\nfunction createTailwindMerge(createConfigFirst, ...createConfigRest) {\n    let configUtils;\n    let cacheGet;\n    let cacheSet;\n    let functionToCall = initTailwindMerge;\n    function initTailwindMerge(classList) {\n        const config = createConfigRest.reduce((previousConfig, createConfigCurrent)=>createConfigCurrent(previousConfig), createConfigFirst());\n        configUtils = createConfigUtils(config);\n        cacheGet = configUtils.cache.get;\n        cacheSet = configUtils.cache.set;\n        functionToCall = tailwindMerge;\n        return tailwindMerge(classList);\n    }\n    function tailwindMerge(classList) {\n        const cachedResult = cacheGet(classList);\n        if (cachedResult) {\n            return cachedResult;\n        }\n        const result = mergeClassList(classList, configUtils);\n        cacheSet(classList, result);\n        return result;\n    }\n    return function callTailwindMerge() {\n        return functionToCall(twJoin.apply(null, arguments));\n    };\n}\nvar fromTheme = (key)=>{\n    const themeGetter = (theme)=>theme[key] || [];\n    themeGetter.isThemeGetter = true;\n    return themeGetter;\n};\nvar arbitraryValueRegex = /^\\[(?:([a-z-]+):)?(.+)\\]$/i;\nvar fractionRegex = /^\\d+\\/\\d+$/;\nvar stringLengths = /* @__PURE__ */ new Set([\n    \"px\",\n    \"full\",\n    \"screen\"\n]);\nvar tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/;\nvar lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/;\nvar colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\\(.+\\)$/;\nvar shadowRegex = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nvar imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/;\nvar isLength = (value1)=>isNumber(value1) || stringLengths.has(value1) || fractionRegex.test(value1);\nvar isArbitraryLength = (value1)=>getIsArbitraryValue(value1, \"length\", isLengthOnly);\nvar isNumber = (value1)=>Boolean(value1) && !Number.isNaN(Number(value1));\nvar isArbitraryNumber = (value1)=>getIsArbitraryValue(value1, \"number\", isNumber);\nvar isInteger = (value1)=>Boolean(value1) && Number.isInteger(Number(value1));\nvar isPercent = (value1)=>value1.endsWith(\"%\") && isNumber(value1.slice(0, -1));\nvar isArbitraryValue = (value1)=>arbitraryValueRegex.test(value1);\nvar isTshirtSize = (value1)=>tshirtUnitRegex.test(value1);\nvar sizeLabels = /* @__PURE__ */ new Set([\n    \"length\",\n    \"size\",\n    \"percentage\"\n]);\nvar isArbitrarySize = (value1)=>getIsArbitraryValue(value1, sizeLabels, isNever);\nvar isArbitraryPosition = (value1)=>getIsArbitraryValue(value1, \"position\", isNever);\nvar imageLabels = /* @__PURE__ */ new Set([\n    \"image\",\n    \"url\"\n]);\nvar isArbitraryImage = (value1)=>getIsArbitraryValue(value1, imageLabels, isImage);\nvar isArbitraryShadow = (value1)=>getIsArbitraryValue(value1, \"\", isShadow);\nvar isAny = ()=>true;\nvar getIsArbitraryValue = (value1, label, testValue)=>{\n    const result = arbitraryValueRegex.exec(value1);\n    if (result) {\n        if (result[1]) {\n            return typeof label === \"string\" ? result[1] === label : label.has(result[1]);\n        }\n        return testValue(result[2]);\n    }\n    return false;\n};\nvar isLengthOnly = (value1)=>// `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.\n    // For example, `hsl(0 0% 0%)` would be classified as a length without this check.\n    // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.\n    lengthUnitRegex.test(value1) && !colorFunctionRegex.test(value1);\nvar isNever = ()=>false;\nvar isShadow = (value1)=>shadowRegex.test(value1);\nvar isImage = (value1)=>imageRegex.test(value1);\nvar getDefaultConfig = ()=>{\n    const colors = fromTheme(\"colors\");\n    const spacing = fromTheme(\"spacing\");\n    const blur = fromTheme(\"blur\");\n    const brightness = fromTheme(\"brightness\");\n    const borderColor = fromTheme(\"borderColor\");\n    const borderRadius = fromTheme(\"borderRadius\");\n    const borderSpacing = fromTheme(\"borderSpacing\");\n    const borderWidth = fromTheme(\"borderWidth\");\n    const contrast = fromTheme(\"contrast\");\n    const grayscale = fromTheme(\"grayscale\");\n    const hueRotate = fromTheme(\"hueRotate\");\n    const invert = fromTheme(\"invert\");\n    const gap = fromTheme(\"gap\");\n    const gradientColorStops = fromTheme(\"gradientColorStops\");\n    const gradientColorStopPositions = fromTheme(\"gradientColorStopPositions\");\n    const inset = fromTheme(\"inset\");\n    const margin = fromTheme(\"margin\");\n    const opacity = fromTheme(\"opacity\");\n    const padding = fromTheme(\"padding\");\n    const saturate = fromTheme(\"saturate\");\n    const scale = fromTheme(\"scale\");\n    const sepia = fromTheme(\"sepia\");\n    const skew = fromTheme(\"skew\");\n    const space = fromTheme(\"space\");\n    const translate = fromTheme(\"translate\");\n    const getOverscroll = ()=>[\n            \"auto\",\n            \"contain\",\n            \"none\"\n        ];\n    const getOverflow = ()=>[\n            \"auto\",\n            \"hidden\",\n            \"clip\",\n            \"visible\",\n            \"scroll\"\n        ];\n    const getSpacingWithAutoAndArbitrary = ()=>[\n            \"auto\",\n            isArbitraryValue,\n            spacing\n        ];\n    const getSpacingWithArbitrary = ()=>[\n            isArbitraryValue,\n            spacing\n        ];\n    const getLengthWithEmptyAndArbitrary = ()=>[\n            \"\",\n            isLength,\n            isArbitraryLength\n        ];\n    const getNumberWithAutoAndArbitrary = ()=>[\n            \"auto\",\n            isNumber,\n            isArbitraryValue\n        ];\n    const getPositions = ()=>[\n            \"bottom\",\n            \"center\",\n            \"left\",\n            \"left-bottom\",\n            \"left-top\",\n            \"right\",\n            \"right-bottom\",\n            \"right-top\",\n            \"top\"\n        ];\n    const getLineStyles = ()=>[\n            \"solid\",\n            \"dashed\",\n            \"dotted\",\n            \"double\",\n            \"none\"\n        ];\n    const getBlendModes = ()=>[\n            \"normal\",\n            \"multiply\",\n            \"screen\",\n            \"overlay\",\n            \"darken\",\n            \"lighten\",\n            \"color-dodge\",\n            \"color-burn\",\n            \"hard-light\",\n            \"soft-light\",\n            \"difference\",\n            \"exclusion\",\n            \"hue\",\n            \"saturation\",\n            \"color\",\n            \"luminosity\"\n        ];\n    const getAlign = ()=>[\n            \"start\",\n            \"end\",\n            \"center\",\n            \"between\",\n            \"around\",\n            \"evenly\",\n            \"stretch\"\n        ];\n    const getZeroAndEmpty = ()=>[\n            \"\",\n            \"0\",\n            isArbitraryValue\n        ];\n    const getBreaks = ()=>[\n            \"auto\",\n            \"avoid\",\n            \"all\",\n            \"avoid-page\",\n            \"page\",\n            \"left\",\n            \"right\",\n            \"column\"\n        ];\n    const getNumberAndArbitrary = ()=>[\n            isNumber,\n            isArbitraryValue\n        ];\n    return {\n        cacheSize: 500,\n        separator: \":\",\n        theme: {\n            colors: [\n                isAny\n            ],\n            spacing: [\n                isLength,\n                isArbitraryLength\n            ],\n            blur: [\n                \"none\",\n                \"\",\n                isTshirtSize,\n                isArbitraryValue\n            ],\n            brightness: getNumberAndArbitrary(),\n            borderColor: [\n                colors\n            ],\n            borderRadius: [\n                \"none\",\n                \"\",\n                \"full\",\n                isTshirtSize,\n                isArbitraryValue\n            ],\n            borderSpacing: getSpacingWithArbitrary(),\n            borderWidth: getLengthWithEmptyAndArbitrary(),\n            contrast: getNumberAndArbitrary(),\n            grayscale: getZeroAndEmpty(),\n            hueRotate: getNumberAndArbitrary(),\n            invert: getZeroAndEmpty(),\n            gap: getSpacingWithArbitrary(),\n            gradientColorStops: [\n                colors\n            ],\n            gradientColorStopPositions: [\n                isPercent,\n                isArbitraryLength\n            ],\n            inset: getSpacingWithAutoAndArbitrary(),\n            margin: getSpacingWithAutoAndArbitrary(),\n            opacity: getNumberAndArbitrary(),\n            padding: getSpacingWithArbitrary(),\n            saturate: getNumberAndArbitrary(),\n            scale: getNumberAndArbitrary(),\n            sepia: getZeroAndEmpty(),\n            skew: getNumberAndArbitrary(),\n            space: getSpacingWithArbitrary(),\n            translate: getSpacingWithArbitrary()\n        },\n        classGroups: {\n            // Layout\n            /**\n       * Aspect Ratio\n       * @see https://tailwindcss.com/docs/aspect-ratio\n       */ aspect: [\n                {\n                    aspect: [\n                        \"auto\",\n                        \"square\",\n                        \"video\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Container\n       * @see https://tailwindcss.com/docs/container\n       */ container: [\n                \"container\"\n            ],\n            /**\n       * Columns\n       * @see https://tailwindcss.com/docs/columns\n       */ columns: [\n                {\n                    columns: [\n                        isTshirtSize\n                    ]\n                }\n            ],\n            /**\n       * Break After\n       * @see https://tailwindcss.com/docs/break-after\n       */ \"break-after\": [\n                {\n                    \"break-after\": getBreaks()\n                }\n            ],\n            /**\n       * Break Before\n       * @see https://tailwindcss.com/docs/break-before\n       */ \"break-before\": [\n                {\n                    \"break-before\": getBreaks()\n                }\n            ],\n            /**\n       * Break Inside\n       * @see https://tailwindcss.com/docs/break-inside\n       */ \"break-inside\": [\n                {\n                    \"break-inside\": [\n                        \"auto\",\n                        \"avoid\",\n                        \"avoid-page\",\n                        \"avoid-column\"\n                    ]\n                }\n            ],\n            /**\n       * Box Decoration Break\n       * @see https://tailwindcss.com/docs/box-decoration-break\n       */ \"box-decoration\": [\n                {\n                    \"box-decoration\": [\n                        \"slice\",\n                        \"clone\"\n                    ]\n                }\n            ],\n            /**\n       * Box Sizing\n       * @see https://tailwindcss.com/docs/box-sizing\n       */ box: [\n                {\n                    box: [\n                        \"border\",\n                        \"content\"\n                    ]\n                }\n            ],\n            /**\n       * Display\n       * @see https://tailwindcss.com/docs/display\n       */ display: [\n                \"block\",\n                \"inline-block\",\n                \"inline\",\n                \"flex\",\n                \"inline-flex\",\n                \"table\",\n                \"inline-table\",\n                \"table-caption\",\n                \"table-cell\",\n                \"table-column\",\n                \"table-column-group\",\n                \"table-footer-group\",\n                \"table-header-group\",\n                \"table-row-group\",\n                \"table-row\",\n                \"flow-root\",\n                \"grid\",\n                \"inline-grid\",\n                \"contents\",\n                \"list-item\",\n                \"hidden\"\n            ],\n            /**\n       * Floats\n       * @see https://tailwindcss.com/docs/float\n       */ float: [\n                {\n                    float: [\n                        \"right\",\n                        \"left\",\n                        \"none\",\n                        \"start\",\n                        \"end\"\n                    ]\n                }\n            ],\n            /**\n       * Clear\n       * @see https://tailwindcss.com/docs/clear\n       */ clear: [\n                {\n                    clear: [\n                        \"left\",\n                        \"right\",\n                        \"both\",\n                        \"none\",\n                        \"start\",\n                        \"end\"\n                    ]\n                }\n            ],\n            /**\n       * Isolation\n       * @see https://tailwindcss.com/docs/isolation\n       */ isolation: [\n                \"isolate\",\n                \"isolation-auto\"\n            ],\n            /**\n       * Object Fit\n       * @see https://tailwindcss.com/docs/object-fit\n       */ \"object-fit\": [\n                {\n                    object: [\n                        \"contain\",\n                        \"cover\",\n                        \"fill\",\n                        \"none\",\n                        \"scale-down\"\n                    ]\n                }\n            ],\n            /**\n       * Object Position\n       * @see https://tailwindcss.com/docs/object-position\n       */ \"object-position\": [\n                {\n                    object: [\n                        ...getPositions(),\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Overflow\n       * @see https://tailwindcss.com/docs/overflow\n       */ overflow: [\n                {\n                    overflow: getOverflow()\n                }\n            ],\n            /**\n       * Overflow X\n       * @see https://tailwindcss.com/docs/overflow\n       */ \"overflow-x\": [\n                {\n                    \"overflow-x\": getOverflow()\n                }\n            ],\n            /**\n       * Overflow Y\n       * @see https://tailwindcss.com/docs/overflow\n       */ \"overflow-y\": [\n                {\n                    \"overflow-y\": getOverflow()\n                }\n            ],\n            /**\n       * Overscroll Behavior\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */ overscroll: [\n                {\n                    overscroll: getOverscroll()\n                }\n            ],\n            /**\n       * Overscroll Behavior X\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */ \"overscroll-x\": [\n                {\n                    \"overscroll-x\": getOverscroll()\n                }\n            ],\n            /**\n       * Overscroll Behavior Y\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */ \"overscroll-y\": [\n                {\n                    \"overscroll-y\": getOverscroll()\n                }\n            ],\n            /**\n       * Position\n       * @see https://tailwindcss.com/docs/position\n       */ position: [\n                \"static\",\n                \"fixed\",\n                \"absolute\",\n                \"relative\",\n                \"sticky\"\n            ],\n            /**\n       * Top / Right / Bottom / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ inset: [\n                {\n                    inset: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Right / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ \"inset-x\": [\n                {\n                    \"inset-x\": [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Top / Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ \"inset-y\": [\n                {\n                    \"inset-y\": [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Start\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ start: [\n                {\n                    start: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * End\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ end: [\n                {\n                    end: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Top\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ top: [\n                {\n                    top: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Right\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ right: [\n                {\n                    right: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ bottom: [\n                {\n                    bottom: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */ left: [\n                {\n                    left: [\n                        inset\n                    ]\n                }\n            ],\n            /**\n       * Visibility\n       * @see https://tailwindcss.com/docs/visibility\n       */ visibility: [\n                \"visible\",\n                \"invisible\",\n                \"collapse\"\n            ],\n            /**\n       * Z-Index\n       * @see https://tailwindcss.com/docs/z-index\n       */ z: [\n                {\n                    z: [\n                        \"auto\",\n                        isInteger,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Flexbox and Grid\n            /**\n       * Flex Basis\n       * @see https://tailwindcss.com/docs/flex-basis\n       */ basis: [\n                {\n                    basis: getSpacingWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Flex Direction\n       * @see https://tailwindcss.com/docs/flex-direction\n       */ \"flex-direction\": [\n                {\n                    flex: [\n                        \"row\",\n                        \"row-reverse\",\n                        \"col\",\n                        \"col-reverse\"\n                    ]\n                }\n            ],\n            /**\n       * Flex Wrap\n       * @see https://tailwindcss.com/docs/flex-wrap\n       */ \"flex-wrap\": [\n                {\n                    flex: [\n                        \"wrap\",\n                        \"wrap-reverse\",\n                        \"nowrap\"\n                    ]\n                }\n            ],\n            /**\n       * Flex\n       * @see https://tailwindcss.com/docs/flex\n       */ flex: [\n                {\n                    flex: [\n                        \"1\",\n                        \"auto\",\n                        \"initial\",\n                        \"none\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Flex Grow\n       * @see https://tailwindcss.com/docs/flex-grow\n       */ grow: [\n                {\n                    grow: getZeroAndEmpty()\n                }\n            ],\n            /**\n       * Flex Shrink\n       * @see https://tailwindcss.com/docs/flex-shrink\n       */ shrink: [\n                {\n                    shrink: getZeroAndEmpty()\n                }\n            ],\n            /**\n       * Order\n       * @see https://tailwindcss.com/docs/order\n       */ order: [\n                {\n                    order: [\n                        \"first\",\n                        \"last\",\n                        \"none\",\n                        isInteger,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Template Columns\n       * @see https://tailwindcss.com/docs/grid-template-columns\n       */ \"grid-cols\": [\n                {\n                    \"grid-cols\": [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Grid Column Start / End\n       * @see https://tailwindcss.com/docs/grid-column\n       */ \"col-start-end\": [\n                {\n                    col: [\n                        \"auto\",\n                        {\n                            span: [\n                                \"full\",\n                                isInteger,\n                                isArbitraryValue\n                            ]\n                        },\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Column Start\n       * @see https://tailwindcss.com/docs/grid-column\n       */ \"col-start\": [\n                {\n                    \"col-start\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Column End\n       * @see https://tailwindcss.com/docs/grid-column\n       */ \"col-end\": [\n                {\n                    \"col-end\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Template Rows\n       * @see https://tailwindcss.com/docs/grid-template-rows\n       */ \"grid-rows\": [\n                {\n                    \"grid-rows\": [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Grid Row Start / End\n       * @see https://tailwindcss.com/docs/grid-row\n       */ \"row-start-end\": [\n                {\n                    row: [\n                        \"auto\",\n                        {\n                            span: [\n                                isInteger,\n                                isArbitraryValue\n                            ]\n                        },\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Row Start\n       * @see https://tailwindcss.com/docs/grid-row\n       */ \"row-start\": [\n                {\n                    \"row-start\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Row End\n       * @see https://tailwindcss.com/docs/grid-row\n       */ \"row-end\": [\n                {\n                    \"row-end\": getNumberWithAutoAndArbitrary()\n                }\n            ],\n            /**\n       * Grid Auto Flow\n       * @see https://tailwindcss.com/docs/grid-auto-flow\n       */ \"grid-flow\": [\n                {\n                    \"grid-flow\": [\n                        \"row\",\n                        \"col\",\n                        \"dense\",\n                        \"row-dense\",\n                        \"col-dense\"\n                    ]\n                }\n            ],\n            /**\n       * Grid Auto Columns\n       * @see https://tailwindcss.com/docs/grid-auto-columns\n       */ \"auto-cols\": [\n                {\n                    \"auto-cols\": [\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fr\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grid Auto Rows\n       * @see https://tailwindcss.com/docs/grid-auto-rows\n       */ \"auto-rows\": [\n                {\n                    \"auto-rows\": [\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fr\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Gap\n       * @see https://tailwindcss.com/docs/gap\n       */ gap: [\n                {\n                    gap: [\n                        gap\n                    ]\n                }\n            ],\n            /**\n       * Gap X\n       * @see https://tailwindcss.com/docs/gap\n       */ \"gap-x\": [\n                {\n                    \"gap-x\": [\n                        gap\n                    ]\n                }\n            ],\n            /**\n       * Gap Y\n       * @see https://tailwindcss.com/docs/gap\n       */ \"gap-y\": [\n                {\n                    \"gap-y\": [\n                        gap\n                    ]\n                }\n            ],\n            /**\n       * Justify Content\n       * @see https://tailwindcss.com/docs/justify-content\n       */ \"justify-content\": [\n                {\n                    justify: [\n                        \"normal\",\n                        ...getAlign()\n                    ]\n                }\n            ],\n            /**\n       * Justify Items\n       * @see https://tailwindcss.com/docs/justify-items\n       */ \"justify-items\": [\n                {\n                    \"justify-items\": [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Justify Self\n       * @see https://tailwindcss.com/docs/justify-self\n       */ \"justify-self\": [\n                {\n                    \"justify-self\": [\n                        \"auto\",\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Align Content\n       * @see https://tailwindcss.com/docs/align-content\n       */ \"align-content\": [\n                {\n                    content: [\n                        \"normal\",\n                        ...getAlign(),\n                        \"baseline\"\n                    ]\n                }\n            ],\n            /**\n       * Align Items\n       * @see https://tailwindcss.com/docs/align-items\n       */ \"align-items\": [\n                {\n                    items: [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"baseline\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Align Self\n       * @see https://tailwindcss.com/docs/align-self\n       */ \"align-self\": [\n                {\n                    self: [\n                        \"auto\",\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\",\n                        \"baseline\"\n                    ]\n                }\n            ],\n            /**\n       * Place Content\n       * @see https://tailwindcss.com/docs/place-content\n       */ \"place-content\": [\n                {\n                    \"place-content\": [\n                        ...getAlign(),\n                        \"baseline\"\n                    ]\n                }\n            ],\n            /**\n       * Place Items\n       * @see https://tailwindcss.com/docs/place-items\n       */ \"place-items\": [\n                {\n                    \"place-items\": [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"baseline\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            /**\n       * Place Self\n       * @see https://tailwindcss.com/docs/place-self\n       */ \"place-self\": [\n                {\n                    \"place-self\": [\n                        \"auto\",\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"stretch\"\n                    ]\n                }\n            ],\n            // Spacing\n            /**\n       * Padding\n       * @see https://tailwindcss.com/docs/padding\n       */ p: [\n                {\n                    p: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding X\n       * @see https://tailwindcss.com/docs/padding\n       */ px: [\n                {\n                    px: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Y\n       * @see https://tailwindcss.com/docs/padding\n       */ py: [\n                {\n                    py: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Start\n       * @see https://tailwindcss.com/docs/padding\n       */ ps: [\n                {\n                    ps: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding End\n       * @see https://tailwindcss.com/docs/padding\n       */ pe: [\n                {\n                    pe: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Top\n       * @see https://tailwindcss.com/docs/padding\n       */ pt: [\n                {\n                    pt: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Right\n       * @see https://tailwindcss.com/docs/padding\n       */ pr: [\n                {\n                    pr: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Bottom\n       * @see https://tailwindcss.com/docs/padding\n       */ pb: [\n                {\n                    pb: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Padding Left\n       * @see https://tailwindcss.com/docs/padding\n       */ pl: [\n                {\n                    pl: [\n                        padding\n                    ]\n                }\n            ],\n            /**\n       * Margin\n       * @see https://tailwindcss.com/docs/margin\n       */ m: [\n                {\n                    m: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin X\n       * @see https://tailwindcss.com/docs/margin\n       */ mx: [\n                {\n                    mx: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Y\n       * @see https://tailwindcss.com/docs/margin\n       */ my: [\n                {\n                    my: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Start\n       * @see https://tailwindcss.com/docs/margin\n       */ ms: [\n                {\n                    ms: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin End\n       * @see https://tailwindcss.com/docs/margin\n       */ me: [\n                {\n                    me: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Top\n       * @see https://tailwindcss.com/docs/margin\n       */ mt: [\n                {\n                    mt: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Right\n       * @see https://tailwindcss.com/docs/margin\n       */ mr: [\n                {\n                    mr: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Bottom\n       * @see https://tailwindcss.com/docs/margin\n       */ mb: [\n                {\n                    mb: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Margin Left\n       * @see https://tailwindcss.com/docs/margin\n       */ ml: [\n                {\n                    ml: [\n                        margin\n                    ]\n                }\n            ],\n            /**\n       * Space Between X\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-x\": [\n                {\n                    \"space-x\": [\n                        space\n                    ]\n                }\n            ],\n            /**\n       * Space Between X Reverse\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-x-reverse\": [\n                \"space-x-reverse\"\n            ],\n            /**\n       * Space Between Y\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-y\": [\n                {\n                    \"space-y\": [\n                        space\n                    ]\n                }\n            ],\n            /**\n       * Space Between Y Reverse\n       * @see https://tailwindcss.com/docs/space\n       */ \"space-y-reverse\": [\n                \"space-y-reverse\"\n            ],\n            // Sizing\n            /**\n       * Width\n       * @see https://tailwindcss.com/docs/width\n       */ w: [\n                {\n                    w: [\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svw\",\n                        \"lvw\",\n                        \"dvw\",\n                        isArbitraryValue,\n                        spacing\n                    ]\n                }\n            ],\n            /**\n       * Min-Width\n       * @see https://tailwindcss.com/docs/min-width\n       */ \"min-w\": [\n                {\n                    \"min-w\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"min\",\n                        \"max\",\n                        \"fit\"\n                    ]\n                }\n            ],\n            /**\n       * Max-Width\n       * @see https://tailwindcss.com/docs/max-width\n       */ \"max-w\": [\n                {\n                    \"max-w\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"none\",\n                        \"full\",\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"prose\",\n                        {\n                            screen: [\n                                isTshirtSize\n                            ]\n                        },\n                        isTshirtSize\n                    ]\n                }\n            ],\n            /**\n       * Height\n       * @see https://tailwindcss.com/docs/height\n       */ h: [\n                {\n                    h: [\n                        isArbitraryValue,\n                        spacing,\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svh\",\n                        \"lvh\",\n                        \"dvh\"\n                    ]\n                }\n            ],\n            /**\n       * Min-Height\n       * @see https://tailwindcss.com/docs/min-height\n       */ \"min-h\": [\n                {\n                    \"min-h\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svh\",\n                        \"lvh\",\n                        \"dvh\"\n                    ]\n                }\n            ],\n            /**\n       * Max-Height\n       * @see https://tailwindcss.com/docs/max-height\n       */ \"max-h\": [\n                {\n                    \"max-h\": [\n                        isArbitraryValue,\n                        spacing,\n                        \"min\",\n                        \"max\",\n                        \"fit\",\n                        \"svh\",\n                        \"lvh\",\n                        \"dvh\"\n                    ]\n                }\n            ],\n            /**\n       * Size\n       * @see https://tailwindcss.com/docs/size\n       */ size: [\n                {\n                    size: [\n                        isArbitraryValue,\n                        spacing,\n                        \"auto\",\n                        \"min\",\n                        \"max\",\n                        \"fit\"\n                    ]\n                }\n            ],\n            // Typography\n            /**\n       * Font Size\n       * @see https://tailwindcss.com/docs/font-size\n       */ \"font-size\": [\n                {\n                    text: [\n                        \"base\",\n                        isTshirtSize,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Font Smoothing\n       * @see https://tailwindcss.com/docs/font-smoothing\n       */ \"font-smoothing\": [\n                \"antialiased\",\n                \"subpixel-antialiased\"\n            ],\n            /**\n       * Font Style\n       * @see https://tailwindcss.com/docs/font-style\n       */ \"font-style\": [\n                \"italic\",\n                \"not-italic\"\n            ],\n            /**\n       * Font Weight\n       * @see https://tailwindcss.com/docs/font-weight\n       */ \"font-weight\": [\n                {\n                    font: [\n                        \"thin\",\n                        \"extralight\",\n                        \"light\",\n                        \"normal\",\n                        \"medium\",\n                        \"semibold\",\n                        \"bold\",\n                        \"extrabold\",\n                        \"black\",\n                        isArbitraryNumber\n                    ]\n                }\n            ],\n            /**\n       * Font Family\n       * @see https://tailwindcss.com/docs/font-family\n       */ \"font-family\": [\n                {\n                    font: [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-normal\": [\n                \"normal-nums\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-ordinal\": [\n                \"ordinal\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-slashed-zero\": [\n                \"slashed-zero\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-figure\": [\n                \"lining-nums\",\n                \"oldstyle-nums\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-spacing\": [\n                \"proportional-nums\",\n                \"tabular-nums\"\n            ],\n            /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */ \"fvn-fraction\": [\n                \"diagonal-fractions\",\n                \"stacked-fractions\"\n            ],\n            /**\n       * Letter Spacing\n       * @see https://tailwindcss.com/docs/letter-spacing\n       */ tracking: [\n                {\n                    tracking: [\n                        \"tighter\",\n                        \"tight\",\n                        \"normal\",\n                        \"wide\",\n                        \"wider\",\n                        \"widest\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Line Clamp\n       * @see https://tailwindcss.com/docs/line-clamp\n       */ \"line-clamp\": [\n                {\n                    \"line-clamp\": [\n                        \"none\",\n                        isNumber,\n                        isArbitraryNumber\n                    ]\n                }\n            ],\n            /**\n       * Line Height\n       * @see https://tailwindcss.com/docs/line-height\n       */ leading: [\n                {\n                    leading: [\n                        \"none\",\n                        \"tight\",\n                        \"snug\",\n                        \"normal\",\n                        \"relaxed\",\n                        \"loose\",\n                        isLength,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * List Style Image\n       * @see https://tailwindcss.com/docs/list-style-image\n       */ \"list-image\": [\n                {\n                    \"list-image\": [\n                        \"none\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * List Style Type\n       * @see https://tailwindcss.com/docs/list-style-type\n       */ \"list-style-type\": [\n                {\n                    list: [\n                        \"none\",\n                        \"disc\",\n                        \"decimal\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * List Style Position\n       * @see https://tailwindcss.com/docs/list-style-position\n       */ \"list-style-position\": [\n                {\n                    list: [\n                        \"inside\",\n                        \"outside\"\n                    ]\n                }\n            ],\n            /**\n       * Placeholder Color\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/placeholder-color\n       */ \"placeholder-color\": [\n                {\n                    placeholder: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Placeholder Opacity\n       * @see https://tailwindcss.com/docs/placeholder-opacity\n       */ \"placeholder-opacity\": [\n                {\n                    \"placeholder-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Text Alignment\n       * @see https://tailwindcss.com/docs/text-align\n       */ \"text-alignment\": [\n                {\n                    text: [\n                        \"left\",\n                        \"center\",\n                        \"right\",\n                        \"justify\",\n                        \"start\",\n                        \"end\"\n                    ]\n                }\n            ],\n            /**\n       * Text Color\n       * @see https://tailwindcss.com/docs/text-color\n       */ \"text-color\": [\n                {\n                    text: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Text Opacity\n       * @see https://tailwindcss.com/docs/text-opacity\n       */ \"text-opacity\": [\n                {\n                    \"text-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Text Decoration\n       * @see https://tailwindcss.com/docs/text-decoration\n       */ \"text-decoration\": [\n                \"underline\",\n                \"overline\",\n                \"line-through\",\n                \"no-underline\"\n            ],\n            /**\n       * Text Decoration Style\n       * @see https://tailwindcss.com/docs/text-decoration-style\n       */ \"text-decoration-style\": [\n                {\n                    decoration: [\n                        ...getLineStyles(),\n                        \"wavy\"\n                    ]\n                }\n            ],\n            /**\n       * Text Decoration Thickness\n       * @see https://tailwindcss.com/docs/text-decoration-thickness\n       */ \"text-decoration-thickness\": [\n                {\n                    decoration: [\n                        \"auto\",\n                        \"from-font\",\n                        isLength,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Text Underline Offset\n       * @see https://tailwindcss.com/docs/text-underline-offset\n       */ \"underline-offset\": [\n                {\n                    \"underline-offset\": [\n                        \"auto\",\n                        isLength,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Text Decoration Color\n       * @see https://tailwindcss.com/docs/text-decoration-color\n       */ \"text-decoration-color\": [\n                {\n                    decoration: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Text Transform\n       * @see https://tailwindcss.com/docs/text-transform\n       */ \"text-transform\": [\n                \"uppercase\",\n                \"lowercase\",\n                \"capitalize\",\n                \"normal-case\"\n            ],\n            /**\n       * Text Overflow\n       * @see https://tailwindcss.com/docs/text-overflow\n       */ \"text-overflow\": [\n                \"truncate\",\n                \"text-ellipsis\",\n                \"text-clip\"\n            ],\n            /**\n       * Text Wrap\n       * @see https://tailwindcss.com/docs/text-wrap\n       */ \"text-wrap\": [\n                {\n                    text: [\n                        \"wrap\",\n                        \"nowrap\",\n                        \"balance\",\n                        \"pretty\"\n                    ]\n                }\n            ],\n            /**\n       * Text Indent\n       * @see https://tailwindcss.com/docs/text-indent\n       */ indent: [\n                {\n                    indent: getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Vertical Alignment\n       * @see https://tailwindcss.com/docs/vertical-align\n       */ \"vertical-align\": [\n                {\n                    align: [\n                        \"baseline\",\n                        \"top\",\n                        \"middle\",\n                        \"bottom\",\n                        \"text-top\",\n                        \"text-bottom\",\n                        \"sub\",\n                        \"super\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Whitespace\n       * @see https://tailwindcss.com/docs/whitespace\n       */ whitespace: [\n                {\n                    whitespace: [\n                        \"normal\",\n                        \"nowrap\",\n                        \"pre\",\n                        \"pre-line\",\n                        \"pre-wrap\",\n                        \"break-spaces\"\n                    ]\n                }\n            ],\n            /**\n       * Word Break\n       * @see https://tailwindcss.com/docs/word-break\n       */ break: [\n                {\n                    break: [\n                        \"normal\",\n                        \"words\",\n                        \"all\",\n                        \"keep\"\n                    ]\n                }\n            ],\n            /**\n       * Hyphens\n       * @see https://tailwindcss.com/docs/hyphens\n       */ hyphens: [\n                {\n                    hyphens: [\n                        \"none\",\n                        \"manual\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Content\n       * @see https://tailwindcss.com/docs/content\n       */ content: [\n                {\n                    content: [\n                        \"none\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Backgrounds\n            /**\n       * Background Attachment\n       * @see https://tailwindcss.com/docs/background-attachment\n       */ \"bg-attachment\": [\n                {\n                    bg: [\n                        \"fixed\",\n                        \"local\",\n                        \"scroll\"\n                    ]\n                }\n            ],\n            /**\n       * Background Clip\n       * @see https://tailwindcss.com/docs/background-clip\n       */ \"bg-clip\": [\n                {\n                    \"bg-clip\": [\n                        \"border\",\n                        \"padding\",\n                        \"content\",\n                        \"text\"\n                    ]\n                }\n            ],\n            /**\n       * Background Opacity\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/background-opacity\n       */ \"bg-opacity\": [\n                {\n                    \"bg-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Background Origin\n       * @see https://tailwindcss.com/docs/background-origin\n       */ \"bg-origin\": [\n                {\n                    \"bg-origin\": [\n                        \"border\",\n                        \"padding\",\n                        \"content\"\n                    ]\n                }\n            ],\n            /**\n       * Background Position\n       * @see https://tailwindcss.com/docs/background-position\n       */ \"bg-position\": [\n                {\n                    bg: [\n                        ...getPositions(),\n                        isArbitraryPosition\n                    ]\n                }\n            ],\n            /**\n       * Background Repeat\n       * @see https://tailwindcss.com/docs/background-repeat\n       */ \"bg-repeat\": [\n                {\n                    bg: [\n                        \"no-repeat\",\n                        {\n                            repeat: [\n                                \"\",\n                                \"x\",\n                                \"y\",\n                                \"round\",\n                                \"space\"\n                            ]\n                        }\n                    ]\n                }\n            ],\n            /**\n       * Background Size\n       * @see https://tailwindcss.com/docs/background-size\n       */ \"bg-size\": [\n                {\n                    bg: [\n                        \"auto\",\n                        \"cover\",\n                        \"contain\",\n                        isArbitrarySize\n                    ]\n                }\n            ],\n            /**\n       * Background Image\n       * @see https://tailwindcss.com/docs/background-image\n       */ \"bg-image\": [\n                {\n                    bg: [\n                        \"none\",\n                        {\n                            \"gradient-to\": [\n                                \"t\",\n                                \"tr\",\n                                \"r\",\n                                \"br\",\n                                \"b\",\n                                \"bl\",\n                                \"l\",\n                                \"tl\"\n                            ]\n                        },\n                        isArbitraryImage\n                    ]\n                }\n            ],\n            /**\n       * Background Color\n       * @see https://tailwindcss.com/docs/background-color\n       */ \"bg-color\": [\n                {\n                    bg: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops From Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-from-pos\": [\n                {\n                    from: [\n                        gradientColorStopPositions\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops Via Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-via-pos\": [\n                {\n                    via: [\n                        gradientColorStopPositions\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops To Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-to-pos\": [\n                {\n                    to: [\n                        gradientColorStopPositions\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops From\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-from\": [\n                {\n                    from: [\n                        gradientColorStops\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops Via\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-via\": [\n                {\n                    via: [\n                        gradientColorStops\n                    ]\n                }\n            ],\n            /**\n       * Gradient Color Stops To\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */ \"gradient-to\": [\n                {\n                    to: [\n                        gradientColorStops\n                    ]\n                }\n            ],\n            // Borders\n            /**\n       * Border Radius\n       * @see https://tailwindcss.com/docs/border-radius\n       */ rounded: [\n                {\n                    rounded: [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-s\": [\n                {\n                    \"rounded-s\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius End\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-e\": [\n                {\n                    \"rounded-e\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Top\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-t\": [\n                {\n                    \"rounded-t\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-r\": [\n                {\n                    \"rounded-r\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Bottom\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-b\": [\n                {\n                    \"rounded-b\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-l\": [\n                {\n                    \"rounded-l\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Start Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-ss\": [\n                {\n                    \"rounded-ss\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Start End\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-se\": [\n                {\n                    \"rounded-se\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius End End\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-ee\": [\n                {\n                    \"rounded-ee\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius End Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-es\": [\n                {\n                    \"rounded-es\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Top Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-tl\": [\n                {\n                    \"rounded-tl\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Top Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-tr\": [\n                {\n                    \"rounded-tr\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Bottom Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-br\": [\n                {\n                    \"rounded-br\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Radius Bottom Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */ \"rounded-bl\": [\n                {\n                    \"rounded-bl\": [\n                        borderRadius\n                    ]\n                }\n            ],\n            /**\n       * Border Width\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w\": [\n                {\n                    border: [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width X\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-x\": [\n                {\n                    \"border-x\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Y\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-y\": [\n                {\n                    \"border-y\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Start\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-s\": [\n                {\n                    \"border-s\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width End\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-e\": [\n                {\n                    \"border-e\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Top\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-t\": [\n                {\n                    \"border-t\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Right\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-r\": [\n                {\n                    \"border-r\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Bottom\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-b\": [\n                {\n                    \"border-b\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Width Left\n       * @see https://tailwindcss.com/docs/border-width\n       */ \"border-w-l\": [\n                {\n                    \"border-l\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Border Opacity\n       * @see https://tailwindcss.com/docs/border-opacity\n       */ \"border-opacity\": [\n                {\n                    \"border-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Border Style\n       * @see https://tailwindcss.com/docs/border-style\n       */ \"border-style\": [\n                {\n                    border: [\n                        ...getLineStyles(),\n                        \"hidden\"\n                    ]\n                }\n            ],\n            /**\n       * Divide Width X\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-x\": [\n                {\n                    \"divide-x\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Divide Width X Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-x-reverse\": [\n                \"divide-x-reverse\"\n            ],\n            /**\n       * Divide Width Y\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-y\": [\n                {\n                    \"divide-y\": [\n                        borderWidth\n                    ]\n                }\n            ],\n            /**\n       * Divide Width Y Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */ \"divide-y-reverse\": [\n                \"divide-y-reverse\"\n            ],\n            /**\n       * Divide Opacity\n       * @see https://tailwindcss.com/docs/divide-opacity\n       */ \"divide-opacity\": [\n                {\n                    \"divide-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Divide Style\n       * @see https://tailwindcss.com/docs/divide-style\n       */ \"divide-style\": [\n                {\n                    divide: getLineStyles()\n                }\n            ],\n            /**\n       * Border Color\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color\": [\n                {\n                    border: [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color X\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-x\": [\n                {\n                    \"border-x\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Y\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-y\": [\n                {\n                    \"border-y\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color S\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-s\": [\n                {\n                    \"border-s\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color E\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-e\": [\n                {\n                    \"border-e\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Top\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-t\": [\n                {\n                    \"border-t\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Right\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-r\": [\n                {\n                    \"border-r\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Bottom\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-b\": [\n                {\n                    \"border-b\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Border Color Left\n       * @see https://tailwindcss.com/docs/border-color\n       */ \"border-color-l\": [\n                {\n                    \"border-l\": [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Divide Color\n       * @see https://tailwindcss.com/docs/divide-color\n       */ \"divide-color\": [\n                {\n                    divide: [\n                        borderColor\n                    ]\n                }\n            ],\n            /**\n       * Outline Style\n       * @see https://tailwindcss.com/docs/outline-style\n       */ \"outline-style\": [\n                {\n                    outline: [\n                        \"\",\n                        ...getLineStyles()\n                    ]\n                }\n            ],\n            /**\n       * Outline Offset\n       * @see https://tailwindcss.com/docs/outline-offset\n       */ \"outline-offset\": [\n                {\n                    \"outline-offset\": [\n                        isLength,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Outline Width\n       * @see https://tailwindcss.com/docs/outline-width\n       */ \"outline-w\": [\n                {\n                    outline: [\n                        isLength,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Outline Color\n       * @see https://tailwindcss.com/docs/outline-color\n       */ \"outline-color\": [\n                {\n                    outline: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Ring Width\n       * @see https://tailwindcss.com/docs/ring-width\n       */ \"ring-w\": [\n                {\n                    ring: getLengthWithEmptyAndArbitrary()\n                }\n            ],\n            /**\n       * Ring Width Inset\n       * @see https://tailwindcss.com/docs/ring-width\n       */ \"ring-w-inset\": [\n                \"ring-inset\"\n            ],\n            /**\n       * Ring Color\n       * @see https://tailwindcss.com/docs/ring-color\n       */ \"ring-color\": [\n                {\n                    ring: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Ring Opacity\n       * @see https://tailwindcss.com/docs/ring-opacity\n       */ \"ring-opacity\": [\n                {\n                    \"ring-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Ring Offset Width\n       * @see https://tailwindcss.com/docs/ring-offset-width\n       */ \"ring-offset-w\": [\n                {\n                    \"ring-offset\": [\n                        isLength,\n                        isArbitraryLength\n                    ]\n                }\n            ],\n            /**\n       * Ring Offset Color\n       * @see https://tailwindcss.com/docs/ring-offset-color\n       */ \"ring-offset-color\": [\n                {\n                    \"ring-offset\": [\n                        colors\n                    ]\n                }\n            ],\n            // Effects\n            /**\n       * Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow\n       */ shadow: [\n                {\n                    shadow: [\n                        \"\",\n                        \"inner\",\n                        \"none\",\n                        isTshirtSize,\n                        isArbitraryShadow\n                    ]\n                }\n            ],\n            /**\n       * Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow-color\n       */ \"shadow-color\": [\n                {\n                    shadow: [\n                        isAny\n                    ]\n                }\n            ],\n            /**\n       * Opacity\n       * @see https://tailwindcss.com/docs/opacity\n       */ opacity: [\n                {\n                    opacity: [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Mix Blend Mode\n       * @see https://tailwindcss.com/docs/mix-blend-mode\n       */ \"mix-blend\": [\n                {\n                    \"mix-blend\": [\n                        ...getBlendModes(),\n                        \"plus-lighter\",\n                        \"plus-darker\"\n                    ]\n                }\n            ],\n            /**\n       * Background Blend Mode\n       * @see https://tailwindcss.com/docs/background-blend-mode\n       */ \"bg-blend\": [\n                {\n                    \"bg-blend\": getBlendModes()\n                }\n            ],\n            // Filters\n            /**\n       * Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/filter\n       */ filter: [\n                {\n                    filter: [\n                        \"\",\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Blur\n       * @see https://tailwindcss.com/docs/blur\n       */ blur: [\n                {\n                    blur: [\n                        blur\n                    ]\n                }\n            ],\n            /**\n       * Brightness\n       * @see https://tailwindcss.com/docs/brightness\n       */ brightness: [\n                {\n                    brightness: [\n                        brightness\n                    ]\n                }\n            ],\n            /**\n       * Contrast\n       * @see https://tailwindcss.com/docs/contrast\n       */ contrast: [\n                {\n                    contrast: [\n                        contrast\n                    ]\n                }\n            ],\n            /**\n       * Drop Shadow\n       * @see https://tailwindcss.com/docs/drop-shadow\n       */ \"drop-shadow\": [\n                {\n                    \"drop-shadow\": [\n                        \"\",\n                        \"none\",\n                        isTshirtSize,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Grayscale\n       * @see https://tailwindcss.com/docs/grayscale\n       */ grayscale: [\n                {\n                    grayscale: [\n                        grayscale\n                    ]\n                }\n            ],\n            /**\n       * Hue Rotate\n       * @see https://tailwindcss.com/docs/hue-rotate\n       */ \"hue-rotate\": [\n                {\n                    \"hue-rotate\": [\n                        hueRotate\n                    ]\n                }\n            ],\n            /**\n       * Invert\n       * @see https://tailwindcss.com/docs/invert\n       */ invert: [\n                {\n                    invert: [\n                        invert\n                    ]\n                }\n            ],\n            /**\n       * Saturate\n       * @see https://tailwindcss.com/docs/saturate\n       */ saturate: [\n                {\n                    saturate: [\n                        saturate\n                    ]\n                }\n            ],\n            /**\n       * Sepia\n       * @see https://tailwindcss.com/docs/sepia\n       */ sepia: [\n                {\n                    sepia: [\n                        sepia\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/backdrop-filter\n       */ \"backdrop-filter\": [\n                {\n                    \"backdrop-filter\": [\n                        \"\",\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Blur\n       * @see https://tailwindcss.com/docs/backdrop-blur\n       */ \"backdrop-blur\": [\n                {\n                    \"backdrop-blur\": [\n                        blur\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Brightness\n       * @see https://tailwindcss.com/docs/backdrop-brightness\n       */ \"backdrop-brightness\": [\n                {\n                    \"backdrop-brightness\": [\n                        brightness\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Contrast\n       * @see https://tailwindcss.com/docs/backdrop-contrast\n       */ \"backdrop-contrast\": [\n                {\n                    \"backdrop-contrast\": [\n                        contrast\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Grayscale\n       * @see https://tailwindcss.com/docs/backdrop-grayscale\n       */ \"backdrop-grayscale\": [\n                {\n                    \"backdrop-grayscale\": [\n                        grayscale\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Hue Rotate\n       * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n       */ \"backdrop-hue-rotate\": [\n                {\n                    \"backdrop-hue-rotate\": [\n                        hueRotate\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Invert\n       * @see https://tailwindcss.com/docs/backdrop-invert\n       */ \"backdrop-invert\": [\n                {\n                    \"backdrop-invert\": [\n                        invert\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Opacity\n       * @see https://tailwindcss.com/docs/backdrop-opacity\n       */ \"backdrop-opacity\": [\n                {\n                    \"backdrop-opacity\": [\n                        opacity\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Saturate\n       * @see https://tailwindcss.com/docs/backdrop-saturate\n       */ \"backdrop-saturate\": [\n                {\n                    \"backdrop-saturate\": [\n                        saturate\n                    ]\n                }\n            ],\n            /**\n       * Backdrop Sepia\n       * @see https://tailwindcss.com/docs/backdrop-sepia\n       */ \"backdrop-sepia\": [\n                {\n                    \"backdrop-sepia\": [\n                        sepia\n                    ]\n                }\n            ],\n            // Tables\n            /**\n       * Border Collapse\n       * @see https://tailwindcss.com/docs/border-collapse\n       */ \"border-collapse\": [\n                {\n                    border: [\n                        \"collapse\",\n                        \"separate\"\n                    ]\n                }\n            ],\n            /**\n       * Border Spacing\n       * @see https://tailwindcss.com/docs/border-spacing\n       */ \"border-spacing\": [\n                {\n                    \"border-spacing\": [\n                        borderSpacing\n                    ]\n                }\n            ],\n            /**\n       * Border Spacing X\n       * @see https://tailwindcss.com/docs/border-spacing\n       */ \"border-spacing-x\": [\n                {\n                    \"border-spacing-x\": [\n                        borderSpacing\n                    ]\n                }\n            ],\n            /**\n       * Border Spacing Y\n       * @see https://tailwindcss.com/docs/border-spacing\n       */ \"border-spacing-y\": [\n                {\n                    \"border-spacing-y\": [\n                        borderSpacing\n                    ]\n                }\n            ],\n            /**\n       * Table Layout\n       * @see https://tailwindcss.com/docs/table-layout\n       */ \"table-layout\": [\n                {\n                    table: [\n                        \"auto\",\n                        \"fixed\"\n                    ]\n                }\n            ],\n            /**\n       * Caption Side\n       * @see https://tailwindcss.com/docs/caption-side\n       */ caption: [\n                {\n                    caption: [\n                        \"top\",\n                        \"bottom\"\n                    ]\n                }\n            ],\n            // Transitions and Animation\n            /**\n       * Tranisition Property\n       * @see https://tailwindcss.com/docs/transition-property\n       */ transition: [\n                {\n                    transition: [\n                        \"none\",\n                        \"all\",\n                        \"\",\n                        \"colors\",\n                        \"opacity\",\n                        \"shadow\",\n                        \"transform\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Transition Duration\n       * @see https://tailwindcss.com/docs/transition-duration\n       */ duration: [\n                {\n                    duration: getNumberAndArbitrary()\n                }\n            ],\n            /**\n       * Transition Timing Function\n       * @see https://tailwindcss.com/docs/transition-timing-function\n       */ ease: [\n                {\n                    ease: [\n                        \"linear\",\n                        \"in\",\n                        \"out\",\n                        \"in-out\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Transition Delay\n       * @see https://tailwindcss.com/docs/transition-delay\n       */ delay: [\n                {\n                    delay: getNumberAndArbitrary()\n                }\n            ],\n            /**\n       * Animation\n       * @see https://tailwindcss.com/docs/animation\n       */ animate: [\n                {\n                    animate: [\n                        \"none\",\n                        \"spin\",\n                        \"ping\",\n                        \"pulse\",\n                        \"bounce\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Transforms\n            /**\n       * Transform\n       * @see https://tailwindcss.com/docs/transform\n       */ transform: [\n                {\n                    transform: [\n                        \"\",\n                        \"gpu\",\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Scale\n       * @see https://tailwindcss.com/docs/scale\n       */ scale: [\n                {\n                    scale: [\n                        scale\n                    ]\n                }\n            ],\n            /**\n       * Scale X\n       * @see https://tailwindcss.com/docs/scale\n       */ \"scale-x\": [\n                {\n                    \"scale-x\": [\n                        scale\n                    ]\n                }\n            ],\n            /**\n       * Scale Y\n       * @see https://tailwindcss.com/docs/scale\n       */ \"scale-y\": [\n                {\n                    \"scale-y\": [\n                        scale\n                    ]\n                }\n            ],\n            /**\n       * Rotate\n       * @see https://tailwindcss.com/docs/rotate\n       */ rotate: [\n                {\n                    rotate: [\n                        isInteger,\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Translate X\n       * @see https://tailwindcss.com/docs/translate\n       */ \"translate-x\": [\n                {\n                    \"translate-x\": [\n                        translate\n                    ]\n                }\n            ],\n            /**\n       * Translate Y\n       * @see https://tailwindcss.com/docs/translate\n       */ \"translate-y\": [\n                {\n                    \"translate-y\": [\n                        translate\n                    ]\n                }\n            ],\n            /**\n       * Skew X\n       * @see https://tailwindcss.com/docs/skew\n       */ \"skew-x\": [\n                {\n                    \"skew-x\": [\n                        skew\n                    ]\n                }\n            ],\n            /**\n       * Skew Y\n       * @see https://tailwindcss.com/docs/skew\n       */ \"skew-y\": [\n                {\n                    \"skew-y\": [\n                        skew\n                    ]\n                }\n            ],\n            /**\n       * Transform Origin\n       * @see https://tailwindcss.com/docs/transform-origin\n       */ \"transform-origin\": [\n                {\n                    origin: [\n                        \"center\",\n                        \"top\",\n                        \"top-right\",\n                        \"right\",\n                        \"bottom-right\",\n                        \"bottom\",\n                        \"bottom-left\",\n                        \"left\",\n                        \"top-left\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // Interactivity\n            /**\n       * Accent Color\n       * @see https://tailwindcss.com/docs/accent-color\n       */ accent: [\n                {\n                    accent: [\n                        \"auto\",\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Appearance\n       * @see https://tailwindcss.com/docs/appearance\n       */ appearance: [\n                {\n                    appearance: [\n                        \"none\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Cursor\n       * @see https://tailwindcss.com/docs/cursor\n       */ cursor: [\n                {\n                    cursor: [\n                        \"auto\",\n                        \"default\",\n                        \"pointer\",\n                        \"wait\",\n                        \"text\",\n                        \"move\",\n                        \"help\",\n                        \"not-allowed\",\n                        \"none\",\n                        \"context-menu\",\n                        \"progress\",\n                        \"cell\",\n                        \"crosshair\",\n                        \"vertical-text\",\n                        \"alias\",\n                        \"copy\",\n                        \"no-drop\",\n                        \"grab\",\n                        \"grabbing\",\n                        \"all-scroll\",\n                        \"col-resize\",\n                        \"row-resize\",\n                        \"n-resize\",\n                        \"e-resize\",\n                        \"s-resize\",\n                        \"w-resize\",\n                        \"ne-resize\",\n                        \"nw-resize\",\n                        \"se-resize\",\n                        \"sw-resize\",\n                        \"ew-resize\",\n                        \"ns-resize\",\n                        \"nesw-resize\",\n                        \"nwse-resize\",\n                        \"zoom-in\",\n                        \"zoom-out\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            /**\n       * Caret Color\n       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n       */ \"caret-color\": [\n                {\n                    caret: [\n                        colors\n                    ]\n                }\n            ],\n            /**\n       * Pointer Events\n       * @see https://tailwindcss.com/docs/pointer-events\n       */ \"pointer-events\": [\n                {\n                    \"pointer-events\": [\n                        \"none\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Resize\n       * @see https://tailwindcss.com/docs/resize\n       */ resize: [\n                {\n                    resize: [\n                        \"none\",\n                        \"y\",\n                        \"x\",\n                        \"\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Behavior\n       * @see https://tailwindcss.com/docs/scroll-behavior\n       */ \"scroll-behavior\": [\n                {\n                    scroll: [\n                        \"auto\",\n                        \"smooth\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Margin\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-m\": [\n                {\n                    \"scroll-m\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin X\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mx\": [\n                {\n                    \"scroll-mx\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Y\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-my\": [\n                {\n                    \"scroll-my\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Start\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-ms\": [\n                {\n                    \"scroll-ms\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin End\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-me\": [\n                {\n                    \"scroll-me\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Top\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mt\": [\n                {\n                    \"scroll-mt\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Right\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mr\": [\n                {\n                    \"scroll-mr\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Bottom\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-mb\": [\n                {\n                    \"scroll-mb\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Margin Left\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */ \"scroll-ml\": [\n                {\n                    \"scroll-ml\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-p\": [\n                {\n                    \"scroll-p\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding X\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-px\": [\n                {\n                    \"scroll-px\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Y\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-py\": [\n                {\n                    \"scroll-py\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Start\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-ps\": [\n                {\n                    \"scroll-ps\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding End\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pe\": [\n                {\n                    \"scroll-pe\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Top\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pt\": [\n                {\n                    \"scroll-pt\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Right\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pr\": [\n                {\n                    \"scroll-pr\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Bottom\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pb\": [\n                {\n                    \"scroll-pb\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Padding Left\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */ \"scroll-pl\": [\n                {\n                    \"scroll-pl\": getSpacingWithArbitrary()\n                }\n            ],\n            /**\n       * Scroll Snap Align\n       * @see https://tailwindcss.com/docs/scroll-snap-align\n       */ \"snap-align\": [\n                {\n                    snap: [\n                        \"start\",\n                        \"end\",\n                        \"center\",\n                        \"align-none\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Snap Stop\n       * @see https://tailwindcss.com/docs/scroll-snap-stop\n       */ \"snap-stop\": [\n                {\n                    snap: [\n                        \"normal\",\n                        \"always\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Snap Type\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */ \"snap-type\": [\n                {\n                    snap: [\n                        \"none\",\n                        \"x\",\n                        \"y\",\n                        \"both\"\n                    ]\n                }\n            ],\n            /**\n       * Scroll Snap Type Strictness\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */ \"snap-strictness\": [\n                {\n                    snap: [\n                        \"mandatory\",\n                        \"proximity\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action\n       * @see https://tailwindcss.com/docs/touch-action\n       */ touch: [\n                {\n                    touch: [\n                        \"auto\",\n                        \"none\",\n                        \"manipulation\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action X\n       * @see https://tailwindcss.com/docs/touch-action\n       */ \"touch-x\": [\n                {\n                    \"touch-pan\": [\n                        \"x\",\n                        \"left\",\n                        \"right\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action Y\n       * @see https://tailwindcss.com/docs/touch-action\n       */ \"touch-y\": [\n                {\n                    \"touch-pan\": [\n                        \"y\",\n                        \"up\",\n                        \"down\"\n                    ]\n                }\n            ],\n            /**\n       * Touch Action Pinch Zoom\n       * @see https://tailwindcss.com/docs/touch-action\n       */ \"touch-pz\": [\n                \"touch-pinch-zoom\"\n            ],\n            /**\n       * User Select\n       * @see https://tailwindcss.com/docs/user-select\n       */ select: [\n                {\n                    select: [\n                        \"none\",\n                        \"text\",\n                        \"all\",\n                        \"auto\"\n                    ]\n                }\n            ],\n            /**\n       * Will Change\n       * @see https://tailwindcss.com/docs/will-change\n       */ \"will-change\": [\n                {\n                    \"will-change\": [\n                        \"auto\",\n                        \"scroll\",\n                        \"contents\",\n                        \"transform\",\n                        isArbitraryValue\n                    ]\n                }\n            ],\n            // SVG\n            /**\n       * Fill\n       * @see https://tailwindcss.com/docs/fill\n       */ fill: [\n                {\n                    fill: [\n                        colors,\n                        \"none\"\n                    ]\n                }\n            ],\n            /**\n       * Stroke Width\n       * @see https://tailwindcss.com/docs/stroke-width\n       */ \"stroke-w\": [\n                {\n                    stroke: [\n                        isLength,\n                        isArbitraryLength,\n                        isArbitraryNumber\n                    ]\n                }\n            ],\n            /**\n       * Stroke\n       * @see https://tailwindcss.com/docs/stroke\n       */ stroke: [\n                {\n                    stroke: [\n                        colors,\n                        \"none\"\n                    ]\n                }\n            ],\n            // Accessibility\n            /**\n       * Screen Readers\n       * @see https://tailwindcss.com/docs/screen-readers\n       */ sr: [\n                \"sr-only\",\n                \"not-sr-only\"\n            ],\n            /**\n       * Forced Color Adjust\n       * @see https://tailwindcss.com/docs/forced-color-adjust\n       */ \"forced-color-adjust\": [\n                {\n                    \"forced-color-adjust\": [\n                        \"auto\",\n                        \"none\"\n                    ]\n                }\n            ]\n        },\n        conflictingClassGroups: {\n            overflow: [\n                \"overflow-x\",\n                \"overflow-y\"\n            ],\n            overscroll: [\n                \"overscroll-x\",\n                \"overscroll-y\"\n            ],\n            inset: [\n                \"inset-x\",\n                \"inset-y\",\n                \"start\",\n                \"end\",\n                \"top\",\n                \"right\",\n                \"bottom\",\n                \"left\"\n            ],\n            \"inset-x\": [\n                \"right\",\n                \"left\"\n            ],\n            \"inset-y\": [\n                \"top\",\n                \"bottom\"\n            ],\n            flex: [\n                \"basis\",\n                \"grow\",\n                \"shrink\"\n            ],\n            gap: [\n                \"gap-x\",\n                \"gap-y\"\n            ],\n            p: [\n                \"px\",\n                \"py\",\n                \"ps\",\n                \"pe\",\n                \"pt\",\n                \"pr\",\n                \"pb\",\n                \"pl\"\n            ],\n            px: [\n                \"pr\",\n                \"pl\"\n            ],\n            py: [\n                \"pt\",\n                \"pb\"\n            ],\n            m: [\n                \"mx\",\n                \"my\",\n                \"ms\",\n                \"me\",\n                \"mt\",\n                \"mr\",\n                \"mb\",\n                \"ml\"\n            ],\n            mx: [\n                \"mr\",\n                \"ml\"\n            ],\n            my: [\n                \"mt\",\n                \"mb\"\n            ],\n            size: [\n                \"w\",\n                \"h\"\n            ],\n            \"font-size\": [\n                \"leading\"\n            ],\n            \"fvn-normal\": [\n                \"fvn-ordinal\",\n                \"fvn-slashed-zero\",\n                \"fvn-figure\",\n                \"fvn-spacing\",\n                \"fvn-fraction\"\n            ],\n            \"fvn-ordinal\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-slashed-zero\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-figure\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-spacing\": [\n                \"fvn-normal\"\n            ],\n            \"fvn-fraction\": [\n                \"fvn-normal\"\n            ],\n            \"line-clamp\": [\n                \"display\",\n                \"overflow\"\n            ],\n            rounded: [\n                \"rounded-s\",\n                \"rounded-e\",\n                \"rounded-t\",\n                \"rounded-r\",\n                \"rounded-b\",\n                \"rounded-l\",\n                \"rounded-ss\",\n                \"rounded-se\",\n                \"rounded-ee\",\n                \"rounded-es\",\n                \"rounded-tl\",\n                \"rounded-tr\",\n                \"rounded-br\",\n                \"rounded-bl\"\n            ],\n            \"rounded-s\": [\n                \"rounded-ss\",\n                \"rounded-es\"\n            ],\n            \"rounded-e\": [\n                \"rounded-se\",\n                \"rounded-ee\"\n            ],\n            \"rounded-t\": [\n                \"rounded-tl\",\n                \"rounded-tr\"\n            ],\n            \"rounded-r\": [\n                \"rounded-tr\",\n                \"rounded-br\"\n            ],\n            \"rounded-b\": [\n                \"rounded-br\",\n                \"rounded-bl\"\n            ],\n            \"rounded-l\": [\n                \"rounded-tl\",\n                \"rounded-bl\"\n            ],\n            \"border-spacing\": [\n                \"border-spacing-x\",\n                \"border-spacing-y\"\n            ],\n            \"border-w\": [\n                \"border-w-s\",\n                \"border-w-e\",\n                \"border-w-t\",\n                \"border-w-r\",\n                \"border-w-b\",\n                \"border-w-l\"\n            ],\n            \"border-w-x\": [\n                \"border-w-r\",\n                \"border-w-l\"\n            ],\n            \"border-w-y\": [\n                \"border-w-t\",\n                \"border-w-b\"\n            ],\n            \"border-color\": [\n                \"border-color-s\",\n                \"border-color-e\",\n                \"border-color-t\",\n                \"border-color-r\",\n                \"border-color-b\",\n                \"border-color-l\"\n            ],\n            \"border-color-x\": [\n                \"border-color-r\",\n                \"border-color-l\"\n            ],\n            \"border-color-y\": [\n                \"border-color-t\",\n                \"border-color-b\"\n            ],\n            \"scroll-m\": [\n                \"scroll-mx\",\n                \"scroll-my\",\n                \"scroll-ms\",\n                \"scroll-me\",\n                \"scroll-mt\",\n                \"scroll-mr\",\n                \"scroll-mb\",\n                \"scroll-ml\"\n            ],\n            \"scroll-mx\": [\n                \"scroll-mr\",\n                \"scroll-ml\"\n            ],\n            \"scroll-my\": [\n                \"scroll-mt\",\n                \"scroll-mb\"\n            ],\n            \"scroll-p\": [\n                \"scroll-px\",\n                \"scroll-py\",\n                \"scroll-ps\",\n                \"scroll-pe\",\n                \"scroll-pt\",\n                \"scroll-pr\",\n                \"scroll-pb\",\n                \"scroll-pl\"\n            ],\n            \"scroll-px\": [\n                \"scroll-pr\",\n                \"scroll-pl\"\n            ],\n            \"scroll-py\": [\n                \"scroll-pt\",\n                \"scroll-pb\"\n            ],\n            touch: [\n                \"touch-x\",\n                \"touch-y\",\n                \"touch-pz\"\n            ],\n            \"touch-x\": [\n                \"touch\"\n            ],\n            \"touch-y\": [\n                \"touch\"\n            ],\n            \"touch-pz\": [\n                \"touch\"\n            ]\n        },\n        conflictingClassGroupModifiers: {\n            \"font-size\": [\n                \"leading\"\n            ]\n        }\n    };\n};\nvar mergeConfigs = (baseConfig, { cacheSize, prefix, separator, experimentalParseClassName, extend = {}, override = {} })=>{\n    overrideProperty(baseConfig, \"cacheSize\", cacheSize);\n    overrideProperty(baseConfig, \"prefix\", prefix);\n    overrideProperty(baseConfig, \"separator\", separator);\n    overrideProperty(baseConfig, \"experimentalParseClassName\", experimentalParseClassName);\n    for(const configKey in override){\n        overrideConfigProperties(baseConfig[configKey], override[configKey]);\n    }\n    for(const key in extend){\n        mergeConfigProperties(baseConfig[key], extend[key]);\n    }\n    return baseConfig;\n};\nvar overrideProperty = (baseObject, overrideKey, overrideValue)=>{\n    if (overrideValue !== void 0) {\n        baseObject[overrideKey] = overrideValue;\n    }\n};\nvar overrideConfigProperties = (baseObject, overrideObject)=>{\n    if (overrideObject) {\n        for(const key in overrideObject){\n            overrideProperty(baseObject, key, overrideObject[key]);\n        }\n    }\n};\nvar mergeConfigProperties = (baseObject, mergeObject)=>{\n    if (mergeObject) {\n        for(const key in mergeObject){\n            const mergeValue = mergeObject[key];\n            if (mergeValue !== void 0) {\n                baseObject[key] = (baseObject[key] || []).concat(mergeValue);\n            }\n        }\n    }\n};\nvar extendTailwindMerge = (configExtension, ...createConfig)=>typeof configExtension === \"function\" ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(()=>mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);\n// src/libraries/react/lib/utils.ts\nvar twMerge = extendTailwindMerge({\n    prefix: \"au-\"\n});\nfunction cn(...inputs) {\n    return twMerge(clsx(inputs));\n}\n// src/libraries/react/components/ui/button.tsx\n\n// ../node_modules/.pnpm/@radix-ui+react-slot@1.2.3_@types+react@18.3.14_react@18.3.1/node_modules/@radix-ui/react-slot/dist/index.mjs\n\n// ../node_modules/.pnpm/@radix-ui+react-compose-refs@1.1.2_@types+react@18.3.14_react@18.3.1/node_modules/@radix-ui/react-compose-refs/dist/index.mjs\n\nfunction setRef(ref, value1) {\n    if (typeof ref === \"function\") {\n        return ref(value1);\n    } else if (ref !== null && ref !== void 0) {\n        ref.current = value1;\n    }\n}\nfunction composeRefs(...refs) {\n    return (node)=>{\n        let hasCleanup = false;\n        const cleanups = refs.map((ref)=>{\n            const cleanup = setRef(ref, node);\n            if (!hasCleanup && typeof cleanup == \"function\") {\n                hasCleanup = true;\n            }\n            return cleanup;\n        });\n        if (hasCleanup) {\n            return ()=>{\n                for(let i = 0; i < cleanups.length; i++){\n                    const cleanup = cleanups[i];\n                    if (typeof cleanup == \"function\") {\n                        cleanup();\n                    } else {\n                        setRef(refs[i], null);\n                    }\n                }\n            };\n        }\n    };\n}\nfunction useComposedRefs(...refs) {\n    return react__WEBPACK_IMPORTED_MODULE_1__.useCallback(composeRefs(...refs), refs);\n}\n// ../node_modules/.pnpm/@radix-ui+react-slot@1.2.3_@types+react@18.3.14_react@18.3.1/node_modules/@radix-ui/react-slot/dist/index.mjs\n\n// @__NO_SIDE_EFFECTS__\nfunction createSlot(ownerName) {\n    const SlotClone = /* @__PURE__ */ createSlotClone(ownerName);\n    const Slot22 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n        const { children, ...slotProps } = props;\n        const childrenArray = react__WEBPACK_IMPORTED_MODULE_1__.Children.toArray(children);\n        const slottable = childrenArray.find(isSlottable);\n        if (slottable) {\n            const newElement = slottable.props.children;\n            const newChildren = childrenArray.map((child)=>{\n                if (child === slottable) {\n                    if (react__WEBPACK_IMPORTED_MODULE_1__.Children.count(newElement) > 1) return react__WEBPACK_IMPORTED_MODULE_1__.Children.only(null);\n                    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.isValidElement(newElement) ? newElement.props.children : null;\n                } else {\n                    return child;\n                }\n            });\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SlotClone, {\n                ...slotProps,\n                ref: forwardedRef,\n                children: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.isValidElement(newElement) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.cloneElement(newElement, void 0, newChildren) : null\n            });\n        }\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SlotClone, {\n            ...slotProps,\n            ref: forwardedRef,\n            children\n        });\n    });\n    Slot22.displayName = `${ownerName}.Slot`;\n    return Slot22;\n}\nvar Slot = /* @__PURE__ */ createSlot(\"Slot\");\n// @__NO_SIDE_EFFECTS__\nfunction createSlotClone(ownerName) {\n    const SlotClone = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n        const { children, ...slotProps } = props;\n        if (/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.isValidElement(children)) {\n            const childrenRef = getElementRef(children);\n            const props2 = mergeProps(slotProps, children.props);\n            if (children.type !== react__WEBPACK_IMPORTED_MODULE_1__.Fragment) {\n                props2.ref = forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef;\n            }\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.cloneElement(children, props2);\n        }\n        return react__WEBPACK_IMPORTED_MODULE_1__.Children.count(children) > 1 ? react__WEBPACK_IMPORTED_MODULE_1__.Children.only(null) : null;\n    });\n    SlotClone.displayName = `${ownerName}.SlotClone`;\n    return SlotClone;\n}\nvar SLOTTABLE_IDENTIFIER = Symbol(\"radix.slottable\");\nfunction isSlottable(child) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.isValidElement(child) && typeof child.type === \"function\" && \"__radixId\" in child.type && child.type.__radixId === SLOTTABLE_IDENTIFIER;\n}\nfunction mergeProps(slotProps, childProps) {\n    const overrideProps = {\n        ...childProps\n    };\n    for(const propName in childProps){\n        const slotPropValue = slotProps[propName];\n        const childPropValue = childProps[propName];\n        const isHandler = /^on[A-Z]/.test(propName);\n        if (isHandler) {\n            if (slotPropValue && childPropValue) {\n                overrideProps[propName] = (...args)=>{\n                    const result = childPropValue(...args);\n                    slotPropValue(...args);\n                    return result;\n                };\n            } else if (slotPropValue) {\n                overrideProps[propName] = slotPropValue;\n            }\n        } else if (propName === \"style\") {\n            overrideProps[propName] = {\n                ...slotPropValue,\n                ...childPropValue\n            };\n        } else if (propName === \"className\") {\n            overrideProps[propName] = [\n                slotPropValue,\n                childPropValue\n            ].filter(Boolean).join(\" \");\n        }\n    }\n    return {\n        ...slotProps,\n        ...overrideProps\n    };\n}\nfunction getElementRef(element) {\n    let getter = Object.getOwnPropertyDescriptor(element.props, \"ref\")?.get;\n    let mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n    if (mayWarn) {\n        return element.ref;\n    }\n    getter = Object.getOwnPropertyDescriptor(element, \"ref\")?.get;\n    mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n    if (mayWarn) {\n        return element.props.ref;\n    }\n    return element.props.ref || element.ref;\n}\n// ../node_modules/.pnpm/class-variance-authority@0.7.1/node_modules/class-variance-authority/dist/index.mjs\nvar falsyToString = (value1)=>typeof value1 === \"boolean\" ? `${value1}` : value1 === 0 ? \"0\" : value1;\nvar cx = clsx;\nvar cva = (base, config)=>(props)=>{\n        var _config_compoundVariants;\n        if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n        const { variants, defaultVariants } = config;\n        const getVariantClassNames = Object.keys(variants).map((variant)=>{\n            const variantProp = props === null || props === void 0 ? void 0 : props[variant];\n            const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];\n            if (variantProp === null) return null;\n            const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);\n            return variants[variant][variantKey];\n        });\n        const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param)=>{\n            let [key, value1] = param;\n            if (value1 === void 0) {\n                return acc;\n            }\n            acc[key] = value1;\n            return acc;\n        }, {});\n        const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (_config_compoundVariants = config.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param)=>{\n            let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;\n            return Object.entries(compoundVariantOptions).every((param2)=>{\n                let [key, value1] = param2;\n                return Array.isArray(value1) ? value1.includes({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                }[key]) : ({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                })[key] === value1;\n            }) ? [\n                ...acc,\n                cvClass,\n                cvClassName\n            ] : acc;\n        }, []);\n        return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n    };\n// src/libraries/react/components/ui/button.tsx\n\nvar buttonVariants = cva(\"au-inline-flex au-items-center au-justify-center au-gap-2 au-whitespace-nowrap au-rounded-md au-text-sm au-font-medium au-transition-colors focus-visible:au-outline-none focus-visible:au-ring-1 focus-visible:au-ring-ring disabled:au-pointer-events-none disabled:au-opacity-50 [&_svg]:au-pointer-events-none [&_svg]:au-size-4 [&_svg]:au-shrink-0\", {\n    variants: {\n        variant: {\n            default: \"au-bg-primary au-text-primary-foreground au-shadow hover:au-bg-primary/90\",\n            destructive: \"au-bg-destructive au-text-destructive-foreground au-shadow-sm hover:au-bg-destructive/90\",\n            outline: \"au-border au-border-input au-bg-background au-shadow-sm hover:au-bg-accent hover:au-text-accent-foreground\",\n            secondary: \"au-bg-secondary au-text-secondary-foreground au-shadow-sm hover:au-bg-secondary/80\",\n            ghost: \"hover:au-bg-accent hover:au-text-accent-foreground\",\n            link: \"au-text-primary au-underline-offset-4 hover:au-underline\"\n        },\n        size: {\n            default: \"au-h-9 au-px-4 au-py-2\",\n            sm: \"au-h-8 au-rounded-md au-px-3 au-text-xs\",\n            lg: \"au-h-10 au-rounded-md au-px-8\",\n            icon: \"au-h-9 au-w-9\"\n        }\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\"\n    }\n});\nvar Button = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, variant, size, asChild = false, ...props }, ref)=>{\n    const Comp = asChild ? Slot : \"button\";\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Comp, {\n        className: cn(buttonVariants({\n            variant,\n            size\n        }), className),\n        ref,\n        ...props\n    });\n});\nButton.displayName = \"Button\";\n// ../node_modules/.pnpm/lucide-react@0.523.0_react@18.3.1/node_modules/lucide-react/dist/esm/createLucideIcon.js\n\n// ../node_modules/.pnpm/lucide-react@0.523.0_react@18.3.1/node_modules/lucide-react/dist/esm/shared/src/utils.js\nvar toKebabCase = (string)=>string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase();\nvar toCamelCase = (string)=>string.replace(/^([A-Z])|[\\s-_]+(\\w)/g, (match, p1, p2)=>p2 ? p2.toUpperCase() : p1.toLowerCase());\nvar toPascalCase = (string)=>{\n    const camelCase = toCamelCase(string);\n    return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);\n};\nvar mergeClasses = (...classes)=>classes.filter((className, index, array)=>{\n        return Boolean(className) && className.trim() !== \"\" && array.indexOf(className) === index;\n    }).join(\" \").trim();\nvar hasA11yProp = (props)=>{\n    for(const prop in props){\n        if (prop.startsWith(\"aria-\") || prop === \"role\" || prop === \"title\") {\n            return true;\n        }\n    }\n};\n// ../node_modules/.pnpm/lucide-react@0.523.0_react@18.3.1/node_modules/lucide-react/dist/esm/Icon.js\n\n// ../node_modules/.pnpm/lucide-react@0.523.0_react@18.3.1/node_modules/lucide-react/dist/esm/defaultAttributes.js\nvar defaultAttributes = {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n};\n// ../node_modules/.pnpm/lucide-react@0.523.0_react@18.3.1/node_modules/lucide-react/dist/esm/Icon.js\nvar Icon = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(({ color = \"currentColor\", size = 24, strokeWidth = 2, absoluteStrokeWidth, className = \"\", children, iconNode, ...rest }, ref)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(\"svg\", {\n        ref,\n        ...defaultAttributes,\n        width: size,\n        height: size,\n        stroke: color,\n        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n        className: mergeClasses(\"lucide\", className),\n        ...!children && !hasA11yProp(rest) && {\n            \"aria-hidden\": \"true\"\n        },\n        ...rest\n    }, [\n        ...iconNode.map(([tag, attrs])=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(tag, attrs)),\n        ...Array.isArray(children) ? children : [\n            children\n        ]\n    ]));\n// ../node_modules/.pnpm/lucide-react@0.523.0_react@18.3.1/node_modules/lucide-react/dist/esm/createLucideIcon.js\nvar createLucideIcon = (iconName, iconNode)=>{\n    const Component = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(({ className, ...props }, ref)=>/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createElement)(Icon, {\n            ref,\n            iconNode,\n            className: mergeClasses(`lucide-${toKebabCase(toPascalCase(iconName))}`, `lucide-${iconName}`, className),\n            ...props\n        }));\n    Component.displayName = toPascalCase(iconName);\n    return Component;\n};\n// ../node_modules/.pnpm/lucide-react@0.523.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/check.js\nvar __iconNode = [\n    [\n        \"path\",\n        {\n            d: \"M20 6 9 17l-5-5\",\n            key: \"1gmf2c\"\n        }\n    ]\n];\nvar Check = createLucideIcon(\"check\", __iconNode);\n// ../node_modules/.pnpm/lucide-react@0.523.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/loader-circle.js\nvar __iconNode2 = [\n    [\n        \"path\",\n        {\n            d: \"M21 12a9 9 0 1 1-6.219-8.56\",\n            key: \"13zald\"\n        }\n    ]\n];\nvar LoaderCircle = createLucideIcon(\"loader-circle\", __iconNode2);\n// ../node_modules/.pnpm/lucide-react@0.523.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/x.js\nvar __iconNode3 = [\n    [\n        \"path\",\n        {\n            d: \"M18 6 6 18\",\n            key: \"1bl5f8\"\n        }\n    ],\n    [\n        \"path\",\n        {\n            d: \"m6 6 12 12\",\n            key: \"d8bk6v\"\n        }\n    ]\n];\nvar X = createLucideIcon(\"x\", __iconNode3);\n// src/libraries/react/components/ui/dialog.tsx\n\n// ../node_modules/.pnpm/@radix-ui+react-dialog@1.1.14_@types+react-dom@18.3.5_@types+react@18.3.14__@types+react@18.3_osy3texbcyy7oe3sqigksqvg74/node_modules/@radix-ui/react-dialog/dist/index.mjs\n\n// ../node_modules/.pnpm/@radix-ui+primitive@1.1.2/node_modules/@radix-ui/primitive/dist/index.mjs\nfunction composeEventHandlers(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {\n    return function handleEvent2(event) {\n        originalEventHandler?.(event);\n        if (checkForDefaultPrevented === false || !event.defaultPrevented) {\n            return ourEventHandler?.(event);\n        }\n    };\n}\n// ../node_modules/.pnpm/@radix-ui+react-context@1.1.2_@types+react@18.3.14_react@18.3.1/node_modules/@radix-ui/react-context/dist/index.mjs\n\n\nfunction createContext22(rootComponentName, defaultContext) {\n    const Context = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(defaultContext);\n    const Provider = (props)=>{\n        const { children, ...context } = props;\n        const value1 = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n            \"createContext22.Provider.useMemo[value]\": ()=>context\n        }[\"createContext22.Provider.useMemo[value]\"], Object.values(context));\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Context.Provider, {\n            value: value1,\n            children\n        });\n    };\n    Provider.displayName = rootComponentName + \"Provider\";\n    function useContext22(consumerName) {\n        const context = react__WEBPACK_IMPORTED_MODULE_1__.useContext(Context);\n        if (context) return context;\n        if (defaultContext !== void 0) return defaultContext;\n        throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n    return [\n        Provider,\n        useContext22\n    ];\n}\nfunction createContextScope(scopeName, createContextScopeDeps = []) {\n    let defaultContexts = [];\n    function createContext32(rootComponentName, defaultContext) {\n        const BaseContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(defaultContext);\n        const index = defaultContexts.length;\n        defaultContexts = [\n            ...defaultContexts,\n            defaultContext\n        ];\n        const Provider = (props)=>{\n            const { scope, children, ...context } = props;\n            const Context = scope?.[scopeName]?.[index] || BaseContext;\n            const value1 = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n                \"createContextScope.createContext32.Provider.useMemo[value]\": ()=>context\n            }[\"createContextScope.createContext32.Provider.useMemo[value]\"], Object.values(context));\n            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Context.Provider, {\n                value: value1,\n                children\n            });\n        };\n        Provider.displayName = rootComponentName + \"Provider\";\n        function useContext22(consumerName, scope) {\n            const Context = scope?.[scopeName]?.[index] || BaseContext;\n            const context = react__WEBPACK_IMPORTED_MODULE_1__.useContext(Context);\n            if (context) return context;\n            if (defaultContext !== void 0) return defaultContext;\n            throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n        }\n        return [\n            Provider,\n            useContext22\n        ];\n    }\n    const createScope = ()=>{\n        const scopeContexts = defaultContexts.map((defaultContext)=>{\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(defaultContext);\n        });\n        return function useScope(scope) {\n            const contexts = scope?.[scopeName] || scopeContexts;\n            return react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n                \"createContextScope.createScope.useScope.useMemo\": ()=>({\n                        [`__scope${scopeName}`]: {\n                            ...scope,\n                            [scopeName]: contexts\n                        }\n                    })\n            }[\"createContextScope.createScope.useScope.useMemo\"], [\n                scope,\n                contexts\n            ]);\n        };\n    };\n    createScope.scopeName = scopeName;\n    return [\n        createContext32,\n        composeContextScopes(createScope, ...createContextScopeDeps)\n    ];\n}\nfunction composeContextScopes(...scopes) {\n    const baseScope = scopes[0];\n    if (scopes.length === 1) return baseScope;\n    const createScope = ()=>{\n        const scopeHooks = scopes.map((createScope2)=>({\n                useScope: createScope2(),\n                scopeName: createScope2.scopeName\n            }));\n        return function useComposedScopes(overrideScopes) {\n            const nextScopes = scopeHooks.reduce((nextScopes2, { useScope, scopeName })=>{\n                const scopeProps = useScope(overrideScopes);\n                const currentScope = scopeProps[`__scope${scopeName}`];\n                return {\n                    ...nextScopes2,\n                    ...currentScope\n                };\n            }, {});\n            return react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n                \"composeContextScopes.createScope.useComposedScopes.useMemo\": ()=>({\n                        [`__scope${baseScope.scopeName}`]: nextScopes\n                    })\n            }[\"composeContextScopes.createScope.useComposedScopes.useMemo\"], [\n                nextScopes\n            ]);\n        };\n    };\n    createScope.scopeName = baseScope.scopeName;\n    return createScope;\n}\n// ../node_modules/.pnpm/@radix-ui+react-id@1.1.1_@types+react@18.3.14_react@18.3.1/node_modules/@radix-ui/react-id/dist/index.mjs\n\n// ../node_modules/.pnpm/@radix-ui+react-use-layout-effect@1.1.1_@types+react@18.3.14_react@18.3.1/node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs\n\nvar useLayoutEffect2 = globalThis?.document ? react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect : ()=>{};\n// ../node_modules/.pnpm/@radix-ui+react-id@1.1.1_@types+react@18.3.14_react@18.3.1/node_modules/@radix-ui/react-id/dist/index.mjs\nvar useReactId = /*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_1__, 2)))[\" useId \".trim().toString()] || (()=>void 0);\nvar count = 0;\nfunction useId(deterministicId) {\n    const [id, setId] = react__WEBPACK_IMPORTED_MODULE_1__.useState(useReactId());\n    useLayoutEffect2({\n        \"useId.useLayoutEffect2\": ()=>{\n            if (!deterministicId) setId({\n                \"useId.useLayoutEffect2\": (reactId)=>reactId ?? String(count++)\n            }[\"useId.useLayoutEffect2\"]);\n        }\n    }[\"useId.useLayoutEffect2\"], [\n        deterministicId\n    ]);\n    return deterministicId || (id ? `radix-${id}` : \"\");\n}\n// ../node_modules/.pnpm/@radix-ui+react-use-controllable-state@1.2.2_@types+react@18.3.14_react@18.3.1/node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs\n\n\nvar useInsertionEffect = /*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_1___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_1___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_1__, 2)))[\" useInsertionEffect \".trim().toString()] || useLayoutEffect2;\nfunction useControllableState({ prop, defaultProp, onChange = ()=>{}, caller }) {\n    const [uncontrolledProp, setUncontrolledProp, onChangeRef] = useUncontrolledState({\n        defaultProp,\n        onChange\n    });\n    const isControlled = prop !== void 0;\n    const value1 = isControlled ? prop : uncontrolledProp;\n    if (true) {\n        const isControlledRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(prop !== void 0);\n        react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n            \"useControllableState.useEffect\": ()=>{\n                const wasControlled = isControlledRef.current;\n                if (wasControlled !== isControlled) {\n                    const from = wasControlled ? \"controlled\" : \"uncontrolled\";\n                    const to = isControlled ? \"controlled\" : \"uncontrolled\";\n                    console.warn(`${caller} is changing from ${from} to ${to}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`);\n                }\n                isControlledRef.current = isControlled;\n            }\n        }[\"useControllableState.useEffect\"], [\n            isControlled,\n            caller\n        ]);\n    }\n    const setValue = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"useControllableState.useCallback[setValue]\": (nextValue)=>{\n            if (isControlled) {\n                const value2 = isFunction(nextValue) ? nextValue(prop) : nextValue;\n                if (value2 !== prop) {\n                    onChangeRef.current?.(value2);\n                }\n            } else {\n                setUncontrolledProp(nextValue);\n            }\n        }\n    }[\"useControllableState.useCallback[setValue]\"], [\n        isControlled,\n        prop,\n        setUncontrolledProp,\n        onChangeRef\n    ]);\n    return [\n        value1,\n        setValue\n    ];\n}\nfunction useUncontrolledState({ defaultProp, onChange }) {\n    const [value1, setValue] = react__WEBPACK_IMPORTED_MODULE_1__.useState(defaultProp);\n    const prevValueRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(value1);\n    const onChangeRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(onChange);\n    useInsertionEffect({\n        \"useUncontrolledState.useInsertionEffect\": ()=>{\n            onChangeRef.current = onChange;\n        }\n    }[\"useUncontrolledState.useInsertionEffect\"], [\n        onChange\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useUncontrolledState.useEffect\": ()=>{\n            if (prevValueRef.current !== value1) {\n                onChangeRef.current?.(value1);\n                prevValueRef.current = value1;\n            }\n        }\n    }[\"useUncontrolledState.useEffect\"], [\n        value1,\n        prevValueRef\n    ]);\n    return [\n        value1,\n        setValue,\n        onChangeRef\n    ];\n}\nfunction isFunction(value1) {\n    return typeof value1 === \"function\";\n}\nvar SYNC_STATE = Symbol(\"RADIX:SYNC_STATE\");\n// ../node_modules/.pnpm/@radix-ui+react-dismissable-layer@1.1.10_@types+react-dom@18.3.5_@types+react@18.3.14__@types_dcs2l2jzs5flmzhfcv6rimpkfe/node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs\n\n// ../node_modules/.pnpm/@radix-ui+react-primitive@2.1.3_@types+react-dom@18.3.5_@types+react@18.3.14__@types+react@18_t6r7cxmbmoheujv3t43yqlikou/node_modules/@radix-ui/react-primitive/dist/index.mjs\n\n\n\nvar NODES = [\n    \"a\",\n    \"button\",\n    \"div\",\n    \"form\",\n    \"h2\",\n    \"h3\",\n    \"img\",\n    \"input\",\n    \"label\",\n    \"li\",\n    \"nav\",\n    \"ol\",\n    \"p\",\n    \"select\",\n    \"span\",\n    \"svg\",\n    \"ul\"\n];\nvar Primitive = NODES.reduce((primitive, node)=>{\n    const Slot3 = createSlot(`Primitive.${node}`);\n    const Node2 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n        const { asChild, ...primitiveProps } = props;\n        const Comp = asChild ? Slot3 : node;\n        if (false) {}\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Comp, {\n            ...primitiveProps,\n            ref: forwardedRef\n        });\n    });\n    Node2.displayName = `Primitive.${node}`;\n    return {\n        ...primitive,\n        [node]: Node2\n    };\n}, {});\nfunction dispatchDiscreteCustomEvent(target, event) {\n    if (target) react_dom__WEBPACK_IMPORTED_MODULE_5__.flushSync(()=>target.dispatchEvent(event));\n}\n// ../node_modules/.pnpm/@radix-ui+react-use-callback-ref@1.1.1_@types+react@18.3.14_react@18.3.1/node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs\n\nfunction useCallbackRef(callback) {\n    const callbackRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(callback);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useCallbackRef.useEffect\": ()=>{\n            callbackRef.current = callback;\n        }\n    }[\"useCallbackRef.useEffect\"]);\n    return react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"useCallbackRef.useMemo\": ()=>({\n                \"useCallbackRef.useMemo\": (...args)=>callbackRef.current?.(...args)\n            })[\"useCallbackRef.useMemo\"]\n    }[\"useCallbackRef.useMemo\"], []);\n}\n// ../node_modules/.pnpm/@radix-ui+react-use-escape-keydown@1.1.1_@types+react@18.3.14_react@18.3.1/node_modules/@radix-ui/react-use-escape-keydown/dist/index.mjs\n\nfunction useEscapeKeydown(onEscapeKeyDownProp, ownerDocument = globalThis?.document) {\n    const onEscapeKeyDown = useCallbackRef(onEscapeKeyDownProp);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useEscapeKeydown.useEffect\": ()=>{\n            const handleKeyDown = {\n                \"useEscapeKeydown.useEffect.handleKeyDown\": (event)=>{\n                    if (event.key === \"Escape\") {\n                        onEscapeKeyDown(event);\n                    }\n                }\n            }[\"useEscapeKeydown.useEffect.handleKeyDown\"];\n            ownerDocument.addEventListener(\"keydown\", handleKeyDown, {\n                capture: true\n            });\n            return ({\n                \"useEscapeKeydown.useEffect\": ()=>ownerDocument.removeEventListener(\"keydown\", handleKeyDown, {\n                        capture: true\n                    })\n            })[\"useEscapeKeydown.useEffect\"];\n        }\n    }[\"useEscapeKeydown.useEffect\"], [\n        onEscapeKeyDown,\n        ownerDocument\n    ]);\n}\n// ../node_modules/.pnpm/@radix-ui+react-dismissable-layer@1.1.10_@types+react-dom@18.3.5_@types+react@18.3.14__@types_dcs2l2jzs5flmzhfcv6rimpkfe/node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs\n\nvar DISMISSABLE_LAYER_NAME = \"DismissableLayer\";\nvar CONTEXT_UPDATE = \"dismissableLayer.update\";\nvar POINTER_DOWN_OUTSIDE = \"dismissableLayer.pointerDownOutside\";\nvar FOCUS_OUTSIDE = \"dismissableLayer.focusOutside\";\nvar originalBodyPointerEvents;\nvar DismissableLayerContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext({\n    layers: /* @__PURE__ */ new Set(),\n    layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),\n    branches: /* @__PURE__ */ new Set()\n});\nvar DismissableLayer = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const { disableOutsidePointerEvents = false, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss, ...layerProps } = props;\n    const context = react__WEBPACK_IMPORTED_MODULE_1__.useContext(DismissableLayerContext);\n    const [node, setNode] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const ownerDocument = node?.ownerDocument ?? globalThis?.document;\n    const [, force] = react__WEBPACK_IMPORTED_MODULE_1__.useState({});\n    const composedRefs = useComposedRefs(forwardedRef, {\n        \"DismissableLayer.useComposedRefs[composedRefs]\": (node2)=>setNode(node2)\n    }[\"DismissableLayer.useComposedRefs[composedRefs]\"]);\n    const layers = Array.from(context.layers);\n    const [highestLayerWithOutsidePointerEventsDisabled] = [\n        ...context.layersWithOutsidePointerEventsDisabled\n    ].slice(-1);\n    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);\n    const index = node ? layers.indexOf(node) : -1;\n    const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;\n    const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;\n    const pointerDownOutside = usePointerDownOutside({\n        \"DismissableLayer.usePointerDownOutside[pointerDownOutside]\": (event)=>{\n            const target = event.target;\n            const isPointerDownOnBranch = [\n                ...context.branches\n            ].some({\n                \"DismissableLayer.usePointerDownOutside[pointerDownOutside].isPointerDownOnBranch\": (branch)=>branch.contains(target)\n            }[\"DismissableLayer.usePointerDownOutside[pointerDownOutside].isPointerDownOnBranch\"]);\n            if (!isPointerEventsEnabled || isPointerDownOnBranch) return;\n            onPointerDownOutside?.(event);\n            onInteractOutside?.(event);\n            if (!event.defaultPrevented) onDismiss?.();\n        }\n    }[\"DismissableLayer.usePointerDownOutside[pointerDownOutside]\"], ownerDocument);\n    const focusOutside = useFocusOutside({\n        \"DismissableLayer.useFocusOutside[focusOutside]\": (event)=>{\n            const target = event.target;\n            const isFocusInBranch = [\n                ...context.branches\n            ].some({\n                \"DismissableLayer.useFocusOutside[focusOutside].isFocusInBranch\": (branch)=>branch.contains(target)\n            }[\"DismissableLayer.useFocusOutside[focusOutside].isFocusInBranch\"]);\n            if (isFocusInBranch) return;\n            onFocusOutside?.(event);\n            onInteractOutside?.(event);\n            if (!event.defaultPrevented) onDismiss?.();\n        }\n    }[\"DismissableLayer.useFocusOutside[focusOutside]\"], ownerDocument);\n    useEscapeKeydown({\n        \"DismissableLayer.useEscapeKeydown\": (event)=>{\n            const isHighestLayer = index === context.layers.size - 1;\n            if (!isHighestLayer) return;\n            onEscapeKeyDown?.(event);\n            if (!event.defaultPrevented && onDismiss) {\n                event.preventDefault();\n                onDismiss();\n            }\n        }\n    }[\"DismissableLayer.useEscapeKeydown\"], ownerDocument);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"DismissableLayer.useEffect\": ()=>{\n            if (!node) return;\n            if (disableOutsidePointerEvents) {\n                if (context.layersWithOutsidePointerEventsDisabled.size === 0) {\n                    originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;\n                    ownerDocument.body.style.pointerEvents = \"none\";\n                }\n                context.layersWithOutsidePointerEventsDisabled.add(node);\n            }\n            context.layers.add(node);\n            dispatchUpdate();\n            return ({\n                \"DismissableLayer.useEffect\": ()=>{\n                    if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1) {\n                        ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;\n                    }\n                }\n            })[\"DismissableLayer.useEffect\"];\n        }\n    }[\"DismissableLayer.useEffect\"], [\n        node,\n        ownerDocument,\n        disableOutsidePointerEvents,\n        context\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"DismissableLayer.useEffect\": ()=>{\n            return ({\n                \"DismissableLayer.useEffect\": ()=>{\n                    if (!node) return;\n                    context.layers.delete(node);\n                    context.layersWithOutsidePointerEventsDisabled.delete(node);\n                    dispatchUpdate();\n                }\n            })[\"DismissableLayer.useEffect\"];\n        }\n    }[\"DismissableLayer.useEffect\"], [\n        node,\n        context\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"DismissableLayer.useEffect\": ()=>{\n            const handleUpdate = {\n                \"DismissableLayer.useEffect.handleUpdate\": ()=>force({})\n            }[\"DismissableLayer.useEffect.handleUpdate\"];\n            document.addEventListener(CONTEXT_UPDATE, handleUpdate);\n            return ({\n                \"DismissableLayer.useEffect\": ()=>document.removeEventListener(CONTEXT_UPDATE, handleUpdate)\n            })[\"DismissableLayer.useEffect\"];\n        }\n    }[\"DismissableLayer.useEffect\"], []);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Primitive.div, {\n        ...layerProps,\n        ref: composedRefs,\n        style: {\n            pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? \"auto\" : \"none\" : void 0,\n            ...props.style\n        },\n        onFocusCapture: composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture),\n        onBlurCapture: composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture),\n        onPointerDownCapture: composeEventHandlers(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)\n    });\n});\nDismissableLayer.displayName = DISMISSABLE_LAYER_NAME;\nvar BRANCH_NAME = \"DismissableLayerBranch\";\nvar DismissableLayerBranch = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const context = react__WEBPACK_IMPORTED_MODULE_1__.useContext(DismissableLayerContext);\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"DismissableLayerBranch.useEffect\": ()=>{\n            const node = ref.current;\n            if (node) {\n                context.branches.add(node);\n                return ({\n                    \"DismissableLayerBranch.useEffect\": ()=>{\n                        context.branches.delete(node);\n                    }\n                })[\"DismissableLayerBranch.useEffect\"];\n            }\n        }\n    }[\"DismissableLayerBranch.useEffect\"], [\n        context.branches\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Primitive.div, {\n        ...props,\n        ref: composedRefs\n    });\n});\nDismissableLayerBranch.displayName = BRANCH_NAME;\nfunction usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis?.document) {\n    const handlePointerDownOutside = useCallbackRef(onPointerDownOutside);\n    const isPointerInsideReactTreeRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    const handleClickRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef({\n        \"usePointerDownOutside.useRef[handleClickRef]\": ()=>{}\n    }[\"usePointerDownOutside.useRef[handleClickRef]\"]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"usePointerDownOutside.useEffect\": ()=>{\n            const handlePointerDown = {\n                \"usePointerDownOutside.useEffect.handlePointerDown\": (event)=>{\n                    if (event.target && !isPointerInsideReactTreeRef.current) {\n                        let handleAndDispatchPointerDownOutsideEvent2 = {\n                            \"usePointerDownOutside.useEffect.handlePointerDown.handleAndDispatchPointerDownOutsideEvent2\": function() {\n                                handleAndDispatchCustomEvent(POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail, {\n                                    discrete: true\n                                });\n                            }\n                        }[\"usePointerDownOutside.useEffect.handlePointerDown.handleAndDispatchPointerDownOutsideEvent2\"];\n                        var handleAndDispatchPointerDownOutsideEvent = handleAndDispatchPointerDownOutsideEvent2;\n                        const eventDetail = {\n                            originalEvent: event\n                        };\n                        if (event.pointerType === \"touch\") {\n                            ownerDocument.removeEventListener(\"click\", handleClickRef.current);\n                            handleClickRef.current = handleAndDispatchPointerDownOutsideEvent2;\n                            ownerDocument.addEventListener(\"click\", handleClickRef.current, {\n                                once: true\n                            });\n                        } else {\n                            handleAndDispatchPointerDownOutsideEvent2();\n                        }\n                    } else {\n                        ownerDocument.removeEventListener(\"click\", handleClickRef.current);\n                    }\n                    isPointerInsideReactTreeRef.current = false;\n                }\n            }[\"usePointerDownOutside.useEffect.handlePointerDown\"];\n            const timerId = window.setTimeout({\n                \"usePointerDownOutside.useEffect.timerId\": ()=>{\n                    ownerDocument.addEventListener(\"pointerdown\", handlePointerDown);\n                }\n            }[\"usePointerDownOutside.useEffect.timerId\"], 0);\n            return ({\n                \"usePointerDownOutside.useEffect\": ()=>{\n                    window.clearTimeout(timerId);\n                    ownerDocument.removeEventListener(\"pointerdown\", handlePointerDown);\n                    ownerDocument.removeEventListener(\"click\", handleClickRef.current);\n                }\n            })[\"usePointerDownOutside.useEffect\"];\n        }\n    }[\"usePointerDownOutside.useEffect\"], [\n        ownerDocument,\n        handlePointerDownOutside\n    ]);\n    return {\n        // ensures we check React component tree (not just DOM tree)\n        onPointerDownCapture: ()=>isPointerInsideReactTreeRef.current = true\n    };\n}\nfunction useFocusOutside(onFocusOutside, ownerDocument = globalThis?.document) {\n    const handleFocusOutside = useCallbackRef(onFocusOutside);\n    const isFocusInsideReactTreeRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useFocusOutside.useEffect\": ()=>{\n            const handleFocus = {\n                \"useFocusOutside.useEffect.handleFocus\": (event)=>{\n                    if (event.target && !isFocusInsideReactTreeRef.current) {\n                        const eventDetail = {\n                            originalEvent: event\n                        };\n                        handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {\n                            discrete: false\n                        });\n                    }\n                }\n            }[\"useFocusOutside.useEffect.handleFocus\"];\n            ownerDocument.addEventListener(\"focusin\", handleFocus);\n            return ({\n                \"useFocusOutside.useEffect\": ()=>ownerDocument.removeEventListener(\"focusin\", handleFocus)\n            })[\"useFocusOutside.useEffect\"];\n        }\n    }[\"useFocusOutside.useEffect\"], [\n        ownerDocument,\n        handleFocusOutside\n    ]);\n    return {\n        onFocusCapture: ()=>isFocusInsideReactTreeRef.current = true,\n        onBlurCapture: ()=>isFocusInsideReactTreeRef.current = false\n    };\n}\nfunction dispatchUpdate() {\n    const event = new CustomEvent(CONTEXT_UPDATE);\n    document.dispatchEvent(event);\n}\nfunction handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {\n    const target = detail.originalEvent.target;\n    const event = new CustomEvent(name, {\n        bubbles: false,\n        cancelable: true,\n        detail\n    });\n    if (handler) target.addEventListener(name, handler, {\n        once: true\n    });\n    if (discrete) {\n        dispatchDiscreteCustomEvent(target, event);\n    } else {\n        target.dispatchEvent(event);\n    }\n}\n// ../node_modules/.pnpm/@radix-ui+react-focus-scope@1.1.7_@types+react-dom@18.3.5_@types+react@18.3.14__@types+react@_r3i6zfw7jzc6qbfsmvmyzd6wgu/node_modules/@radix-ui/react-focus-scope/dist/index.mjs\n\n\nvar AUTOFOCUS_ON_MOUNT = \"focusScope.autoFocusOnMount\";\nvar AUTOFOCUS_ON_UNMOUNT = \"focusScope.autoFocusOnUnmount\";\nvar EVENT_OPTIONS = {\n    bubbles: false,\n    cancelable: true\n};\nvar FOCUS_SCOPE_NAME = \"FocusScope\";\nvar FocusScope = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const { loop = false, trapped = false, onMountAutoFocus: onMountAutoFocusProp, onUnmountAutoFocus: onUnmountAutoFocusProp, ...scopeProps } = props;\n    const [container, setContainer] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const onMountAutoFocus = useCallbackRef(onMountAutoFocusProp);\n    const onUnmountAutoFocus = useCallbackRef(onUnmountAutoFocusProp);\n    const lastFocusedElementRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, {\n        \"FocusScope.useComposedRefs[composedRefs]\": (node)=>setContainer(node)\n    }[\"FocusScope.useComposedRefs[composedRefs]\"]);\n    const focusScope = react__WEBPACK_IMPORTED_MODULE_1__.useRef({\n        paused: false,\n        pause () {\n            this.paused = true;\n        },\n        resume () {\n            this.paused = false;\n        }\n    }).current;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"FocusScope.useEffect\": ()=>{\n            if (trapped) {\n                let handleFocusIn2 = {\n                    \"FocusScope.useEffect.handleFocusIn2\": function(event) {\n                        if (focusScope.paused || !container) return;\n                        const target = event.target;\n                        if (container.contains(target)) {\n                            lastFocusedElementRef.current = target;\n                        } else {\n                            focus(lastFocusedElementRef.current, {\n                                select: true\n                            });\n                        }\n                    }\n                }[\"FocusScope.useEffect.handleFocusIn2\"], handleFocusOut2 = {\n                    \"FocusScope.useEffect.handleFocusOut2\": function(event) {\n                        if (focusScope.paused || !container) return;\n                        const relatedTarget = event.relatedTarget;\n                        if (relatedTarget === null) return;\n                        if (!container.contains(relatedTarget)) {\n                            focus(lastFocusedElementRef.current, {\n                                select: true\n                            });\n                        }\n                    }\n                }[\"FocusScope.useEffect.handleFocusOut2\"], handleMutations2 = {\n                    \"FocusScope.useEffect.handleMutations2\": function(mutations) {\n                        const focusedElement = document.activeElement;\n                        if (focusedElement !== document.body) return;\n                        for (const mutation of mutations){\n                            if (mutation.removedNodes.length > 0) focus(container);\n                        }\n                    }\n                }[\"FocusScope.useEffect.handleMutations2\"];\n                var handleFocusIn = handleFocusIn2, handleFocusOut = handleFocusOut2, handleMutations = handleMutations2;\n                document.addEventListener(\"focusin\", handleFocusIn2);\n                document.addEventListener(\"focusout\", handleFocusOut2);\n                const mutationObserver = new MutationObserver(handleMutations2);\n                if (container) mutationObserver.observe(container, {\n                    childList: true,\n                    subtree: true\n                });\n                return ({\n                    \"FocusScope.useEffect\": ()=>{\n                        document.removeEventListener(\"focusin\", handleFocusIn2);\n                        document.removeEventListener(\"focusout\", handleFocusOut2);\n                        mutationObserver.disconnect();\n                    }\n                })[\"FocusScope.useEffect\"];\n            }\n        }\n    }[\"FocusScope.useEffect\"], [\n        trapped,\n        container,\n        focusScope.paused\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"FocusScope.useEffect\": ()=>{\n            if (container) {\n                focusScopesStack.add(focusScope);\n                const previouslyFocusedElement = document.activeElement;\n                const hasFocusedCandidate = container.contains(previouslyFocusedElement);\n                if (!hasFocusedCandidate) {\n                    const mountEvent = new CustomEvent(AUTOFOCUS_ON_MOUNT, EVENT_OPTIONS);\n                    container.addEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);\n                    container.dispatchEvent(mountEvent);\n                    if (!mountEvent.defaultPrevented) {\n                        focusFirst(removeLinks(getTabbableCandidates(container)), {\n                            select: true\n                        });\n                        if (document.activeElement === previouslyFocusedElement) {\n                            focus(container);\n                        }\n                    }\n                }\n                return ({\n                    \"FocusScope.useEffect\": ()=>{\n                        container.removeEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);\n                        setTimeout({\n                            \"FocusScope.useEffect\": ()=>{\n                                const unmountEvent = new CustomEvent(AUTOFOCUS_ON_UNMOUNT, EVENT_OPTIONS);\n                                container.addEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);\n                                container.dispatchEvent(unmountEvent);\n                                if (!unmountEvent.defaultPrevented) {\n                                    focus(previouslyFocusedElement ?? document.body, {\n                                        select: true\n                                    });\n                                }\n                                container.removeEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);\n                                focusScopesStack.remove(focusScope);\n                            }\n                        }[\"FocusScope.useEffect\"], 0);\n                    }\n                })[\"FocusScope.useEffect\"];\n            }\n        }\n    }[\"FocusScope.useEffect\"], [\n        container,\n        onMountAutoFocus,\n        onUnmountAutoFocus,\n        focusScope\n    ]);\n    const handleKeyDown = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"FocusScope.useCallback[handleKeyDown]\": (event)=>{\n            if (!loop && !trapped) return;\n            if (focusScope.paused) return;\n            const isTabKey = event.key === \"Tab\" && !event.altKey && !event.ctrlKey && !event.metaKey;\n            const focusedElement = document.activeElement;\n            if (isTabKey && focusedElement) {\n                const container2 = event.currentTarget;\n                const [first, last] = getTabbableEdges(container2);\n                const hasTabbableElementsInside = first && last;\n                if (!hasTabbableElementsInside) {\n                    if (focusedElement === container2) event.preventDefault();\n                } else {\n                    if (!event.shiftKey && focusedElement === last) {\n                        event.preventDefault();\n                        if (loop) focus(first, {\n                            select: true\n                        });\n                    } else if (event.shiftKey && focusedElement === first) {\n                        event.preventDefault();\n                        if (loop) focus(last, {\n                            select: true\n                        });\n                    }\n                }\n            }\n        }\n    }[\"FocusScope.useCallback[handleKeyDown]\"], [\n        loop,\n        trapped,\n        focusScope.paused\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Primitive.div, {\n        tabIndex: -1,\n        ...scopeProps,\n        ref: composedRefs,\n        onKeyDown: handleKeyDown\n    });\n});\nFocusScope.displayName = FOCUS_SCOPE_NAME;\nfunction focusFirst(candidates, { select = false } = {}) {\n    const previouslyFocusedElement = document.activeElement;\n    for (const candidate of candidates){\n        focus(candidate, {\n            select\n        });\n        if (document.activeElement !== previouslyFocusedElement) return;\n    }\n}\nfunction getTabbableEdges(container) {\n    const candidates = getTabbableCandidates(container);\n    const first = findVisible(candidates, container);\n    const last = findVisible(candidates.reverse(), container);\n    return [\n        first,\n        last\n    ];\n}\nfunction getTabbableCandidates(container) {\n    const nodes = [];\n    const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n        acceptNode: (node)=>{\n            const isHiddenInput = node.tagName === \"INPUT\" && node.type === \"hidden\";\n            if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n            return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n        }\n    });\n    while(walker.nextNode())nodes.push(walker.currentNode);\n    return nodes;\n}\nfunction findVisible(elements, container) {\n    for (const element of elements){\n        if (!isHidden(element, {\n            upTo: container\n        })) return element;\n    }\n}\nfunction isHidden(node, { upTo }) {\n    if (getComputedStyle(node).visibility === \"hidden\") return true;\n    while(node){\n        if (upTo !== void 0 && node === upTo) return false;\n        if (getComputedStyle(node).display === \"none\") return true;\n        node = node.parentElement;\n    }\n    return false;\n}\nfunction isSelectableInput(element) {\n    return element instanceof HTMLInputElement && \"select\" in element;\n}\nfunction focus(element, { select = false } = {}) {\n    if (element && element.focus) {\n        const previouslyFocusedElement = document.activeElement;\n        element.focus({\n            preventScroll: true\n        });\n        if (element !== previouslyFocusedElement && isSelectableInput(element) && select) element.select();\n    }\n}\nvar focusScopesStack = createFocusScopesStack();\nfunction createFocusScopesStack() {\n    let stack = [];\n    return {\n        add (focusScope) {\n            const activeFocusScope = stack[0];\n            if (focusScope !== activeFocusScope) {\n                activeFocusScope?.pause();\n            }\n            stack = arrayRemove(stack, focusScope);\n            stack.unshift(focusScope);\n        },\n        remove (focusScope) {\n            stack = arrayRemove(stack, focusScope);\n            stack[0]?.resume();\n        }\n    };\n}\nfunction arrayRemove(array, item) {\n    const updatedArray = [\n        ...array\n    ];\n    const index = updatedArray.indexOf(item);\n    if (index !== -1) {\n        updatedArray.splice(index, 1);\n    }\n    return updatedArray;\n}\nfunction removeLinks(items) {\n    return items.filter((item)=>item.tagName !== \"A\");\n}\n// ../node_modules/.pnpm/@radix-ui+react-portal@1.1.9_@types+react-dom@18.3.5_@types+react@18.3.14__@types+react@18.3._nlwlfidmfjbhuhdac2s4gonhum/node_modules/@radix-ui/react-portal/dist/index.mjs\n\n\n\nvar PORTAL_NAME = \"Portal\";\nvar Portal = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const { container: containerProp, ...portalProps } = props;\n    const [mounted, setMounted] = react__WEBPACK_IMPORTED_MODULE_1__.useState(false);\n    useLayoutEffect2({\n        \"Portal.useLayoutEffect2\": ()=>setMounted(true)\n    }[\"Portal.useLayoutEffect2\"], []);\n    const container = containerProp || mounted && globalThis?.document?.body;\n    return container ? /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_5__.createPortal(/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Primitive.div, {\n        ...portalProps,\n        ref: forwardedRef\n    }), container) : null;\n});\nPortal.displayName = PORTAL_NAME;\n// ../node_modules/.pnpm/@radix-ui+react-presence@1.1.4_@types+react-dom@18.3.5_@types+react@18.3.14__@types+react@18._rdubggcljnkcjot4tnwunht5nu/node_modules/@radix-ui/react-presence/dist/index.mjs\n\n\nfunction useStateMachine(initialState, machine) {\n    return react__WEBPACK_IMPORTED_MODULE_1__.useReducer({\n        \"useStateMachine.useReducer\": (state, event)=>{\n            const nextState = machine[state][event];\n            return nextState ?? state;\n        }\n    }[\"useStateMachine.useReducer\"], initialState);\n}\nvar Presence = (props)=>{\n    const { present, children } = props;\n    const presence = usePresence(present);\n    const child = typeof children === \"function\" ? children({\n        present: presence.isPresent\n    }) : react__WEBPACK_IMPORTED_MODULE_1__.Children.only(children);\n    const ref = useComposedRefs(presence.ref, getElementRef2(child));\n    const forceMount = typeof children === \"function\";\n    return forceMount || presence.isPresent ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.cloneElement(child, {\n        ref\n    }) : null;\n};\nPresence.displayName = \"Presence\";\nfunction usePresence(present) {\n    const [node, setNode] = react__WEBPACK_IMPORTED_MODULE_1__.useState();\n    const stylesRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const prevPresentRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(present);\n    const prevAnimationNameRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(\"none\");\n    const initialState = present ? \"mounted\" : \"unmounted\";\n    const [state, send] = useStateMachine(initialState, {\n        mounted: {\n            UNMOUNT: \"unmounted\",\n            ANIMATION_OUT: \"unmountSuspended\"\n        },\n        unmountSuspended: {\n            MOUNT: \"mounted\",\n            ANIMATION_END: \"unmounted\"\n        },\n        unmounted: {\n            MOUNT: \"mounted\"\n        }\n    });\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"usePresence.useEffect\": ()=>{\n            const currentAnimationName = getAnimationName(stylesRef.current);\n            prevAnimationNameRef.current = state === \"mounted\" ? currentAnimationName : \"none\";\n        }\n    }[\"usePresence.useEffect\"], [\n        state\n    ]);\n    useLayoutEffect2({\n        \"usePresence.useLayoutEffect2\": ()=>{\n            const styles = stylesRef.current;\n            const wasPresent = prevPresentRef.current;\n            const hasPresentChanged = wasPresent !== present;\n            if (hasPresentChanged) {\n                const prevAnimationName = prevAnimationNameRef.current;\n                const currentAnimationName = getAnimationName(styles);\n                if (present) {\n                    send(\"MOUNT\");\n                } else if (currentAnimationName === \"none\" || styles?.display === \"none\") {\n                    send(\"UNMOUNT\");\n                } else {\n                    const isAnimating = prevAnimationName !== currentAnimationName;\n                    if (wasPresent && isAnimating) {\n                        send(\"ANIMATION_OUT\");\n                    } else {\n                        send(\"UNMOUNT\");\n                    }\n                }\n                prevPresentRef.current = present;\n            }\n        }\n    }[\"usePresence.useLayoutEffect2\"], [\n        present,\n        send\n    ]);\n    useLayoutEffect2({\n        \"usePresence.useLayoutEffect2\": ()=>{\n            if (node) {\n                let timeoutId;\n                const ownerWindow = node.ownerDocument.defaultView ?? window;\n                const handleAnimationEnd = {\n                    \"usePresence.useLayoutEffect2.handleAnimationEnd\": (event)=>{\n                        const currentAnimationName = getAnimationName(stylesRef.current);\n                        const isCurrentAnimation = currentAnimationName.includes(event.animationName);\n                        if (event.target === node && isCurrentAnimation) {\n                            send(\"ANIMATION_END\");\n                            if (!prevPresentRef.current) {\n                                const currentFillMode = node.style.animationFillMode;\n                                node.style.animationFillMode = \"forwards\";\n                                timeoutId = ownerWindow.setTimeout({\n                                    \"usePresence.useLayoutEffect2.handleAnimationEnd\": ()=>{\n                                        if (node.style.animationFillMode === \"forwards\") {\n                                            node.style.animationFillMode = currentFillMode;\n                                        }\n                                    }\n                                }[\"usePresence.useLayoutEffect2.handleAnimationEnd\"]);\n                            }\n                        }\n                    }\n                }[\"usePresence.useLayoutEffect2.handleAnimationEnd\"];\n                const handleAnimationStart = {\n                    \"usePresence.useLayoutEffect2.handleAnimationStart\": (event)=>{\n                        if (event.target === node) {\n                            prevAnimationNameRef.current = getAnimationName(stylesRef.current);\n                        }\n                    }\n                }[\"usePresence.useLayoutEffect2.handleAnimationStart\"];\n                node.addEventListener(\"animationstart\", handleAnimationStart);\n                node.addEventListener(\"animationcancel\", handleAnimationEnd);\n                node.addEventListener(\"animationend\", handleAnimationEnd);\n                return ({\n                    \"usePresence.useLayoutEffect2\": ()=>{\n                        ownerWindow.clearTimeout(timeoutId);\n                        node.removeEventListener(\"animationstart\", handleAnimationStart);\n                        node.removeEventListener(\"animationcancel\", handleAnimationEnd);\n                        node.removeEventListener(\"animationend\", handleAnimationEnd);\n                    }\n                })[\"usePresence.useLayoutEffect2\"];\n            } else {\n                send(\"ANIMATION_END\");\n            }\n        }\n    }[\"usePresence.useLayoutEffect2\"], [\n        node,\n        send\n    ]);\n    return {\n        isPresent: [\n            \"mounted\",\n            \"unmountSuspended\"\n        ].includes(state),\n        ref: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"usePresence.useCallback\": (node2)=>{\n                stylesRef.current = node2 ? getComputedStyle(node2) : null;\n                setNode(node2);\n            }\n        }[\"usePresence.useCallback\"], [])\n    };\n}\nfunction getAnimationName(styles) {\n    return styles?.animationName || \"none\";\n}\nfunction getElementRef2(element) {\n    let getter = Object.getOwnPropertyDescriptor(element.props, \"ref\")?.get;\n    let mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n    if (mayWarn) {\n        return element.ref;\n    }\n    getter = Object.getOwnPropertyDescriptor(element, \"ref\")?.get;\n    mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n    if (mayWarn) {\n        return element.props.ref;\n    }\n    return element.props.ref || element.ref;\n}\n// ../node_modules/.pnpm/@radix-ui+react-focus-guards@1.1.2_@types+react@18.3.14_react@18.3.1/node_modules/@radix-ui/react-focus-guards/dist/index.mjs\n\nvar count2 = 0;\nfunction useFocusGuards() {\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useFocusGuards.useEffect\": ()=>{\n            const edgeGuards = document.querySelectorAll(\"[data-radix-focus-guard]\");\n            document.body.insertAdjacentElement(\"afterbegin\", edgeGuards[0] ?? createFocusGuard());\n            document.body.insertAdjacentElement(\"beforeend\", edgeGuards[1] ?? createFocusGuard());\n            count2++;\n            return ({\n                \"useFocusGuards.useEffect\": ()=>{\n                    if (count2 === 1) {\n                        document.querySelectorAll(\"[data-radix-focus-guard]\").forEach({\n                            \"useFocusGuards.useEffect\": (node)=>node.remove()\n                        }[\"useFocusGuards.useEffect\"]);\n                    }\n                    count2--;\n                }\n            })[\"useFocusGuards.useEffect\"];\n        }\n    }[\"useFocusGuards.useEffect\"], []);\n}\nfunction createFocusGuard() {\n    const element = document.createElement(\"span\");\n    element.setAttribute(\"data-radix-focus-guard\", \"\");\n    element.tabIndex = 0;\n    element.style.outline = \"none\";\n    element.style.opacity = \"0\";\n    element.style.position = \"fixed\";\n    element.style.pointerEvents = \"none\";\n    return element;\n}\n// ../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs\nvar __assign = function() {\n    __assign = Object.assign || function __assign2(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nfunction __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for(var i = 0, l = from.length, ar; i < l; i++){\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n}\n// ../node_modules/.pnpm/react-remove-scroll@2.7.1_@types+react@18.3.14_react@18.3.1/node_modules/react-remove-scroll/dist/es2015/Combination.js\n\n// ../node_modules/.pnpm/react-remove-scroll@2.7.1_@types+react@18.3.14_react@18.3.1/node_modules/react-remove-scroll/dist/es2015/UI.js\n\n// ../node_modules/.pnpm/react-remove-scroll-bar@2.3.8_@types+react@18.3.14_react@18.3.1/node_modules/react-remove-scroll-bar/dist/es2015/constants.js\nvar zeroRightClassName = \"right-scroll-bar-position\";\nvar fullWidthClassName = \"width-before-scroll-bar\";\nvar noScrollbarsClassName = \"with-scroll-bars-hidden\";\nvar removedBarSizeVariable = \"--removed-body-scroll-bar-size\";\n// ../node_modules/.pnpm/use-callback-ref@1.3.3_@types+react@18.3.14_react@18.3.1/node_modules/use-callback-ref/dist/es2015/assignRef.js\nfunction assignRef(ref, value1) {\n    if (typeof ref === \"function\") {\n        ref(value1);\n    } else if (ref) {\n        ref.current = value1;\n    }\n    return ref;\n}\n// ../node_modules/.pnpm/use-callback-ref@1.3.3_@types+react@18.3.14_react@18.3.1/node_modules/use-callback-ref/dist/es2015/useRef.js\n\nfunction useCallbackRef2(initialValue, callback) {\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        \"useCallbackRef2.useState8\": function() {\n            return {\n                // value\n                value: initialValue,\n                // last callback\n                callback,\n                // \"memoized\" public interface\n                facade: {\n                    get current () {\n                        return ref.value;\n                    },\n                    set current (value){\n                        var last = ref.value;\n                        if (last !== value) {\n                            ref.value = value;\n                            ref.callback(value, last);\n                        }\n                    }\n                }\n            };\n        }\n    }[\"useCallbackRef2.useState8\"])[0];\n    ref.callback = callback;\n    return ref.facade;\n}\n// ../node_modules/.pnpm/use-callback-ref@1.3.3_@types+react@18.3.14_react@18.3.1/node_modules/use-callback-ref/dist/es2015/useMergeRef.js\n\nvar useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_1__.useEffect;\nvar currentValues = /* @__PURE__ */ new WeakMap();\nfunction useMergeRefs(refs, defaultValue) {\n    var callbackRef = useCallbackRef2(defaultValue || null, {\n        \"useMergeRefs.useCallbackRef2[callbackRef]\": function(newValue) {\n            return refs.forEach({\n                \"useMergeRefs.useCallbackRef2[callbackRef]\": function(ref) {\n                    return assignRef(ref, newValue);\n                }\n            }[\"useMergeRefs.useCallbackRef2[callbackRef]\"]);\n        }\n    }[\"useMergeRefs.useCallbackRef2[callbackRef]\"]);\n    useIsomorphicLayoutEffect({\n        \"useMergeRefs.useIsomorphicLayoutEffect\": function() {\n            var oldValue = currentValues.get(callbackRef);\n            if (oldValue) {\n                var prevRefs_1 = new Set(oldValue);\n                var nextRefs_1 = new Set(refs);\n                var current_1 = callbackRef.current;\n                prevRefs_1.forEach({\n                    \"useMergeRefs.useIsomorphicLayoutEffect\": function(ref) {\n                        if (!nextRefs_1.has(ref)) {\n                            assignRef(ref, null);\n                        }\n                    }\n                }[\"useMergeRefs.useIsomorphicLayoutEffect\"]);\n                nextRefs_1.forEach({\n                    \"useMergeRefs.useIsomorphicLayoutEffect\": function(ref) {\n                        if (!prevRefs_1.has(ref)) {\n                            assignRef(ref, current_1);\n                        }\n                    }\n                }[\"useMergeRefs.useIsomorphicLayoutEffect\"]);\n            }\n            currentValues.set(callbackRef, refs);\n        }\n    }[\"useMergeRefs.useIsomorphicLayoutEffect\"], [\n        refs\n    ]);\n    return callbackRef;\n}\n// ../node_modules/.pnpm/use-sidecar@1.1.3_@types+react@18.3.14_react@18.3.1/node_modules/use-sidecar/dist/es2015/medium.js\nfunction ItoI(a) {\n    return a;\n}\nfunction innerCreateMedium(defaults, middleware) {\n    if (middleware === void 0) {\n        middleware = ItoI;\n    }\n    var buffer = [];\n    var assigned = false;\n    var medium = {\n        read: function() {\n            if (assigned) {\n                throw new Error(\"Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.\");\n            }\n            if (buffer.length) {\n                return buffer[buffer.length - 1];\n            }\n            return defaults;\n        },\n        useMedium: function(data) {\n            var item = middleware(data, assigned);\n            buffer.push(item);\n            return function() {\n                buffer = buffer.filter(function(x) {\n                    return x !== item;\n                });\n            };\n        },\n        assignSyncMedium: function(cb) {\n            assigned = true;\n            while(buffer.length){\n                var cbs = buffer;\n                buffer = [];\n                cbs.forEach(cb);\n            }\n            buffer = {\n                push: function(x) {\n                    return cb(x);\n                },\n                filter: function() {\n                    return buffer;\n                }\n            };\n        },\n        assignMedium: function(cb) {\n            assigned = true;\n            var pendingQueue = [];\n            if (buffer.length) {\n                var cbs = buffer;\n                buffer = [];\n                cbs.forEach(cb);\n                pendingQueue = buffer;\n            }\n            var executeQueue = function() {\n                var cbs2 = pendingQueue;\n                pendingQueue = [];\n                cbs2.forEach(cb);\n            };\n            var cycle = function() {\n                return Promise.resolve().then(executeQueue);\n            };\n            cycle();\n            buffer = {\n                push: function(x) {\n                    pendingQueue.push(x);\n                    cycle();\n                },\n                filter: function(filter) {\n                    pendingQueue = pendingQueue.filter(filter);\n                    return buffer;\n                }\n            };\n        }\n    };\n    return medium;\n}\nfunction createSidecarMedium(options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var medium = innerCreateMedium(null);\n    medium.options = __assign({\n        async: true,\n        ssr: false\n    }, options);\n    return medium;\n}\n// ../node_modules/.pnpm/use-sidecar@1.1.3_@types+react@18.3.14_react@18.3.1/node_modules/use-sidecar/dist/es2015/exports.js\n\nvar SideCar = function(_a) {\n    var sideCar = _a.sideCar, rest = __rest(_a, [\n        \"sideCar\"\n    ]);\n    if (!sideCar) {\n        throw new Error(\"Sidecar: please provide `sideCar` property to import the right car\");\n    }\n    var Target = sideCar.read();\n    if (!Target) {\n        throw new Error(\"Sidecar medium not found\");\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Target, __assign({}, rest));\n};\nSideCar.isSideCarExport = true;\nfunction exportSidecar(medium, exported) {\n    medium.useMedium(exported);\n    return SideCar;\n}\n// ../node_modules/.pnpm/react-remove-scroll@2.7.1_@types+react@18.3.14_react@18.3.1/node_modules/react-remove-scroll/dist/es2015/medium.js\nvar effectCar = createSidecarMedium();\n// ../node_modules/.pnpm/react-remove-scroll@2.7.1_@types+react@18.3.14_react@18.3.1/node_modules/react-remove-scroll/dist/es2015/UI.js\nvar nothing = function() {\n    return;\n};\nvar RemoveScroll = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function(props, parentRef) {\n    var ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    var _a = react__WEBPACK_IMPORTED_MODULE_1__.useState({\n        onScrollCapture: nothing,\n        onWheelCapture: nothing,\n        onTouchMoveCapture: nothing\n    }), callbacks = _a[0], setCallbacks = _a[1];\n    var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noRelative = props.noRelative, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container = _b === void 0 ? \"div\" : _b, gapMode = props.gapMode, rest = __rest(props, [\n        \"forwardProps\",\n        \"children\",\n        \"className\",\n        \"removeScrollBar\",\n        \"enabled\",\n        \"shards\",\n        \"sideCar\",\n        \"noRelative\",\n        \"noIsolation\",\n        \"inert\",\n        \"allowPinchZoom\",\n        \"as\",\n        \"gapMode\"\n    ]);\n    var SideCar2 = sideCar;\n    var containerRef = useMergeRefs([\n        ref,\n        parentRef\n    ]);\n    var containerProps = __assign(__assign({}, rest), callbacks);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, enabled && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(SideCar2, {\n        sideCar: effectCar,\n        removeScrollBar,\n        shards,\n        noRelative,\n        noIsolation,\n        inert,\n        setCallbacks,\n        allowPinchZoom: !!allowPinchZoom,\n        lockRef: ref,\n        gapMode\n    }), forwardProps ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.cloneElement(react__WEBPACK_IMPORTED_MODULE_1__.Children.only(children), __assign(__assign({}, containerProps), {\n        ref: containerRef\n    })) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Container, __assign({}, containerProps, {\n        className,\n        ref: containerRef\n    }), children));\n});\nRemoveScroll.defaultProps = {\n    enabled: true,\n    removeScrollBar: true,\n    inert: false\n};\nRemoveScroll.classNames = {\n    fullWidth: fullWidthClassName,\n    zeroRight: zeroRightClassName\n};\n// ../node_modules/.pnpm/react-remove-scroll@2.7.1_@types+react@18.3.14_react@18.3.1/node_modules/react-remove-scroll/dist/es2015/SideEffect.js\n\n// ../node_modules/.pnpm/react-remove-scroll-bar@2.3.8_@types+react@18.3.14_react@18.3.1/node_modules/react-remove-scroll-bar/dist/es2015/component.js\n\n// ../node_modules/.pnpm/react-style-singleton@2.2.3_@types+react@18.3.14_react@18.3.1/node_modules/react-style-singleton/dist/es2015/hook.js\n\n// ../node_modules/.pnpm/get-nonce@1.0.1/node_modules/get-nonce/dist/es2015/index.js\nvar currentNonce;\nvar getNonce = function() {\n    if (currentNonce) {\n        return currentNonce;\n    }\n    if (true) {\n        return __webpack_require__.nc;\n    }\n    return void 0;\n};\n// ../node_modules/.pnpm/react-style-singleton@2.2.3_@types+react@18.3.14_react@18.3.1/node_modules/react-style-singleton/dist/es2015/singleton.js\nfunction makeStyleTag() {\n    if (!document) return null;\n    var tag = document.createElement(\"style\");\n    tag.type = \"text/css\";\n    var nonce = getNonce();\n    if (nonce) {\n        tag.setAttribute(\"nonce\", nonce);\n    }\n    return tag;\n}\nfunction injectStyles(tag, css) {\n    if (tag.styleSheet) {\n        tag.styleSheet.cssText = css;\n    } else {\n        tag.appendChild(document.createTextNode(css));\n    }\n}\nfunction insertStyleTag(tag) {\n    var head = document.head || document.getElementsByTagName(\"head\")[0];\n    head.appendChild(tag);\n}\nvar stylesheetSingleton = function() {\n    var counter = 0;\n    var stylesheet = null;\n    return {\n        add: function(style) {\n            if (counter == 0) {\n                if (stylesheet = makeStyleTag()) {\n                    injectStyles(stylesheet, style);\n                    insertStyleTag(stylesheet);\n                }\n            }\n            counter++;\n        },\n        remove: function() {\n            counter--;\n            if (!counter && stylesheet) {\n                stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);\n                stylesheet = null;\n            }\n        }\n    };\n};\n// ../node_modules/.pnpm/react-style-singleton@2.2.3_@types+react@18.3.14_react@18.3.1/node_modules/react-style-singleton/dist/es2015/hook.js\nvar styleHookSingleton = function() {\n    var sheet = stylesheetSingleton();\n    return function(styles, isDynamic) {\n        react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n            \"styleHookSingleton.useEffect\": function() {\n                sheet.add(styles);\n                return ({\n                    \"styleHookSingleton.useEffect\": function() {\n                        sheet.remove();\n                    }\n                })[\"styleHookSingleton.useEffect\"];\n            }\n        }[\"styleHookSingleton.useEffect\"], [\n            styles && isDynamic\n        ]);\n    };\n};\n// ../node_modules/.pnpm/react-style-singleton@2.2.3_@types+react@18.3.14_react@18.3.1/node_modules/react-style-singleton/dist/es2015/component.js\nvar styleSingleton = function() {\n    var useStyle = styleHookSingleton();\n    var Sheet = function(_a) {\n        var styles = _a.styles, dynamic = _a.dynamic;\n        useStyle(styles, dynamic);\n        return null;\n    };\n    return Sheet;\n};\n// ../node_modules/.pnpm/react-remove-scroll-bar@2.3.8_@types+react@18.3.14_react@18.3.1/node_modules/react-remove-scroll-bar/dist/es2015/utils.js\nvar zeroGap = {\n    left: 0,\n    top: 0,\n    right: 0,\n    gap: 0\n};\nvar parse = function(x) {\n    return parseInt(x || \"\", 10) || 0;\n};\nvar getOffset = function(gapMode) {\n    var cs = window.getComputedStyle(document.body);\n    var left = cs[gapMode === \"padding\" ? \"paddingLeft\" : \"marginLeft\"];\n    var top = cs[gapMode === \"padding\" ? \"paddingTop\" : \"marginTop\"];\n    var right = cs[gapMode === \"padding\" ? \"paddingRight\" : \"marginRight\"];\n    return [\n        parse(left),\n        parse(top),\n        parse(right)\n    ];\n};\nvar getGapWidth = function(gapMode) {\n    if (gapMode === void 0) {\n        gapMode = \"margin\";\n    }\n    if (true) {\n        return zeroGap;\n    }\n    var offsets = getOffset(gapMode);\n    var documentWidth = document.documentElement.clientWidth;\n    var windowWidth = window.innerWidth;\n    return {\n        left: offsets[0],\n        top: offsets[1],\n        right: offsets[2],\n        gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])\n    };\n};\n// ../node_modules/.pnpm/react-remove-scroll-bar@2.3.8_@types+react@18.3.14_react@18.3.1/node_modules/react-remove-scroll-bar/dist/es2015/component.js\nvar Style = styleSingleton();\nvar lockAttribute = \"data-scroll-locked\";\nvar getStyles = function(_a, allowRelative, gapMode, important) {\n    var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;\n    if (gapMode === void 0) {\n        gapMode = \"margin\";\n    }\n    return \"\\n  .\".concat(noScrollbarsClassName, \" {\\n   overflow: hidden \").concat(important, \";\\n   padding-right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  body[\").concat(lockAttribute, \"] {\\n    overflow: hidden \").concat(important, \";\\n    overscroll-behavior: contain;\\n    \").concat([\n        allowRelative && \"position: relative \".concat(important, \";\"),\n        gapMode === \"margin\" && \"\\n    padding-left: \".concat(left, \"px;\\n    padding-top: \").concat(top, \"px;\\n    padding-right: \").concat(right, \"px;\\n    margin-left:0;\\n    margin-top:0;\\n    margin-right: \").concat(gap, \"px \").concat(important, \";\\n    \"),\n        gapMode === \"padding\" && \"padding-right: \".concat(gap, \"px \").concat(important, \";\")\n    ].filter(Boolean).join(\"\"), \"\\n  }\\n  \\n  .\").concat(zeroRightClassName, \" {\\n    right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  \\n  .\").concat(fullWidthClassName, \" {\\n    margin-right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  \\n  .\").concat(zeroRightClassName, \" .\").concat(zeroRightClassName, \" {\\n    right: 0 \").concat(important, \";\\n  }\\n  \\n  .\").concat(fullWidthClassName, \" .\").concat(fullWidthClassName, \" {\\n    margin-right: 0 \").concat(important, \";\\n  }\\n  \\n  body[\").concat(lockAttribute, \"] {\\n    \").concat(removedBarSizeVariable, \": \").concat(gap, \"px;\\n  }\\n\");\n};\nvar getCurrentUseCounter = function() {\n    var counter = parseInt(document.body.getAttribute(lockAttribute) || \"0\", 10);\n    return isFinite(counter) ? counter : 0;\n};\nvar useLockAttribute = function() {\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"useLockAttribute.useEffect\": function() {\n            document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());\n            return ({\n                \"useLockAttribute.useEffect\": function() {\n                    var newCounter = getCurrentUseCounter() - 1;\n                    if (newCounter <= 0) {\n                        document.body.removeAttribute(lockAttribute);\n                    } else {\n                        document.body.setAttribute(lockAttribute, newCounter.toString());\n                    }\n                }\n            })[\"useLockAttribute.useEffect\"];\n        }\n    }[\"useLockAttribute.useEffect\"], []);\n};\nvar RemoveScrollBar = function(_a) {\n    var noRelative = _a.noRelative, noImportant = _a.noImportant, _b = _a.gapMode, gapMode = _b === void 0 ? \"margin\" : _b;\n    useLockAttribute();\n    var gap = react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"RemoveScrollBar.useMemo[gap]\": function() {\n            return getGapWidth(gapMode);\n        }\n    }[\"RemoveScrollBar.useMemo[gap]\"], [\n        gapMode\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Style, {\n        styles: getStyles(gap, !noRelative, gapMode, !noImportant ? \"!important\" : \"\")\n    });\n};\n// ../node_modules/.pnpm/react-remove-scroll@2.7.1_@types+react@18.3.14_react@18.3.1/node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js\nvar passiveSupported = false;\nif (false) {}\nvar options;\nvar nonPassive = passiveSupported ? {\n    passive: false\n} : false;\n// ../node_modules/.pnpm/react-remove-scroll@2.7.1_@types+react@18.3.14_react@18.3.1/node_modules/react-remove-scroll/dist/es2015/handleScroll.js\nvar alwaysContainsScroll = function(node) {\n    return node.tagName === \"TEXTAREA\";\n};\nvar elementCanBeScrolled = function(node, overflow) {\n    if (!(node instanceof Element)) {\n        return false;\n    }\n    var styles = window.getComputedStyle(node);\n    return(// not-not-scrollable\n    styles[overflow] !== \"hidden\" && // contains scroll inside self\n    !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === \"visible\"));\n};\nvar elementCouldBeVScrolled = function(node) {\n    return elementCanBeScrolled(node, \"overflowY\");\n};\nvar elementCouldBeHScrolled = function(node) {\n    return elementCanBeScrolled(node, \"overflowX\");\n};\nvar locationCouldBeScrolled = function(axis, node) {\n    var ownerDocument = node.ownerDocument;\n    var current = node;\n    do {\n        if (typeof ShadowRoot !== \"undefined\" && current instanceof ShadowRoot) {\n            current = current.host;\n        }\n        var isScrollable = elementCouldBeScrolled(axis, current);\n        if (isScrollable) {\n            var _a = getScrollVariables(axis, current), scrollHeight = _a[1], clientHeight = _a[2];\n            if (scrollHeight > clientHeight) {\n                return true;\n            }\n        }\n        current = current.parentNode;\n    }while (current && current !== ownerDocument.body);\n    return false;\n};\nvar getVScrollVariables = function(_a) {\n    var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;\n    return [\n        scrollTop,\n        scrollHeight,\n        clientHeight\n    ];\n};\nvar getHScrollVariables = function(_a) {\n    var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;\n    return [\n        scrollLeft,\n        scrollWidth,\n        clientWidth\n    ];\n};\nvar elementCouldBeScrolled = function(axis, node) {\n    return axis === \"v\" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);\n};\nvar getScrollVariables = function(axis, node) {\n    return axis === \"v\" ? getVScrollVariables(node) : getHScrollVariables(node);\n};\nvar getDirectionFactor = function(axis, direction) {\n    return axis === \"h\" && direction === \"rtl\" ? -1 : 1;\n};\nvar handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {\n    var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);\n    var delta = directionFactor * sourceDelta;\n    var target = event.target;\n    var targetInLock = endTarget.contains(target);\n    var shouldCancelScroll = false;\n    var isDeltaPositive = delta > 0;\n    var availableScroll = 0;\n    var availableScrollTop = 0;\n    do {\n        if (!target) {\n            break;\n        }\n        var _a = getScrollVariables(axis, target), position = _a[0], scroll_1 = _a[1], capacity = _a[2];\n        var elementScroll = scroll_1 - capacity - directionFactor * position;\n        if (position || elementScroll) {\n            if (elementCouldBeScrolled(axis, target)) {\n                availableScroll += elementScroll;\n                availableScrollTop += position;\n            }\n        }\n        var parent_1 = target.parentNode;\n        target = parent_1 && parent_1.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? parent_1.host : parent_1;\n    }while (// portaled content\n    !targetInLock && target !== document.body || // self content\n    targetInLock && (endTarget.contains(target) || endTarget === target));\n    if (isDeltaPositive && (noOverscroll && Math.abs(availableScroll) < 1 || !noOverscroll && delta > availableScroll)) {\n        shouldCancelScroll = true;\n    } else if (!isDeltaPositive && (noOverscroll && Math.abs(availableScrollTop) < 1 || !noOverscroll && -delta > availableScrollTop)) {\n        shouldCancelScroll = true;\n    }\n    return shouldCancelScroll;\n};\n// ../node_modules/.pnpm/react-remove-scroll@2.7.1_@types+react@18.3.14_react@18.3.1/node_modules/react-remove-scroll/dist/es2015/SideEffect.js\nvar getTouchXY = function(event) {\n    return \"changedTouches\" in event ? [\n        event.changedTouches[0].clientX,\n        event.changedTouches[0].clientY\n    ] : [\n        0,\n        0\n    ];\n};\nvar getDeltaXY = function(event) {\n    return [\n        event.deltaX,\n        event.deltaY\n    ];\n};\nvar extractRef = function(ref) {\n    return ref && \"current\" in ref ? ref.current : ref;\n};\nvar deltaCompare = function(x, y) {\n    return x[0] === y[0] && x[1] === y[1];\n};\nvar generateStyle = function(id) {\n    return \"\\n  .block-interactivity-\".concat(id, \" {pointer-events: none;}\\n  .allow-interactivity-\").concat(id, \" {pointer-events: all;}\\n\");\n};\nvar idCounter = 0;\nvar lockStack = [];\nfunction RemoveScrollSideCar(props) {\n    var shouldPreventQueue = react__WEBPACK_IMPORTED_MODULE_1__.useRef([]);\n    var touchStartRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef([\n        0,\n        0\n    ]);\n    var activeAxis = react__WEBPACK_IMPORTED_MODULE_1__.useRef();\n    var id = react__WEBPACK_IMPORTED_MODULE_1__.useState(idCounter++)[0];\n    var Style2 = react__WEBPACK_IMPORTED_MODULE_1__.useState(styleSingleton)[0];\n    var lastProps = react__WEBPACK_IMPORTED_MODULE_1__.useRef(props);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"RemoveScrollSideCar.useEffect\": function() {\n            lastProps.current = props;\n        }\n    }[\"RemoveScrollSideCar.useEffect\"], [\n        props\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"RemoveScrollSideCar.useEffect\": function() {\n            if (props.inert) {\n                document.body.classList.add(\"block-interactivity-\".concat(id));\n                var allow_1 = __spreadArray([\n                    props.lockRef.current\n                ], (props.shards || []).map(extractRef), true).filter(Boolean);\n                allow_1.forEach({\n                    \"RemoveScrollSideCar.useEffect\": function(el) {\n                        return el.classList.add(\"allow-interactivity-\".concat(id));\n                    }\n                }[\"RemoveScrollSideCar.useEffect\"]);\n                return ({\n                    \"RemoveScrollSideCar.useEffect\": function() {\n                        document.body.classList.remove(\"block-interactivity-\".concat(id));\n                        allow_1.forEach({\n                            \"RemoveScrollSideCar.useEffect\": function(el) {\n                                return el.classList.remove(\"allow-interactivity-\".concat(id));\n                            }\n                        }[\"RemoveScrollSideCar.useEffect\"]);\n                    }\n                })[\"RemoveScrollSideCar.useEffect\"];\n            }\n            return;\n        }\n    }[\"RemoveScrollSideCar.useEffect\"], [\n        props.inert,\n        props.lockRef.current,\n        props.shards\n    ]);\n    var shouldCancelEvent = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"RemoveScrollSideCar.useCallback[shouldCancelEvent]\": function(event, parent) {\n            if (\"touches\" in event && event.touches.length === 2 || event.type === \"wheel\" && event.ctrlKey) {\n                return !lastProps.current.allowPinchZoom;\n            }\n            var touch = getTouchXY(event);\n            var touchStart = touchStartRef.current;\n            var deltaX = \"deltaX\" in event ? event.deltaX : touchStart[0] - touch[0];\n            var deltaY = \"deltaY\" in event ? event.deltaY : touchStart[1] - touch[1];\n            var currentAxis;\n            var target = event.target;\n            var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? \"h\" : \"v\";\n            if (\"touches\" in event && moveDirection === \"h\" && target.type === \"range\") {\n                return false;\n            }\n            var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);\n            if (!canBeScrolledInMainDirection) {\n                return true;\n            }\n            if (canBeScrolledInMainDirection) {\n                currentAxis = moveDirection;\n            } else {\n                currentAxis = moveDirection === \"v\" ? \"h\" : \"v\";\n                canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);\n            }\n            if (!canBeScrolledInMainDirection) {\n                return false;\n            }\n            if (!activeAxis.current && \"changedTouches\" in event && (deltaX || deltaY)) {\n                activeAxis.current = currentAxis;\n            }\n            if (!currentAxis) {\n                return true;\n            }\n            var cancelingAxis = activeAxis.current || currentAxis;\n            return handleScroll(cancelingAxis, parent, event, cancelingAxis === \"h\" ? deltaX : deltaY, true);\n        }\n    }[\"RemoveScrollSideCar.useCallback[shouldCancelEvent]\"], []);\n    var shouldPrevent = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"RemoveScrollSideCar.useCallback[shouldPrevent]\": function(_event) {\n            var event = _event;\n            if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {\n                return;\n            }\n            var delta = \"deltaY\" in event ? getDeltaXY(event) : getTouchXY(event);\n            var sourceEvent = shouldPreventQueue.current.filter({\n                \"RemoveScrollSideCar.useCallback[shouldPrevent]\": function(e) {\n                    return e.name === event.type && (e.target === event.target || event.target === e.shadowParent) && deltaCompare(e.delta, delta);\n                }\n            }[\"RemoveScrollSideCar.useCallback[shouldPrevent]\"])[0];\n            if (sourceEvent && sourceEvent.should) {\n                if (event.cancelable) {\n                    event.preventDefault();\n                }\n                return;\n            }\n            if (!sourceEvent) {\n                var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter({\n                    \"RemoveScrollSideCar.useCallback[shouldPrevent].shardNodes\": function(node) {\n                        return node.contains(event.target);\n                    }\n                }[\"RemoveScrollSideCar.useCallback[shouldPrevent].shardNodes\"]);\n                var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;\n                if (shouldStop) {\n                    if (event.cancelable) {\n                        event.preventDefault();\n                    }\n                }\n            }\n        }\n    }[\"RemoveScrollSideCar.useCallback[shouldPrevent]\"], []);\n    var shouldCancel = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"RemoveScrollSideCar.useCallback[shouldCancel]\": function(name, delta, target, should) {\n            var event = {\n                name,\n                delta,\n                target,\n                should,\n                shadowParent: getOutermostShadowParent(target)\n            };\n            shouldPreventQueue.current.push(event);\n            setTimeout({\n                \"RemoveScrollSideCar.useCallback[shouldCancel]\": function() {\n                    shouldPreventQueue.current = shouldPreventQueue.current.filter({\n                        \"RemoveScrollSideCar.useCallback[shouldCancel]\": function(e) {\n                            return e !== event;\n                        }\n                    }[\"RemoveScrollSideCar.useCallback[shouldCancel]\"]);\n                }\n            }[\"RemoveScrollSideCar.useCallback[shouldCancel]\"], 1);\n        }\n    }[\"RemoveScrollSideCar.useCallback[shouldCancel]\"], []);\n    var scrollTouchStart = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"RemoveScrollSideCar.useCallback[scrollTouchStart]\": function(event) {\n            touchStartRef.current = getTouchXY(event);\n            activeAxis.current = void 0;\n        }\n    }[\"RemoveScrollSideCar.useCallback[scrollTouchStart]\"], []);\n    var scrollWheel = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"RemoveScrollSideCar.useCallback[scrollWheel]\": function(event) {\n            shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));\n        }\n    }[\"RemoveScrollSideCar.useCallback[scrollWheel]\"], []);\n    var scrollTouchMove = react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n        \"RemoveScrollSideCar.useCallback[scrollTouchMove]\": function(event) {\n            shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));\n        }\n    }[\"RemoveScrollSideCar.useCallback[scrollTouchMove]\"], []);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"RemoveScrollSideCar.useEffect\": function() {\n            lockStack.push(Style2);\n            props.setCallbacks({\n                onScrollCapture: scrollWheel,\n                onWheelCapture: scrollWheel,\n                onTouchMoveCapture: scrollTouchMove\n            });\n            document.addEventListener(\"wheel\", shouldPrevent, nonPassive);\n            document.addEventListener(\"touchmove\", shouldPrevent, nonPassive);\n            document.addEventListener(\"touchstart\", scrollTouchStart, nonPassive);\n            return ({\n                \"RemoveScrollSideCar.useEffect\": function() {\n                    lockStack = lockStack.filter({\n                        \"RemoveScrollSideCar.useEffect\": function(inst) {\n                            return inst !== Style2;\n                        }\n                    }[\"RemoveScrollSideCar.useEffect\"]);\n                    document.removeEventListener(\"wheel\", shouldPrevent, nonPassive);\n                    document.removeEventListener(\"touchmove\", shouldPrevent, nonPassive);\n                    document.removeEventListener(\"touchstart\", scrollTouchStart, nonPassive);\n                }\n            })[\"RemoveScrollSideCar.useEffect\"];\n        }\n    }[\"RemoveScrollSideCar.useEffect\"], []);\n    var removeScrollBar = props.removeScrollBar, inert = props.inert;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, inert ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Style2, {\n        styles: generateStyle(id)\n    }) : null, removeScrollBar ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RemoveScrollBar, {\n        noRelative: props.noRelative,\n        gapMode: props.gapMode\n    }) : null);\n}\nfunction getOutermostShadowParent(node) {\n    var shadowParent = null;\n    while(node !== null){\n        if (node instanceof ShadowRoot) {\n            shadowParent = node.host;\n            node = node.host;\n        }\n        node = node.parentNode;\n    }\n    return shadowParent;\n}\n// ../node_modules/.pnpm/react-remove-scroll@2.7.1_@types+react@18.3.14_react@18.3.1/node_modules/react-remove-scroll/dist/es2015/sidecar.js\nvar sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);\n// ../node_modules/.pnpm/react-remove-scroll@2.7.1_@types+react@18.3.14_react@18.3.1/node_modules/react-remove-scroll/dist/es2015/Combination.js\nvar ReactRemoveScroll = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(function(props, ref) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(RemoveScroll, __assign({}, props, {\n        ref,\n        sideCar: sidecar_default\n    }));\n});\nReactRemoveScroll.classNames = RemoveScroll.classNames;\nvar Combination_default = ReactRemoveScroll;\n// ../node_modules/.pnpm/aria-hidden@1.2.6/node_modules/aria-hidden/dist/es2015/index.js\nvar getDefaultParent = function(originalTarget) {\n    if (typeof document === \"undefined\") {\n        return null;\n    }\n    var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;\n    return sampleTarget.ownerDocument.body;\n};\nvar counterMap = /* @__PURE__ */ new WeakMap();\nvar uncontrolledNodes = /* @__PURE__ */ new WeakMap();\nvar markerMap = {};\nvar lockCount = 0;\nvar unwrapHost = function(node) {\n    return node && (node.host || unwrapHost(node.parentNode));\n};\nvar correctTargets = function(parent, targets) {\n    return targets.map(function(target) {\n        if (parent.contains(target)) {\n            return target;\n        }\n        var correctedTarget = unwrapHost(target);\n        if (correctedTarget && parent.contains(correctedTarget)) {\n            return correctedTarget;\n        }\n        console.error(\"aria-hidden\", target, \"in not contained inside\", parent, \". Doing nothing\");\n        return null;\n    }).filter(function(x) {\n        return Boolean(x);\n    });\n};\nvar applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {\n    var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [\n        originalTarget\n    ]);\n    if (!markerMap[markerName]) {\n        markerMap[markerName] = /* @__PURE__ */ new WeakMap();\n    }\n    var markerCounter = markerMap[markerName];\n    var hiddenNodes = [];\n    var elementsToKeep = /* @__PURE__ */ new Set();\n    var elementsToStop = new Set(targets);\n    var keep = function(el) {\n        if (!el || elementsToKeep.has(el)) {\n            return;\n        }\n        elementsToKeep.add(el);\n        keep(el.parentNode);\n    };\n    targets.forEach(keep);\n    var deep = function(parent) {\n        if (!parent || elementsToStop.has(parent)) {\n            return;\n        }\n        Array.prototype.forEach.call(parent.children, function(node) {\n            if (elementsToKeep.has(node)) {\n                deep(node);\n            } else {\n                try {\n                    var attr = node.getAttribute(controlAttribute);\n                    var alreadyHidden = attr !== null && attr !== \"false\";\n                    var counterValue = (counterMap.get(node) || 0) + 1;\n                    var markerValue = (markerCounter.get(node) || 0) + 1;\n                    counterMap.set(node, counterValue);\n                    markerCounter.set(node, markerValue);\n                    hiddenNodes.push(node);\n                    if (counterValue === 1 && alreadyHidden) {\n                        uncontrolledNodes.set(node, true);\n                    }\n                    if (markerValue === 1) {\n                        node.setAttribute(markerName, \"true\");\n                    }\n                    if (!alreadyHidden) {\n                        node.setAttribute(controlAttribute, \"true\");\n                    }\n                } catch (e) {\n                    console.error(\"aria-hidden: cannot operate on \", node, e);\n                }\n            }\n        });\n    };\n    deep(parentNode);\n    elementsToKeep.clear();\n    lockCount++;\n    return function() {\n        hiddenNodes.forEach(function(node) {\n            var counterValue = counterMap.get(node) - 1;\n            var markerValue = markerCounter.get(node) - 1;\n            counterMap.set(node, counterValue);\n            markerCounter.set(node, markerValue);\n            if (!counterValue) {\n                if (!uncontrolledNodes.has(node)) {\n                    node.removeAttribute(controlAttribute);\n                }\n                uncontrolledNodes.delete(node);\n            }\n            if (!markerValue) {\n                node.removeAttribute(markerName);\n            }\n        });\n        lockCount--;\n        if (!lockCount) {\n            counterMap = /* @__PURE__ */ new WeakMap();\n            counterMap = /* @__PURE__ */ new WeakMap();\n            uncontrolledNodes = /* @__PURE__ */ new WeakMap();\n            markerMap = {};\n        }\n    };\n};\nvar hideOthers = function(originalTarget, parentNode, markerName) {\n    if (markerName === void 0) {\n        markerName = \"data-aria-hidden\";\n    }\n    var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [\n        originalTarget\n    ]);\n    var activeParentNode = parentNode || getDefaultParent(originalTarget);\n    if (!activeParentNode) {\n        return function() {\n            return null;\n        };\n    }\n    targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll(\"[aria-live], script\")));\n    return applyAttributeToOthers(targets, activeParentNode, markerName, \"aria-hidden\");\n};\n// ../node_modules/.pnpm/@radix-ui+react-dialog@1.1.14_@types+react-dom@18.3.5_@types+react@18.3.14__@types+react@18.3_osy3texbcyy7oe3sqigksqvg74/node_modules/@radix-ui/react-dialog/dist/index.mjs\n\nvar DIALOG_NAME = \"Dialog\";\nvar [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\nvar [DialogProvider, useDialogContext] = createDialogContext(DIALOG_NAME);\nvar Dialog = (props)=>{\n    const { __scopeDialog, children, open: openProp, defaultOpen, onOpenChange, modal = true } = props;\n    const triggerRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const contentRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const [open, setOpen] = useControllableState({\n        prop: openProp,\n        defaultProp: defaultOpen ?? false,\n        onChange: onOpenChange,\n        caller: DIALOG_NAME\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DialogProvider, {\n        scope: __scopeDialog,\n        triggerRef,\n        contentRef,\n        contentId: useId(),\n        titleId: useId(),\n        descriptionId: useId(),\n        open,\n        onOpenChange: setOpen,\n        onOpenToggle: react__WEBPACK_IMPORTED_MODULE_1__.useCallback({\n            \"Dialog.useCallback\": ()=>setOpen({\n                    \"Dialog.useCallback\": (prevOpen)=>!prevOpen\n                }[\"Dialog.useCallback\"])\n        }[\"Dialog.useCallback\"], [\n            setOpen\n        ]),\n        modal,\n        children\n    });\n};\nDialog.displayName = DIALOG_NAME;\nvar TRIGGER_NAME = \"DialogTrigger\";\nvar DialogTrigger = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const { __scopeDialog, ...triggerProps } = props;\n    const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Primitive.button, {\n        type: \"button\",\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": context.open,\n        \"aria-controls\": context.contentId,\n        \"data-state\": getState(context.open),\n        ...triggerProps,\n        ref: composedTriggerRef,\n        onClick: composeEventHandlers(props.onClick, context.onOpenToggle)\n    });\n});\nDialogTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME2 = \"DialogPortal\";\nvar [PortalProvider, usePortalContext] = createDialogContext(PORTAL_NAME2, {\n    forceMount: void 0\n});\nvar DialogPortal = (props)=>{\n    const { __scopeDialog, forceMount, children, container } = props;\n    const context = useDialogContext(PORTAL_NAME2, __scopeDialog);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PortalProvider, {\n        scope: __scopeDialog,\n        forceMount,\n        children: react__WEBPACK_IMPORTED_MODULE_1__.Children.map(children, (child)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Presence, {\n                present: forceMount || context.open,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Portal, {\n                    asChild: true,\n                    container,\n                    children: child\n                })\n            }))\n    });\n};\nDialogPortal.displayName = PORTAL_NAME2;\nvar OVERLAY_NAME = \"DialogOverlay\";\nvar DialogOverlay = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n    return context.modal ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Presence, {\n        present: forceMount || context.open,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DialogOverlayImpl, {\n            ...overlayProps,\n            ref: forwardedRef\n        })\n    }) : null;\n});\nDialogOverlay.displayName = OVERLAY_NAME;\nvar Slot2 = createSlot(\"DialogOverlay.RemoveScroll\");\nvar DialogOverlayImpl = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const { __scopeDialog, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n    return(// Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n    // ie. when `Overlay` and `Content` are siblings\n    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Combination_default, {\n        as: Slot2,\n        allowPinchZoom: true,\n        shards: [\n            context.contentRef\n        ],\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Primitive.div, {\n            \"data-state\": getState(context.open),\n            ...overlayProps,\n            ref: forwardedRef,\n            style: {\n                pointerEvents: \"auto\",\n                ...overlayProps.style\n            }\n        })\n    }));\n});\nvar CONTENT_NAME = \"DialogContent\";\nvar DialogContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Presence, {\n        present: forceMount || context.open,\n        children: context.modal ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DialogContentModal, {\n            ...contentProps,\n            ref: forwardedRef\n        }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DialogContentNonModal, {\n            ...contentProps,\n            ref: forwardedRef\n        })\n    });\n});\nDialogContent.displayName = CONTENT_NAME;\nvar DialogContentModal = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const contentRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"DialogContentModal.useEffect\": ()=>{\n            const content = contentRef.current;\n            if (content) return hideOthers(content);\n        }\n    }[\"DialogContentModal.useEffect\"], []);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DialogContentImpl, {\n        ...props,\n        ref: composedRefs,\n        trapFocus: context.open,\n        disableOutsidePointerEvents: true,\n        onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event)=>{\n            event.preventDefault();\n            context.triggerRef.current?.focus();\n        }),\n        onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, (event)=>{\n            const originalEvent = event.detail.originalEvent;\n            const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n            const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n            if (isRightClick) event.preventDefault();\n        }),\n        onFocusOutside: composeEventHandlers(props.onFocusOutside, (event)=>event.preventDefault())\n    });\n});\nvar DialogContentNonModal = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const hasInteractedOutsideRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    const hasPointerDownOutsideRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DialogContentImpl, {\n        ...props,\n        ref: forwardedRef,\n        trapFocus: false,\n        disableOutsidePointerEvents: false,\n        onCloseAutoFocus: (event)=>{\n            props.onCloseAutoFocus?.(event);\n            if (!event.defaultPrevented) {\n                if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n                event.preventDefault();\n            }\n            hasInteractedOutsideRef.current = false;\n            hasPointerDownOutsideRef.current = false;\n        },\n        onInteractOutside: (event)=>{\n            props.onInteractOutside?.(event);\n            if (!event.defaultPrevented) {\n                hasInteractedOutsideRef.current = true;\n                if (event.detail.originalEvent.type === \"pointerdown\") {\n                    hasPointerDownOutsideRef.current = true;\n                }\n            }\n            const target = event.target;\n            const targetIsTrigger = context.triggerRef.current?.contains(target);\n            if (targetIsTrigger) event.preventDefault();\n            if (event.detail.originalEvent.type === \"focusin\" && hasPointerDownOutsideRef.current) {\n                event.preventDefault();\n            }\n        }\n    });\n});\nvar DialogContentImpl = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n    const contentRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n    useFocusGuards();\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(FocusScope, {\n                asChild: true,\n                loop: true,\n                trapped: trapFocus,\n                onMountAutoFocus: onOpenAutoFocus,\n                onUnmountAutoFocus: onCloseAutoFocus,\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DismissableLayer, {\n                    role: \"dialog\",\n                    id: context.contentId,\n                    \"aria-describedby\": context.descriptionId,\n                    \"aria-labelledby\": context.titleId,\n                    \"data-state\": getState(context.open),\n                    ...contentProps,\n                    ref: composedRefs,\n                    onDismiss: ()=>context.onOpenChange(false)\n                })\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(TitleWarning, {\n                        titleId: context.titleId\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DescriptionWarning, {\n                        contentRef,\n                        descriptionId: context.descriptionId\n                    })\n                ]\n            })\n        ]\n    });\n});\nvar TITLE_NAME = \"DialogTitle\";\nvar DialogTitle = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const { __scopeDialog, ...titleProps } = props;\n    const context = useDialogContext(TITLE_NAME, __scopeDialog);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Primitive.h2, {\n        id: context.titleId,\n        ...titleProps,\n        ref: forwardedRef\n    });\n});\nDialogTitle.displayName = TITLE_NAME;\nvar DESCRIPTION_NAME = \"DialogDescription\";\nvar DialogDescription = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const { __scopeDialog, ...descriptionProps } = props;\n    const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Primitive.p, {\n        id: context.descriptionId,\n        ...descriptionProps,\n        ref: forwardedRef\n    });\n});\nDialogDescription.displayName = DESCRIPTION_NAME;\nvar CLOSE_NAME = \"DialogClose\";\nvar DialogClose = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const { __scopeDialog, ...closeProps } = props;\n    const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Primitive.button, {\n        type: \"button\",\n        ...closeProps,\n        ref: forwardedRef,\n        onClick: composeEventHandlers(props.onClick, ()=>context.onOpenChange(false))\n    });\n});\nDialogClose.displayName = CLOSE_NAME;\nfunction getState(open) {\n    return open ? \"open\" : \"closed\";\n}\nvar TITLE_WARNING_NAME = \"DialogTitleWarning\";\nvar [WarningProvider, useWarningContext] = createContext22(TITLE_WARNING_NAME, {\n    contentName: CONTENT_NAME,\n    titleName: TITLE_NAME,\n    docsSlug: \"dialog\"\n});\nvar TitleWarning = ({ titleId })=>{\n    const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n    const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"TitleWarning.useEffect\": ()=>{\n            if (titleId) {\n                const hasTitle = document.getElementById(titleId);\n                if (!hasTitle) console.error(MESSAGE);\n            }\n        }\n    }[\"TitleWarning.useEffect\"], [\n        MESSAGE,\n        titleId\n    ]);\n    return null;\n};\nvar DESCRIPTION_WARNING_NAME = \"DialogDescriptionWarning\";\nvar DescriptionWarning = ({ contentRef, descriptionId })=>{\n    const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n    const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"DescriptionWarning.useEffect\": ()=>{\n            const describedById = contentRef.current?.getAttribute(\"aria-describedby\");\n            if (descriptionId && describedById) {\n                const hasDescription = document.getElementById(descriptionId);\n                if (!hasDescription) console.warn(MESSAGE);\n            }\n        }\n    }[\"DescriptionWarning.useEffect\"], [\n        MESSAGE,\n        contentRef,\n        descriptionId\n    ]);\n    return null;\n};\nvar Root = Dialog;\nvar Portal2 = DialogPortal;\nvar Overlay = DialogOverlay;\nvar Content = DialogContent;\nvar Title = DialogTitle;\nvar Description = DialogDescription;\nvar Close = DialogClose;\n// src/libraries/react/components/ui/dialog.tsx\n\nvar Dialog2 = Root;\nvar DialogPortal2 = ({ children, ...props })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Portal2, {\n        ...props,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n            className: \"au-root\",\n            children\n        })\n    });\n};\nvar DialogOverlay2 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Overlay, {\n        ref,\n        className: cn(\"au-fixed au-inset-0 au-z-50 au-bg-black/80  data-[state=open]:au-animate-in data-[state=closed]:au-animate-out data-[state=closed]:au-fade-out-0 data-[state=open]:au-fade-in-0\", className),\n        ...props\n    }));\nDialogOverlay2.displayName = Overlay.displayName;\nvar DialogContent2 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, children, ...props }, ref)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(DialogPortal2, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DialogOverlay2, {}),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(Content, {\n                ref,\n                className: cn(`au-fixed au-left-[50%] au-top-[50%] au-z-50 au-grid au-w-full au-max-w-lg au-translate-x-[-50%] au-translate-y-[-50%] au-gap-4 au-border au-bg-background au-p-6 au-shadow-lg au-duration-200 data-[state=open]:au-animate-in data-[state=closed]:au-animate-out data-[state=closed]:au-fade-out-0 data-[state=open]:au-fade-in-0 data-[state=closed]:au-zoom-out-95 data-[state=open]:au-zoom-in-95 data-[state=closed]:au-slide-out-to-left-1/2 data-[state=closed]:au-slide-out-to-top-[48%] data-[state=open]:au-slide-in-from-left-1/2 data-[state=open]:au-slide-in-from-top-[48%] sm:au-rounded-lg`, className),\n                ...props,\n                children: [\n                    children,\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(Close, {\n                        className: \"au-absolute au-right-4 au-top-4 au-rounded-sm au-opacity-70 au-ring-offset-background au-transition-opacity hover:au-opacity-100 focus:au-outline-none focus:au-ring-2 focus:au-ring-ring focus:au-ring-offset-2 disabled:au-pointer-events-none data-[state=open]:au-bg-accent data-[state=open]:au-text-muted-foreground\",\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(X, {\n                                className: \"au-h-4 au-w-4\"\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                className: \"au-sr-only\",\n                                children: \"Close\"\n                            })\n                        ]\n                    })\n                ]\n            })\n        ]\n    }));\nDialogContent2.displayName = Content.displayName;\nvar DialogHeader = ({ className, ...props })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: cn(\"au-flex au-flex-col au-space-y-1.5 au-text-center sm:au-text-left\", className),\n        ...props\n    });\nDialogHeader.displayName = \"DialogHeader\";\nvar DialogFooter = ({ className, ...props })=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: cn(\"au-flex au-flex-col-reverse sm:au-flex-row sm:au-justify-end sm:au-space-x-2\", className),\n        ...props\n    });\nDialogFooter.displayName = \"DialogFooter\";\nvar DialogTitle2 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Title, {\n        ref,\n        className: cn(\"au-text-lg au-font-semibold au-leading-none au-tracking-tight\", className),\n        ...props\n    }));\nDialogTitle2.displayName = Title.displayName;\nvar DialogDescription2 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Description, {\n        ref,\n        className: cn(\"au-text-sm au-text-muted-foreground\", className),\n        ...props\n    }));\nDialogDescription2.displayName = Description.displayName;\n// src/libraries/react/components/attach-dialog/lib/attach-content.tsx\n\nvar getAttachContent = (preview)=>{\n    const { scenario, product_name, recurring, current_product_name, next_cycle_at } = preview;\n    const nextCycleAtStr = next_cycle_at ? new Date(next_cycle_at).toLocaleDateString() : void 0;\n    switch(scenario){\n        case \"scheduled\":\n            return {\n                title: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                    children: [\n                        product_name,\n                        \" product already scheduled\"\n                    ]\n                }),\n                message: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                    children: [\n                        \"You are currently on product \",\n                        current_product_name,\n                        \" and are scheduled to start \",\n                        product_name,\n                        \" on \",\n                        nextCycleAtStr,\n                        \".\"\n                    ]\n                })\n            };\n        case \"active\":\n            return {\n                title: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                    children: \"Product already active\"\n                }),\n                message: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                    children: \"You are already subscribed to this product.\"\n                })\n            };\n        case \"new\":\n            if (recurring) {\n                return {\n                    title: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                        children: [\n                            \"Subscribe to \",\n                            product_name\n                        ]\n                    }),\n                    message: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                        children: [\n                            \"By clicking confirm, you will be subscribed to \",\n                            product_name,\n                            \" and your card will be charged immediately.\"\n                        ]\n                    })\n                };\n            } else {\n                return {\n                    title: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                        children: [\n                            \"Purchase \",\n                            product_name\n                        ]\n                    }),\n                    message: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                        children: [\n                            \"By clicking confirm, you will purchase \",\n                            product_name,\n                            \" and your card will be charged immediately.\"\n                        ]\n                    })\n                };\n            }\n        case \"renew\":\n            return {\n                title: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                    children: \"Renew\"\n                }),\n                message: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                    children: [\n                        \"By clicking confirm, you will renew your subscription to\",\n                        \" \",\n                        product_name,\n                        \".\"\n                    ]\n                })\n            };\n        case \"upgrade\":\n            return {\n                title: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                    children: [\n                        \"Upgrade to \",\n                        product_name\n                    ]\n                }),\n                message: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                    children: [\n                        \"By clicking confirm, you will upgrade to \",\n                        product_name,\n                        \" and your payment method will be charged immediately.\"\n                    ]\n                })\n            };\n        case \"downgrade\":\n            return {\n                title: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                    children: [\n                        \"Downgrade to \",\n                        product_name\n                    ]\n                }),\n                message: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                    children: [\n                        \"By clicking confirm, your current subscription to\",\n                        \" \",\n                        current_product_name,\n                        \" will be cancelled and a new subscription to\",\n                        \" \",\n                        product_name,\n                        \" will begin on \",\n                        nextCycleAtStr,\n                        \".\"\n                    ]\n                })\n            };\n        case \"cancel\":\n            return {\n                title: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                    children: \"Cancel\"\n                }),\n                message: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                    children: [\n                        \"By clicking confirm, your subscription to \",\n                        current_product_name,\n                        \" \",\n                        \"will end on \",\n                        nextCycleAtStr,\n                        \".\"\n                    ]\n                })\n            };\n        default:\n            return {\n                title: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                    children: \"Change Subscription\"\n                }),\n                message: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                    children: \"You are about to change your subscription.\"\n                })\n            };\n    }\n};\n// src/libraries/react/components/attach-dialog/attach-dialog-synced.tsx\n\nfunction AttachDialog(params) {\n    const { attach } = useCustomer();\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [optionsInput, setOptionsInput] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(params?.preview?.options || []);\n    const getTotalPrice = ()=>{\n        let sum = due_today?.price || 0;\n        optionsInput.forEach((option)=>{\n            if (option.price && option.quantity) {\n                sum += option.price * (option.quantity / option.billing_units);\n            }\n        });\n        return sum;\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AttachDialog.useEffect15\": ()=>{\n            setOptionsInput(params?.preview?.options || []);\n        }\n    }[\"AttachDialog.useEffect15\"], [\n        params?.preview?.options\n    ]);\n    if (!params || !params.preview) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {});\n    }\n    const { open, setOpen, preview } = params;\n    const { items, due_today } = preview;\n    const { title, message } = getAttachContent(preview);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Dialog2, {\n        open,\n        onOpenChange: setOpen,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(DialogContent2, {\n            className: cn(\"au-p-0 au-pt-4 au-gap-0 au-text-foreground au-overflow-hidden au-text-sm\"),\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DialogTitle2, {\n                    className: cn(\"au-px-6 au-mb-1 \"),\n                    children: title\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn(\"au-px-6 au-mt-1 au-mb-4 au-text-muted-foreground\"),\n                    children: message\n                }),\n                (items || optionsInput.length > 0) && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: \"au-mb-6 au-px-6\",\n                    children: [\n                        items?.map((item)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(PriceItem, {\n                                children: [\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: \"au-truncate au-flex-1\",\n                                        children: item.description\n                                    }),\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        children: item.price\n                                    })\n                                ]\n                            }, item.description)),\n                        optionsInput?.map((option, index)=>{\n                            return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(OptionsInput, {\n                                option,\n                                optionsInput,\n                                setOptionsInput,\n                                index\n                            }, option.feature_name);\n                        })\n                    ]\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(DialogFooter, {\n                    className: \"au-flex au-flex-col sm:au-flex-row au-justify-between au-gap-x-4 au-py-2 au-pl-6 au-pr-3 au-bg-secondary au-border-t au-shadow-inner\",\n                    children: [\n                        due_today && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(TotalPrice, {\n                            children: [\n                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    children: \"Due Today\"\n                                }),\n                                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    children: new Intl.NumberFormat(\"en-US\", {\n                                        style: \"currency\",\n                                        currency: due_today.currency\n                                    }).format(getTotalPrice())\n                                })\n                            ]\n                        }),\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Button, {\n                            size: \"sm\",\n                            onClick: async ()=>{\n                                setLoading(true);\n                                await attach({\n                                    productId: preview.product_id,\n                                    options: optionsInput.map((option)=>({\n                                            featureId: option.feature_id,\n                                            quantity: option.quantity || 0\n                                        }))\n                                });\n                                setOpen(false);\n                                setLoading(false);\n                            },\n                            disabled: loading,\n                            className: \"au-min-w-16 au-flex au-items-center au-gap-2\",\n                            children: loading ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(LoaderCircle, {\n                                className: \"au-w-4 au-h-4 au-animate-spin\"\n                            }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                    className: \"au-whitespace-nowrap au-flex au-gap-1\",\n                                    children: \"Confirm\"\n                                })\n                            })\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n}\nvar PriceItem = ({ children, className, ...props })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: cn(\"au-flex au-flex-col au-pb-4 sm:au-pb-0 au-gap-1 sm:au-flex-row au-justify-between sm:au-h-7 sm:au-gap-2 sm:au-items-center\", className),\n        ...props,\n        children\n    });\n};\nvar OptionsInput = ({ className, option, optionsInput, setOptionsInput, index, ...props })=>{\n    const { feature_name, billing_units, quantity, price } = option;\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(PriceItem, {\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                children: feature_name\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(QuantityInput, {\n                value: quantity ? quantity / billing_units : \"\",\n                onChange: (e)=>{\n                    const newOptions = [\n                        ...optionsInput\n                    ];\n                    newOptions[index].quantity = parseInt(e.target.value) * billing_units;\n                    setOptionsInput(newOptions);\n                },\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"span\", {\n                    className: \"\",\n                    children: [\n                        \"\\xD7 $\",\n                        price,\n                        \" per \",\n                        billing_units === 1 ? \" \" : billing_units,\n                        \" \",\n                        feature_name\n                    ]\n                })\n            }, feature_name)\n        ]\n    }, feature_name);\n};\nvar QuantityInput = ({ children, onChange, value: value1, className, ...props })=>{\n    const currentValue = Number(value1) || 0;\n    const handleValueChange = (newValue)=>{\n        const syntheticEvent = {\n            target: {\n                value: String(newValue)\n            }\n        };\n        onChange(syntheticEvent);\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn(className, \"au-flex au-flex-row au-items-center au-gap-4\"),\n        ...props,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: \"au-flex au-items-center au-gap-1\",\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Button, {\n                        variant: \"outline\",\n                        size: \"icon\",\n                        onClick: ()=>currentValue > 0 && handleValueChange(currentValue - 1),\n                        disabled: currentValue <= 0,\n                        className: \"au-h-6 au-w-6 au-pb-0.5\",\n                        children: \"-\"\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                        className: \"au-w-8 au-text-center au-text-foreground\",\n                        children: currentValue\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Button, {\n                        variant: \"outline\",\n                        size: \"icon\",\n                        onClick: ()=>handleValueChange(currentValue + 1),\n                        className: \"au-h-6 au-w-6 au-pb-0.5\",\n                        children: \"+\"\n                    })\n                ]\n            }),\n            children\n        ]\n    });\n};\nvar TotalPrice = ({ children })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: \"au-w-full au-font-semibold au-flex au-justify-between au-items-center\",\n        children\n    });\n};\n// src/libraries/react/hooks/useAutumnBase.tsx\nvar useAutumnBase = ({ AutumnContext: AutumnContext2 })=>{\n    const context = useAutumnContext({\n        AutumnContext: AutumnContext2,\n        name: \"useAutumn\"\n    });\n    const { attachDialog, paywallDialog } = context;\n    const client = context.client;\n    const { refetch: refetchPricingTable } = usePricingTableBase({\n        AutumnContext: AutumnContext2\n    });\n    let { open: attachOpen, setProps: setAttachProps, setOpen: setAttachOpen, setComponent: setAttachComponent } = attachDialog;\n    let { setProps: setCheckProps, setOpen: setCheckOpen, setComponent: setPaywallComponent } = paywallDialog;\n    const attachWithoutDialog = async (params)=>{\n        const result = await client.attach(params);\n        if (result.error) {\n            return result;\n        }\n        let data = result.data;\n        if (data?.checkout_url && \"undefined\" !== \"undefined\") {}\n        await refetchPricingTable();\n        if (setAttachOpen) {\n            setAttachOpen(false);\n        }\n        return result;\n    };\n    const attachWithDialog = async (params)=>{\n        let { dialog, ...rest } = params;\n        const { productId, entityId, entityData } = params;\n        const checkRes = await client.check({\n            productId,\n            entityId,\n            entityData,\n            withPreview: true\n        });\n        if (checkRes.error) {\n            return checkRes;\n        }\n        let preview = checkRes.data.preview;\n        if (!preview) {\n            return await attachWithoutDialog(rest);\n        } else {\n            setAttachProps({\n                preview\n            });\n            setAttachOpen(true);\n        }\n        return checkRes;\n    };\n    const attach = async (params)=>{\n        const { dialog, openInNewTab } = params;\n        let finalDialog = dialog ? dialog : context.disableDialogs ? void 0 : AttachDialog;\n        if (finalDialog && !attachOpen) {\n            setAttachComponent(finalDialog);\n            return await attachWithDialog(params);\n        }\n        return await attachWithoutDialog(params);\n    };\n    const cancel = async (params)=>{\n        const res = await client.cancel(params);\n        if (res.error) {\n            return res;\n        }\n        return res;\n    };\n    const check = async (params)=>{\n        let { dialog, withPreview } = params;\n        if (dialog) {\n            setPaywallComponent(dialog);\n        }\n        const res = await client.check({\n            ...params,\n            withPreview: withPreview || dialog ? true : false\n        });\n        if (res.error) {\n            return res;\n        }\n        let data = res.data;\n        if (data && data.preview && dialog) {\n            let preview = data.preview;\n            setCheckProps({\n                preview\n            });\n            setCheckOpen(true);\n        }\n        return res;\n    };\n    const track = async (params)=>{\n        const res = await client.track(params);\n        if (res.error) {\n            return res;\n        }\n        return res;\n    };\n    const openBillingPortal = async (params)=>{\n        let defaultParams = {\n            openInNewTab: false\n        };\n        let finalParams = {\n            ...defaultParams,\n            ...params\n        };\n        const res = await client.openBillingPortal(finalParams);\n        if (res.error) {\n            return res;\n        }\n        let data = res.data;\n        if (data?.url && \"undefined\" !== \"undefined\") {} else {\n            return res;\n        }\n    };\n    return {\n        attach,\n        check,\n        track,\n        cancel,\n        openBillingPortal\n    };\n};\n// src/libraries/react/hooks/handleAllowed.ts\nvar getCusFeature = ({ customer, featureId, requiredBalance = 1 })=>{\n    let creditSchema = Object.values(customer.features).find((f)=>f.credit_schema && f.credit_schema.some((c)=>c.feature_id === featureId));\n    if (creditSchema) {\n        let schemaItem = creditSchema.credit_schema?.find((c)=>c.feature_id === featureId);\n        return {\n            feature: creditSchema,\n            requiredBalance: schemaItem.credit_amount * requiredBalance\n        };\n    }\n    return {\n        cusFeature: customer.features[featureId],\n        requiredBalance\n    };\n};\nvar handleFeatureAllowed = ({ customer, params })=>{\n    let { cusFeature, requiredBalance } = getCusFeature({\n        customer,\n        featureId: params.featureId\n    });\n    if (!cusFeature) return false;\n    if (cusFeature.type == \"static\") return true;\n    if (cusFeature.unlimited || cusFeature.overage_allowed) return true;\n    return (cusFeature.balance || 0) >= requiredBalance;\n};\nvar handleAllowed = ({ customer, params })=>{\n    if (!customer) return false;\n    if (!params.featureId && !params.productId) {\n        throw new Error(\"allowed() requires either featureId or productId\");\n    }\n    if (params.featureId) {\n        return handleFeatureAllowed({\n            customer,\n            params\n        });\n    }\n    if (params.productId) {\n        let product = customer.products.find((p)=>p.id == params.productId);\n        if (!product) return false;\n        let status = product.status;\n        if (status == \"scheduled\") return false;\n        return true;\n    }\n    return false;\n};\n// src/libraries/react/hooks/useCustomerBase.tsx\nvar emptyDefaultFunctions = {\n    attach: \"\",\n    check: \"\",\n    track: \"\",\n    cancel: \"\",\n    openBillingPortal: \"\"\n};\nvar useCustomerBase = ({ params, AutumnContext: AutumnContext2, client })=>{\n    const queryKey = [\n        \"customer\",\n        params?.expand\n    ];\n    let context;\n    if (AutumnContext2) {\n        context = useAutumnContext({\n            AutumnContext: AutumnContext2,\n            name: \"useCustomer\"\n        });\n    }\n    if (!client) {\n        client = context.client;\n    }\n    const fetchCustomer = async ()=>{\n        const { data, error: error2 } = await client.createCustomer({\n            errorOnNotFound: params?.errorOnNotFound,\n            expand: params?.expand\n        });\n        if (error2) {\n            throw error2;\n        }\n        if (!data) {\n            return null;\n        }\n        return data;\n    };\n    const { data: customer, error, isLoading, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(queryKey, fetchCustomer, {\n        fallbackData: null,\n        onErrorRetry: {\n            \"useCustomerBase.useSWR2\": (error2, key, config)=>{\n                if (error2.code == \"entity_not_found\") {\n                    return false;\n                }\n                return true;\n            }\n        }[\"useCustomerBase.useSWR2\"]\n    });\n    let autumnFunctions = emptyDefaultFunctions;\n    if (AutumnContext2) {\n        autumnFunctions = useAutumnBase({\n            AutumnContext: AutumnContext2\n        });\n    }\n    return {\n        customer: error ? null : customer,\n        isLoading,\n        error,\n        refetch: mutate,\n        ...autumnFunctions,\n        createEntity: client.entities.create,\n        createReferralCode: client.referrals.createCode,\n        redeemReferralCode: client.referrals.redeemCode,\n        allowed: (params2)=>handleAllowed({\n                customer,\n                params: params2\n            })\n    };\n};\n// src/libraries/react/BaseAutumnProvider.tsx\n\nfunction BaseAutumnProvider({ client, children, AutumnContext: AutumnContext2, disableDialogs = false }) {\n    const [components, setComponents] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [paywallProps, setPaywallProps, paywallOpen, setPaywallOpen] = useDialog(components.paywallDialog);\n    const [productChangeProps, setProductChangeProps, productChangeOpen, setProductChangeOpen] = useDialog(components.productChangeDialog);\n    useCustomerBase({\n        client,\n        params: {\n            errorOnNotFound: false\n        }\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(AutumnContext2.Provider, {\n        value: {\n            initialized: true,\n            client,\n            disableDialogs,\n            paywallDialog: {\n                props: paywallProps,\n                setProps: setPaywallProps,\n                open: paywallOpen,\n                setOpen: setPaywallOpen,\n                setComponent: (component)=>{\n                    setComponents({\n                        ...components,\n                        paywallDialog: component\n                    });\n                }\n            },\n            attachDialog: {\n                props: productChangeProps,\n                setProps: setProductChangeProps,\n                open: productChangeOpen,\n                setOpen: setProductChangeOpen,\n                setComponent: (component)=>{\n                    setComponents({\n                        ...components,\n                        productChangeDialog: component\n                    });\n                }\n            }\n        },\n        children: [\n            components.paywallDialog && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(components.paywallDialog, {\n                open: paywallOpen,\n                setOpen: setPaywallOpen,\n                ...paywallProps\n            }),\n            components.productChangeDialog && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(components.productChangeDialog, {\n                open: productChangeOpen,\n                setOpen: setProductChangeOpen,\n                ...productChangeProps\n            }),\n            children\n        ]\n    });\n}\n// src/libraries/react/ReactAutumnProvider.tsx\n\n\nvar ReactAutumnProvider = ({ children, getBearerToken, backendUrl, customerData, includeCredentials = true, disableDialogs = false, authClient })=>{\n    if (backendUrl && !backendUrl.startsWith(\"http\")) {\n        console.warn(`backendUrl is not a valid URL: ${backendUrl}`);\n    }\n    let client = new AutumnClient({\n        backendUrl: backendUrl || \"\",\n        getBearerToken,\n        customerData,\n        includeCredentials\n    });\n    const analyseAuthClient = async ()=>{\n        console.log(\"Auth client:\", authClient);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ReactAutumnProvider.useEffect17\": ()=>{\n            analyseAuthClient();\n        }\n    }[\"ReactAutumnProvider.useEffect17\"], [\n        authClient\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(BaseAutumnProvider, {\n        client,\n        AutumnContext,\n        disableDialogs,\n        children\n    });\n};\n// src/libraries/react/hooks/useCustomer.tsx\nvar useCustomer = (params)=>{\n    return useCustomerBase({\n        params,\n        AutumnContext\n    });\n};\n// src/libraries/react/hooks/usePricingTable.tsx\nvar usePricingTable = (params)=>{\n    return usePricingTableBase({\n        AutumnContext,\n        params\n    });\n};\n// src/libraries/react/hooks/useEntityBase.tsx\n\n\nvar useEntityBase = ({ entityId, params, AutumnContext: AutumnContext2 })=>{\n    const { client } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AutumnContext2);\n    const queryKey = [\n        \"entity\",\n        entityId,\n        params?.expand\n    ];\n    const fetchEntity = async ()=>{\n        if (!entityId) {\n            return null;\n        }\n        const { data: data2, error: error2 } = await client.entities.get(entityId, params);\n        if (error2) {\n            throw error2;\n        }\n        if (!data2) {\n            return null;\n        }\n        return data2;\n    };\n    const { data, error, isLoading, mutate } = (0,swr__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(queryKey, fetchEntity, {\n        fallbackData: null,\n        onErrorRetry: {\n            \"useEntityBase.useSWR3\": (error2, key, config)=>{\n                if (error2.code == \"entity_not_found\") {\n                    return false;\n                }\n                return true;\n            }\n        }[\"useEntityBase.useSWR3\"]\n    });\n    const { check: checkAutumn, attach: attachAutumn, cancel: cancelAutumn, track: trackAutumn } = useAutumnBase({\n        AutumnContext: AutumnContext2\n    });\n    const allowed = (params2)=>handleAllowed({\n            customer: data,\n            params: params2\n        });\n    const check = (params2)=>checkAutumn({\n            ...params2,\n            entityId: entityId || void 0\n        });\n    const attach = (params2)=>attachAutumn({\n            ...params2,\n            entityId: entityId || void 0\n        });\n    const cancel = (params2)=>cancelAutumn({\n            ...params2,\n            entityId: entityId || void 0\n        });\n    const track = (params2)=>trackAutumn({\n            ...params2,\n            entityId: entityId || void 0\n        });\n    if (!entityId) {\n        return {\n            entity: null,\n            isLoading: false,\n            error: null,\n            refetch: mutate,\n            allowed,\n            check,\n            attach,\n            cancel,\n            track\n        };\n    }\n    return {\n        entity: error ? null : data,\n        isLoading,\n        error,\n        refetch: mutate,\n        allowed,\n        check,\n        attach,\n        cancel,\n        track\n    };\n};\n// src/libraries/react/hooks/useEntity.tsx\nvar useEntity = (entityId, params)=>{\n    return useEntityBase({\n        AutumnContext,\n        entityId,\n        params\n    });\n};\n// src/libraries/react/hooks/useAutumn.tsx\nvar useAutumn = ()=>{\n    return useAutumnBase({\n        AutumnContext\n    });\n};\n// src/libraries/react/components/check-dialog/check-dialog-synced.tsx\n\n// src/libraries/react/components/check-dialog/lib/check-content.tsx\nvar getCheckContent = (preview)=>{\n    const { scenario, products, feature_name } = preview;\n    if (products.length == 0) {\n        switch(scenario){\n            case \"usage_limit\":\n                return {\n                    title: `Feature Unavailable`,\n                    message: `You have reached the usage limit for ${feature_name}. Please contact us to increase your limit.`\n                };\n            default:\n                return {\n                    title: \"Feature Unavailable\",\n                    message: \"This feature is not available for your account. Please contact us to enable it.\"\n                };\n        }\n    }\n    const nextProduct = products[0];\n    const isAddOn = nextProduct && nextProduct.is_add_on;\n    const title = nextProduct.free_trial ? `Start trial for ${nextProduct.name}` : nextProduct.is_add_on ? `Purchase ${nextProduct.name}` : `Upgrade to ${nextProduct.name}`;\n    let message = \"\";\n    if (isAddOn) {\n        message = `Please purchase the ${nextProduct.name} add-on to continue using ${feature_name}.`;\n    } else {\n        message = `Please upgrade to the ${nextProduct.name} plan to continue using ${feature_name}.`;\n    }\n    switch(scenario){\n        case \"usage_limit\":\n            return {\n                title,\n                message: `You have reached the usage limit for ${feature_name}. ${message}`\n            };\n        case \"feature_flag\":\n            return {\n                title,\n                message: `This feature is not available for your account. ${message}`\n            };\n        default:\n            return {\n                title: \"Feature Unavailable\",\n                message: \"This feature is not available for your account.\"\n            };\n    }\n};\n// src/libraries/react/components/check-dialog/check-dialog-synced.tsx\n\nfunction CheckDialog(params) {\n    const [loading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    if (!params || !params.preview) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {});\n    }\n    const { open, setOpen } = params;\n    const { products } = params.preview;\n    const { title, message } = getCheckContent(params.preview);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Dialog2, {\n        open,\n        onOpenChange: setOpen,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(DialogContent2, {\n            className: \"au-p-0 au-pt-4 au-gap-0 au-text-foreground au-overflow-hidden au-text-sm\",\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DialogTitle2, {\n                    className: cn(\"au-font-bold au-text-xl au-px-6\"),\n                    children: title\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: \"au-px-6 au-my-2\",\n                    children: message\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(DialogFooter, {\n                    className: \"au-flex au-flex-col sm:au-flex-row au-justify-between au-gap-x-4 au-py-2 au-mt-4 au-pl-6 au-pr-3 au-bg-secondary au-border-t\",\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(Button, {\n                        size: \"sm\",\n                        className: \"au-font-medium au-shadow au-transition au-min-w-20\",\n                        onClick: async ()=>{\n                            setOpen(false);\n                        },\n                        children: [\n                            loading && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(LoaderCircle, {\n                                className: \"au-w-4 au-h-4 au-mr-2 au-animate-spin\"\n                            }),\n                            \"Confirm\"\n                        ]\n                    })\n                })\n            ]\n        })\n    });\n}\n// src/libraries/react/components/pricing-table/pricing-table-synced.tsx\n\n\n// src/libraries/react/components/ui/switch.tsx\n\n// ../node_modules/.pnpm/@radix-ui+react-switch@1.2.5_@types+react-dom@18.3.5_@types+react@18.3.14__@types+react@18.3._uwbsid7oqv3j27entxmzcweyee/node_modules/@radix-ui/react-switch/dist/index.mjs\n\n// ../node_modules/.pnpm/@radix-ui+react-use-previous@1.1.1_@types+react@18.3.14_react@18.3.1/node_modules/@radix-ui/react-use-previous/dist/index.mjs\n\nfunction usePrevious(value1) {\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef({\n        value: value1,\n        previous: value1\n    });\n    return react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"usePrevious.useMemo\": ()=>{\n            if (ref.current.value !== value1) {\n                ref.current.previous = ref.current.value;\n                ref.current.value = value1;\n            }\n            return ref.current.previous;\n        }\n    }[\"usePrevious.useMemo\"], [\n        value1\n    ]);\n}\n// ../node_modules/.pnpm/@radix-ui+react-use-size@1.1.1_@types+react@18.3.14_react@18.3.1/node_modules/@radix-ui/react-use-size/dist/index.mjs\n\nfunction useSize(element) {\n    const [size, setSize] = react__WEBPACK_IMPORTED_MODULE_1__.useState(void 0);\n    useLayoutEffect2({\n        \"useSize.useLayoutEffect2\": ()=>{\n            if (element) {\n                setSize({\n                    width: element.offsetWidth,\n                    height: element.offsetHeight\n                });\n                const resizeObserver = new ResizeObserver({\n                    \"useSize.useLayoutEffect2\": (entries)=>{\n                        if (!Array.isArray(entries)) {\n                            return;\n                        }\n                        if (!entries.length) {\n                            return;\n                        }\n                        const entry = entries[0];\n                        let width;\n                        let height;\n                        if (\"borderBoxSize\" in entry) {\n                            const borderSizeEntry = entry[\"borderBoxSize\"];\n                            const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n                            width = borderSize[\"inlineSize\"];\n                            height = borderSize[\"blockSize\"];\n                        } else {\n                            width = element.offsetWidth;\n                            height = element.offsetHeight;\n                        }\n                        setSize({\n                            width,\n                            height\n                        });\n                    }\n                }[\"useSize.useLayoutEffect2\"]);\n                resizeObserver.observe(element, {\n                    box: \"border-box\"\n                });\n                return ({\n                    \"useSize.useLayoutEffect2\": ()=>resizeObserver.unobserve(element)\n                })[\"useSize.useLayoutEffect2\"];\n            } else {\n                setSize(void 0);\n            }\n        }\n    }[\"useSize.useLayoutEffect2\"], [\n        element\n    ]);\n    return size;\n}\n// ../node_modules/.pnpm/@radix-ui+react-switch@1.2.5_@types+react-dom@18.3.5_@types+react@18.3.14__@types+react@18.3._uwbsid7oqv3j27entxmzcweyee/node_modules/@radix-ui/react-switch/dist/index.mjs\n\nvar SWITCH_NAME = \"Switch\";\nvar [createSwitchContext, createSwitchScope] = createContextScope(SWITCH_NAME);\nvar [SwitchProvider, useSwitchContext] = createSwitchContext(SWITCH_NAME);\nvar Switch = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const { __scopeSwitch, name, checked: checkedProp, defaultChecked, required, disabled, value: value1 = \"on\", onCheckedChange, form, ...switchProps } = props;\n    const [button, setButton] = react__WEBPACK_IMPORTED_MODULE_1__.useState(null);\n    const composedRefs = useComposedRefs(forwardedRef, {\n        \"Switch.useComposedRefs[composedRefs]\": (node)=>setButton(node)\n    }[\"Switch.useComposedRefs[composedRefs]\"]);\n    const hasConsumerStoppedPropagationRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    const isFormControl = button ? form || !!button.closest(\"form\") : true;\n    const [checked, setChecked] = useControllableState({\n        prop: checkedProp,\n        defaultProp: defaultChecked ?? false,\n        onChange: onCheckedChange,\n        caller: SWITCH_NAME\n    });\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(SwitchProvider, {\n        scope: __scopeSwitch,\n        checked,\n        disabled,\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Primitive.button, {\n                type: \"button\",\n                role: \"switch\",\n                \"aria-checked\": checked,\n                \"aria-required\": required,\n                \"data-state\": getState2(checked),\n                \"data-disabled\": disabled ? \"\" : void 0,\n                disabled,\n                value: value1,\n                ...switchProps,\n                ref: composedRefs,\n                onClick: composeEventHandlers(props.onClick, (event)=>{\n                    setChecked((prevChecked)=>!prevChecked);\n                    if (isFormControl) {\n                        hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();\n                        if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n                    }\n                })\n            }),\n            isFormControl && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(SwitchBubbleInput, {\n                control: button,\n                bubbles: !hasConsumerStoppedPropagationRef.current,\n                name,\n                value: value1,\n                checked,\n                required,\n                disabled,\n                form,\n                style: {\n                    transform: \"translateX(-100%)\"\n                }\n            })\n        ]\n    });\n});\nSwitch.displayName = SWITCH_NAME;\nvar THUMB_NAME = \"SwitchThumb\";\nvar SwitchThumb = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef((props, forwardedRef)=>{\n    const { __scopeSwitch, ...thumbProps } = props;\n    const context = useSwitchContext(THUMB_NAME, __scopeSwitch);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Primitive.span, {\n        \"data-state\": getState2(context.checked),\n        \"data-disabled\": context.disabled ? \"\" : void 0,\n        ...thumbProps,\n        ref: forwardedRef\n    });\n});\nSwitchThumb.displayName = THUMB_NAME;\nvar BUBBLE_INPUT_NAME = \"SwitchBubbleInput\";\nvar SwitchBubbleInput = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ __scopeSwitch, control, checked, bubbles = true, ...props }, forwardedRef)=>{\n    const ref = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const composedRefs = useComposedRefs(ref, forwardedRef);\n    const prevChecked = usePrevious(checked);\n    const controlSize = useSize(control);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"SwitchBubbleInput.useEffect\": ()=>{\n            const input = ref.current;\n            if (!input) return;\n            const inputProto = window.HTMLInputElement.prototype;\n            const descriptor = Object.getOwnPropertyDescriptor(inputProto, \"checked\");\n            const setChecked = descriptor.set;\n            if (prevChecked !== checked && setChecked) {\n                const event = new Event(\"click\", {\n                    bubbles\n                });\n                setChecked.call(input, checked);\n                input.dispatchEvent(event);\n            }\n        }\n    }[\"SwitchBubbleInput.useEffect\"], [\n        prevChecked,\n        checked,\n        bubbles\n    ]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"input\", {\n        type: \"checkbox\",\n        \"aria-hidden\": true,\n        defaultChecked: checked,\n        ...props,\n        tabIndex: -1,\n        ref: composedRefs,\n        style: {\n            ...props.style,\n            ...controlSize,\n            position: \"absolute\",\n            pointerEvents: \"none\",\n            opacity: 0,\n            margin: 0\n        }\n    });\n});\nSwitchBubbleInput.displayName = BUBBLE_INPUT_NAME;\nfunction getState2(checked) {\n    return checked ? \"checked\" : \"unchecked\";\n}\nvar Root2 = Switch;\nvar Thumb = SwitchThumb;\n// src/libraries/react/components/ui/switch.tsx\n\nvar Switch2 = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ className, ...props }, ref)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Root2, {\n        className: cn(\"au-peer au-inline-flex au-h-5 au-w-9 au-shrink-0 au-cursor-pointer au-items-center au-rounded-full au-border-2 au-border-transparent au-shadow-sm au-transition-colors focus-visible:au-outline-none focus-visible:au-ring-2 focus-visible:au-ring-ring focus-visible:au-ring-offset-2 focus-visible:au-ring-offset-background au-disabled:cursor-not-allowed au-disabled:opacity-50 data-[state=checked]:au-bg-primary data-[state=unchecked]:au-bg-input\", className),\n        ...props,\n        ref,\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Thumb, {\n            className: cn(\"au-pointer-events-none au-block au-h-4 au-w-4 au-rounded-full au-bg-background au-shadow-lg au-ring-0 au-transition-transform data-[state=checked]:au-translate-x-4 data-[state=unchecked]:au-translate-x-0\")\n        })\n    }));\nSwitch2.displayName = Root2.displayName;\n// src/libraries/react/components/pricing-table/lib/pricing-table-content.tsx\n\nvar getPricingTableContent = (product)=>{\n    const { scenario, free_trial } = product;\n    if (free_trial && free_trial.trial_available) {\n        return {\n            buttonText: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                children: \"Start Free Trial\"\n            })\n        };\n    }\n    switch(scenario){\n        case \"scheduled\":\n            return {\n                buttonText: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                    children: \"Plan Scheduled\"\n                })\n            };\n        case \"active\":\n            return {\n                buttonText: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                    children: \"Current Plan\"\n                })\n            };\n        case \"new\":\n            if (product.properties?.is_one_off) {\n                return {\n                    buttonText: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                        children: \"Purchase\"\n                    })\n                };\n            } else {\n                return {\n                    buttonText: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                        children: \"Get started\"\n                    })\n                };\n            }\n        case \"renew\":\n            return {\n                buttonText: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                    children: \"Renew\"\n                })\n            };\n        case \"upgrade\":\n            return {\n                buttonText: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                    children: \"Upgrade\"\n                })\n            };\n        case \"downgrade\":\n            return {\n                buttonText: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                    children: \"Downgrade\"\n                })\n            };\n        case \"cancel\":\n            return {\n                buttonText: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                    children: \"Cancel Plan\"\n                })\n            };\n        default:\n            return {\n                buttonText: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                    children: \"Get Started\"\n                })\n            };\n    }\n};\n// src/libraries/react/components/pricing-table/pricing-table-synced.tsx\n\nfunction PricingTable({ productDetails }) {\n    const { attach } = useCustomer();\n    const [isAnnual, setIsAnnual] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { products, isLoading, error } = usePricingTable({\n        productDetails\n    });\n    if (isLoading) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n            className: \"au-w-full au-h-full au-flex au-justify-center au-items-center au-min-h-[300px]\",\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(LoaderCircle, {\n                className: \"au-w-6 au-h-6 au-text-zinc-400 au-animate-spin\"\n            })\n        });\n    }\n    if (error) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n            children: \" Something went wrong...\"\n        });\n    }\n    const intervals = Array.from(new Set(products?.map((p)=>p.properties?.interval_group).filter((i)=>!!i)));\n    const multiInterval = intervals.length > 1;\n    const intervalFilter = (product)=>{\n        if (!product.properties?.interval_group) {\n            return true;\n        }\n        if (multiInterval) {\n            if (isAnnual) {\n                return product.properties?.interval_group === \"year\";\n            } else {\n                return product.properties?.interval_group === \"month\";\n            }\n        }\n        return true;\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: cn(\"au-root\"),\n        children: products && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PricingTableContainer, {\n            products,\n            isAnnualToggle: isAnnual,\n            setIsAnnualToggle: setIsAnnual,\n            multiInterval,\n            children: products.filter(intervalFilter).map((product, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PricingCard, {\n                    productId: product.id,\n                    buttonProps: {\n                        disabled: product.scenario === \"active\" || product.scenario === \"scheduled\",\n                        onClick: async ()=>{\n                            if (product.id) {\n                                await attach({\n                                    productId: product.id,\n                                    dialog: AttachDialog\n                                });\n                            } else if (product.display?.button_url) {\n                                window.open(product.display?.button_url, \"_blank\");\n                            }\n                        }\n                    }\n                }, index))\n        })\n    });\n}\nvar PricingTableContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    isAnnualToggle: false,\n    setIsAnnualToggle: ()=>{},\n    products: [],\n    showFeatures: true\n});\nvar usePricingTableContext = (componentName)=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PricingTableContext);\n    if (context === void 0) {\n        throw new Error(`${componentName} must be used within <PricingTable />`);\n    }\n    return context;\n};\nvar PricingTableContainer = ({ children, products, showFeatures = true, className, isAnnualToggle, setIsAnnualToggle, multiInterval })=>{\n    if (!products) {\n        throw new Error(\"products is required in <PricingTable />\");\n    }\n    if (products.length === 0) {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {});\n    }\n    const hasRecommended = products?.some((p)=>p.display?.recommend_text);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PricingTableContext.Provider, {\n        value: {\n            isAnnualToggle,\n            setIsAnnualToggle,\n            products,\n            showFeatures\n        },\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n            className: cn(\"au-flex au-items-center au-flex-col\", hasRecommended && \"!au-py-10\"),\n            children: [\n                multiInterval && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn(products.some((p)=>p.display?.recommend_text) && \"au-mb-8\"),\n                    children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(AnnualSwitch, {\n                        isAnnualToggle,\n                        setIsAnnualToggle\n                    })\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                    className: cn(\"au-grid au-grid-cols-1 sm:au-grid-cols-2 lg:au-grid-cols-[repeat(auto-fit,minmax(200px,1fr))] au-w-full au-gap-2\", className),\n                    children\n                })\n            ]\n        })\n    });\n};\nvar PricingCard = ({ productId, className, buttonProps })=>{\n    const { products, showFeatures } = usePricingTableContext(\"PricingCard\");\n    const product = products.find((p)=>p.id === productId);\n    if (!product) {\n        throw new Error(`Product with id ${productId} not found`);\n    }\n    const { name, display: productDisplay, items } = product;\n    const { buttonText } = getPricingTableContent(product);\n    const isRecommended = productDisplay?.recommend_text ? true : false;\n    const mainPriceDisplay = product.properties?.is_free ? {\n        primary_text: \"Free\"\n    } : product.items[0].display;\n    const featureItems = product.properties?.is_free ? product.items : product.items.slice(1);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn(\" au-w-full au-h-full au-py-6 au-text-foreground au-border au-rounded-lg au-shadow-sm au-max-w-xl\", isRecommended && \"lg:au--translate-y-6 lg:au-shadow-lg dark:au-shadow-zinc-800/80 lg:au-h-[calc(100%+48px)] au-bg-secondary/40\", className),\n        children: [\n            productDisplay?.recommend_text && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(RecommendedBadge, {\n                recommended: productDisplay?.recommend_text\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                className: cn(\"au-flex au-flex-col au-h-full au-flex-grow\", isRecommended && \"lg:au-translate-y-6\"),\n                children: [\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: \"au-h-full\",\n                        children: [\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                className: \"au-flex au-flex-col\",\n                                children: [\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                        className: \"au-pb-4\",\n                                        children: [\n                                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"h2\", {\n                                                className: \"au-text-2xl au-font-semibold au-px-6 au-truncate\",\n                                                children: productDisplay?.name || name\n                                            }),\n                                            productDisplay?.description && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                                className: \"au-text-sm au-text-muted-foreground au-px-6 au-h-8\",\n                                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"p\", {\n                                                    className: \"au-line-clamp-2\",\n                                                    children: productDisplay?.description\n                                                })\n                                            })\n                                        ]\n                                    }),\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                        className: \"au-mb-2\",\n                                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"h3\", {\n                                            className: \"au-font-semibold au-h-16 au-flex au-px-6 au-items-center au-border-y au-mb-4 au-bg-secondary/40\",\n                                            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                                className: \"au-line-clamp-2\",\n                                                children: [\n                                                    mainPriceDisplay?.primary_text,\n                                                    \" \",\n                                                    mainPriceDisplay?.secondary_text && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                                        className: \"au-font-normal au-text-muted-foreground au-mt-1\",\n                                                        children: mainPriceDisplay?.secondary_text\n                                                    })\n                                                ]\n                                            })\n                                        })\n                                    })\n                                ]\n                            }),\n                            showFeatures && featureItems.length > 0 && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                                className: \"au-flex-grow au-px-6 au-mb-6\",\n                                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PricingFeatureList, {\n                                    items: featureItems,\n                                    showIcon: true,\n                                    everythingFrom: product.display?.everything_from\n                                })\n                            })\n                        ]\n                    }),\n                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                        className: cn(\" au-px-6 \", isRecommended && \"lg:au--translate-y-12\"),\n                        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(PricingCardButton, {\n                            recommended: productDisplay?.recommend_text ? true : false,\n                            ...buttonProps,\n                            children: buttonText\n                        })\n                    })\n                ]\n            })\n        ]\n    });\n};\nvar PricingFeatureList = ({ items, showIcon = true, everythingFrom, className })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: cn(\"au-flex-grow\", className),\n        children: [\n            everythingFrom && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"p\", {\n                className: \"au-text-sm au-mb-4\",\n                children: [\n                    \"Everything from \",\n                    everythingFrom,\n                    \", plus:\"\n                ]\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n                className: \"au-space-y-3\",\n                children: items.map((item, index)=>/* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                        className: \"au-flex au-items-start au-gap-2 au-text-sm\",\n                        children: [\n                            showIcon && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Check, {\n                                className: \"au-h-4 au-w-4 au-text-primary au-flex-shrink-0 au-mt-0.5\"\n                            }),\n                            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                                className: \"au-flex au-flex-col\",\n                                children: [\n                                    /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        children: item.display?.primary_text\n                                    }),\n                                    item.display?.secondary_text && /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                                        className: \"au-text-sm au-text-muted-foreground\",\n                                        children: item.display?.secondary_text\n                                    })\n                                ]\n                            })\n                        ]\n                    }, index))\n            })\n        ]\n    });\n};\nvar PricingCardButton = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ recommended, children, className, onClick, ...props }, ref)=>{\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const handleClick = async (e)=>{\n        setLoading(true);\n        try {\n            await onClick?.(e);\n        } catch (error) {\n            console.error(error);\n        } finally{\n            setLoading(false);\n        }\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Button, {\n        className: cn(\"au-w-full au-py-3 au-px-4 au-group au-overflow-hidden au-relative au-transition-all au-duration-300 hover:au-brightness-90 au-border au-rounded-lg\", className),\n        ...props,\n        variant: recommended ? \"default\" : \"secondary\",\n        ref,\n        disabled: loading || props.disabled,\n        onClick: handleClick,\n        children: loading ? /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(LoaderCircle, {\n            className: \"au-h-4 au-w-4 au-animate-spin\"\n        }) : /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n            children: [\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: \"au-flex au-items-center au-justify-between au-w-full au-transition-transform au-duration-300 group-hover:au-translate-y-[-130%]\",\n                    children: [\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            children\n                        }),\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"au-text-sm\",\n                            children: \"\\u2192\"\n                        })\n                    ]\n                }),\n                /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n                    className: \"au-flex au-items-center au-justify-between au-w-full au-absolute au-px-4 au-translate-y-[130%] au-transition-transform au-duration-300 group-hover:au-translate-y-0 au-mt-2 group-hover:au-mt-0\",\n                    children: [\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            children\n                        }),\n                        /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                            className: \"au-text-sm\",\n                            children: \"\\u2192\"\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n});\nPricingCardButton.displayName = \"PricingCardButton\";\nvar AnnualSwitch = ({ isAnnualToggle, setIsAnnualToggle })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(\"div\", {\n        className: \"au-flex au-items-center au-space-x-2 au-mb-4\",\n        children: [\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                className: \"au-text-sm au-text-muted-foreground\",\n                children: \"Monthly\"\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(Switch2, {\n                id: \"annual-billing\",\n                checked: isAnnualToggle,\n                onCheckedChange: setIsAnnualToggle\n            }),\n            /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"span\", {\n                className: \"au-text-sm au-text-muted-foreground\",\n                children: \"Annual\"\n            })\n        ]\n    });\n};\nvar RecommendedBadge = ({ recommended })=>{\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(\"div\", {\n        className: \"au-bg-secondary au-absolute au-border au-text-muted-foreground au-text-sm au-font-medium lg:au-rounded-full au-px-3 lg:au-py-0.5 lg:au-top-4 lg:au-right-4 au-top-[-1px] au-right-[-1px] au-rounded-bl-lg\",\n        children: recommended\n    });\n};\n /*! Bundled license information:\n\nlucide-react/dist/esm/shared/src/utils.js:\nlucide-react/dist/esm/defaultAttributes.js:\nlucide-react/dist/esm/Icon.js:\nlucide-react/dist/esm/createLucideIcon.js:\nlucide-react/dist/esm/icons/check.js:\nlucide-react/dist/esm/icons/loader-circle.js:\nlucide-react/dist/esm/icons/x.js:\nlucide-react/dist/esm/lucide-react.js:\n  (**\n   * @license lucide-react v0.523.0 - ISC\n   *\n   * This source code is licensed under the ISC license.\n   * See the LICENSE file in the root directory of this source tree.\n   *)\n*/ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/autumn-js@0.0.77_react@18.3.1/node_modules/autumn-js/dist/libraries/react/index.mjs\n");

/***/ })

};
;